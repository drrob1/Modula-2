IMPLEMENTATION MODULE RAN4;
(*
  Numerical Recipies in Fortran 77, 2nd ed., The Art of Scientific Computing
  --William H. Press, William T. Vettering, Saul A. Teukolsky, Brian P. Flannery
  
  Note: check overflow must be set to No.

  REVISION HISTORY
  ----------------
  21 May 06 -- Module created.
*)

IMPORT SYSTEM;
FROM SysClock IMPORT DateTime, GetClock;
(*
  From SysClock
  CONST maxSecondParts = 999; /* implementation dependent value */
  
  TYPE
    Month       = [1..12];
    Day         = [1..31];
    Hour        = [0..23];
    Min         = [0..59];
    Sec         = [0..59];
    Fraction    = [0..maxSecondParts];
    UTCDiff     = [-780..720];
    DateTime    = RECORD
        year            : CARDINAL;
        month           : Month;
        day             : Day;
        hour            : Hour;
        minute          : Min;
        second          : Sec;
        fractions       : Fraction; /* parts of a second */
        zone            : UTCDiff;  /* Time zone differential factor
                                       which is the number of minutes
                                       to add to local time to obtain
                                       UTC. */
        summerTimeFlag  : BOOLEAN;  /* interpretation depends on local
                                       usage */
        END;
*)

VAR
	idums     : INTEGER = 0;
	staticInt : INTEGER;
	int       : INTEGER;
	
TYPE
	cardinalArray4 = ARRAY [1..4] OF CARDINAL;
  		

PROCEDURE psdes(VAR INOUT leftword,rightword : CARDINAL);
	CONST iter = 4;
	      c1 = cardinalArray4{0baa96887H, 1e17d32cH, 03bcdc3cH, 0f33d1b2H};
	      c2 = cardinalArray4{4b0f3b58H, 0e874f0c3H, 6955c5a6H, 55a7ca46H};
	
	VAR 
	    i, ia, ib, iswap, itmphi, itmplo : CARDINAL;

BEGIN
	FOR i := 1 TO iter DO
		iswap := rightword;
		ia := rightword BXOR c1[i];
		itmplo := ia BAND 0ffffH;
		itmphi := (ia SHR 16) BAND 0ffffH;
		ib := itmplo*itmplo + BNOT (itmphi*itmphi);
		
		ia := (ib SHL 16) BOR ((ib SHR 16) BAND 0ffffH);
		rightword := (leftword BXOR (c2[i] BXOR ia)) + itmplo*itmphi;
		leftword := iswap;
	END;
END psdes;

PROCEDURE ran4(VAR INOUT idum:INTEGER) : REAL;
(*
  Returns a uniform deviate in the range 0 <= 1 generated by pseudo-DES hashing of the 64 bit
  word (idums,idum) where idums was set by a previous call w/ negative idum.  Also increments
  idum.  This rtn can be used to generate a random sequence by successive calls, leaving idum
  unaltered btwn calls; or it can randomly access the n-th deviate in a sequency by calling w/
  idum=n.  Different sequences are initialized by calls with differing neg values of idum.
*)

CONST
(*
  jflone and jflmsk used to produce floating point num btwn 1 and 2 by bitwise masking.  These
  constants work for IEEE 32-bit reals.  For VAXes jflone = 00004080H, jflmsk = ffff007f.
*)
	jflone = 3f800000H;
	jflmsk = 007fffffH;

VAR
	rightword, leftword : CARDINAL;
	fitemp : RECORD CASE :BOOLEAN OF
		  FALSE: itemp : CARDINAL;  (* Fortran version uses EQUIVALENCE(itemp,ftemp) here *)
		| TRUE:  ftemp : REAL;
	  END; (* case variant record *)
	END; (* record declaration *)
	
BEGIN
	IF idum < 0 THEN
	  idums := -idum;
	  idum := 1;
	END;
  rightword := idum;
  leftword := idums;
  psdes(leftword,rightword);
  fitemp.itemp :=  jflone BOR (jflmsk BAND rightword);
  INC(idum);
  RETURN(fitemp.ftemp - 1.0);
END ran4;

PROCEDURE randreal (): REAL;
BEGIN
	RETURN(ran4(staticInt));
END randreal;

PROCEDURE randcard (bound : CARDINAL): CARDINAL;
BEGIN
  IF bound = 0 THEN 
    RETURN TRUNC(FLOAT(MAX(CARDINAL))*randreal());
  ELSE
    RETURN TRUNC(FLOAT(bound)*randreal());
  END;
END randcard;

PROCEDURE randint (bound : INTEGER): INTEGER;
BEGIN
  RETURN SYSTEM.CAST(INTEGER, (randcard(ABS(bound))));
END randint;

PROCEDURE randomize;
VAR
  t    : DateTime;
  i, j : CARDINAL;
  dummy: REAL;
BEGIN
  GetClock(t);
  int := -VAL(INTEGER,t.fractions);
  staticInt := int;
(*  j := t.minute;   minute is total elapsed minutes in day, not in hour *)
  j := t.hour*60 + t.minute;
  FOR i := 0 TO j DO
    dummy := ran4(int);
  END;
END randomize;


BEGIN
  randomize;
END RAN4.