(*
* Copyright (c) 1985-2000, Microsoft Corp. All rights reserved.             *
*)
(* Conversion from Microsoft WIN32 SDK C source to Modula-2 source *)
(* Copyright (c) 2009, ADW Software. All rights reserved. *)

DEFINITION MODULE WINUSER;

FROM SYSTEM IMPORT
    CAST, ADR, MAKEADR, UNREFERENCED_PARAMETER;

FROM WIN32 IMPORT
    %IF Bits64 %THEN
    LONG_PTR,
    %END
    HANDLE, PVOID, DWORD, HWND, UINT, UINT_PTR, WPARAM, LPARAM, LRESULT, BOOL, HDC, NULL,
    LPCWSTR, LPCSTR, LPWSTR, LPSTR, LPTSTR, POINT, HKL, HDESK, HWINSTA, LPWORD,
    LPSECURITY_ATTRIBUTES,
    PSECURITY_INFORMATION, PSECURITY_DESCRIPTOR, HINSTANCE, HICON, HCURSOR,
    HBRUSH, RECT, WORD, LONG, LPVOID, ATOM, HMENU, WCHAR, SHORT, PBYTE,
    HACCEL, HBITMAP, HRGN,
    WINT, COLORREF, HHOOK, LPATOM, HTASK, HGLOBAL, BYTE,
    INT_PTR, ULONG_PTR, DWORD_PTR,
    HMONITOR, HMODULE, HWINEVENTHOOK;

FROM WINGDI IMPORT
    LOGFONTA, LOGFONTW, DEVMODEA, DEVMODEW, CCHDEVICENAME, DISPLAY_DEVICEA, DISPLAY_DEVICEW;


<*/CALLS:WINDOWSCALL/DLLDEF*>
<*/NOHIGH*>
<*/ALIGN:8/NOPACK*>

CONST
    WINVER               = 0030Ah;

TYPE
    HDWP                 = HANDLE;

    MENUTEMPLATEA        = BYTE;
    MENUTEMPLATEW        = BYTE;
    LPMENUTEMPLATEA      = PVOID;
    LPMENUTEMPLATEW      = PVOID;
    %IF UNICODE %THEN
    MENUTEMPLATE         = MENUTEMPLATEW;
    LPMENUTEMPLATE       = LPMENUTEMPLATEW;
    %ELSE
    LPMENUTEMPLATE       = LPMENUTEMPLATEA;
    MENUTEMPLATE         = MENUTEMPLATEA;
    %END

    WNDPROC              = PROCEDURE(HWND,
                                     UINT,
                                     WPARAM,
                                     LPARAM) : LRESULT [EXPORT];

    DLGPROC              = PROCEDURE(HWND,
                                     UINT,
                                     WPARAM,
                                     LPARAM) : INT_PTR [EXPORT];

    TIMERPROC            = PROCEDURE(HWND,
                                     UINT,
                                     UINT_PTR,
                                     DWORD) [EXPORT];

    GRAYSTRINGPROC       = PROCEDURE(HDC,
                                     LPARAM,
                                     INTEGER) : BOOL [EXPORT];

    WNDENUMPROC          = PROCEDURE(HWND,
                                     LPARAM) : BOOL [EXPORT];

    HOOKPROC             = PROCEDURE(INTEGER,
                                     WPARAM,
                                     LPARAM) : LRESULT [EXPORT];

    SENDASYNCPROC        = PROCEDURE(HWND,
                                     UINT,
                                     ULONG_PTR,
                                     LRESULT) [EXPORT];

    PROPENUMPROCA        = PROCEDURE(HWND,
                                     ARRAY OF ACHAR,
                                     HANDLE) : BOOL [EXPORT];

    PROPENUMPROCW        = PROCEDURE(HWND,
                                     ARRAY OF UCHAR,
                                     HANDLE) : BOOL [EXPORT];

    PROPENUMPROCEXA      = PROCEDURE(HWND,
                                     VAR ARRAY OF ACHAR,
                                     HANDLE,
                                     ULONG_PTR) : BOOL [EXPORT];

    PROPENUMPROCEXW      = PROCEDURE(HWND,
                                     VAR ARRAY OF UCHAR,
                                     HANDLE,
                                     ULONG_PTR) : BOOL [EXPORT];

    EDITWORDBREAKPROCA   = PROCEDURE(VAR ARRAY OF ACHAR,
                                     INTEGER,
                                     INTEGER,
                                     INTEGER) : INTEGER [EXPORT];

    EDITWORDBREAKPROCW   = PROCEDURE(VAR ARRAY OF UCHAR,
                                     INTEGER,
                                     INTEGER,
                                     INTEGER) : INTEGER [EXPORT];
    %IF UNICODE %THEN
    EDITWORDBREAKPROC    = EDITWORDBREAKPROCW;
    %ELSE
    EDITWORDBREAKPROC    = EDITWORDBREAKPROCA;
    %END

    NAMEENUMPROCA        = PROCEDURE(ARRAY OF ACHAR, LPARAM) : BOOL [EXPORT];
    WINSTAENUMPROCA      = NAMEENUMPROCA;
    DESKTOPENUMPROCA     = NAMEENUMPROCA;

    NAMEENUMPROCW        = PROCEDURE(ARRAY OF UCHAR, LPARAM) : BOOL [EXPORT];
    WINSTAENUMPROCW      = NAMEENUMPROCW;
    DESKTOPENUMPROCW     = NAMEENUMPROCW;
%IF UNICODE %THEN
    NAMEENUMPROC         = NAMEENUMPROCW;
    WINSTAENUMPROC       = WINSTAENUMPROCW;
    DESKTOPENUMPROC      = DESKTOPENUMPROCW;
%ELSE
    NAMEENUMPROC         = NAMEENUMPROCA;
    WINSTAENUMPROC       = WINSTAENUMPROCA;
    DESKTOPENUMPROC      = DESKTOPENUMPROCA;
%END

    DRAWSTATEPROC        = PROCEDURE(HDC,
                                     LPARAM,
                                     WPARAM,
                                     WINT,
                                     WINT) : BOOL [EXPORT];(*95*)

    %IF UNICODE %THEN
    PROPENUMPROC         = PROPENUMPROCW;
    PROPENUMPROCEX       = PROPENUMPROCEXW;
    %ELSE
    PROPENUMPROC         = PROPENUMPROCA;
    PROPENUMPROCEX       = PROPENUMPROCEXA;
    %END

PROCEDURE MAKEINTRESOURCEA(i : INTEGER) : LPSTR; MACRO;
BEGIN
    RETURN CAST(LPSTR, MAKEADR(i));
END MAKEINTRESOURCEA;

PROCEDURE MAKEINTRESOURCEW(i : INTEGER) : LPWSTR; MACRO;
BEGIN
    RETURN CAST(LPWSTR, MAKEADR(i));
END MAKEINTRESOURCEW;

PROCEDURE MAKEINTRESOURCE(i : INTEGER) : LPTSTR; MACRO;
BEGIN
    RETURN CAST(LPTSTR, MAKEADR(i));
END MAKEINTRESOURCE;

CONST
    RT_CURSOR           = CAST(LPTSTR,1);
    RT_BITMAP           = CAST(LPTSTR,2);
    RT_ICON             = CAST(LPTSTR,3);
    RT_MENU             = CAST(LPTSTR,4);
    RT_DIALOG           = CAST(LPTSTR,5);
    RT_STRING           = CAST(LPTSTR,6);
    RT_FONTDIR          = CAST(LPTSTR,7);
    RT_FONT             = CAST(LPTSTR,8);
    RT_ACCELERATOR      = CAST(LPTSTR,9);
    RT_RCDATA           = CAST(LPTSTR,10);
    RT_MESSAGETABLE     = CAST(LPTSTR,11);

    DIFFERENCE          = 11;
    RT_GROUP_CURSOR     = CAST(LPTSTR, 1 + DIFFERENCE);
    RT_GROUP_ICON       = CAST(LPTSTR, 3 + DIFFERENCE);

    RT_VERSION          = CAST(LPTSTR,16);
    RT_DLGINCLUDE       = CAST(LPTSTR,17);
    RT_PLUGPLAY         = CAST(LPTSTR,19);
    RT_VXD              = CAST(LPTSTR,20);
    RT_ANICURSOR    = CAST(LPTSTR, 21);
    RT_ANIICON      = CAST(LPTSTR, 22);
    RT_HTML         = CAST(LPTSTR, 23);

    RT_CURSORW          = CAST(LPWSTR,1);
    RT_BITMAPW          = CAST(LPWSTR,2);
    RT_ICONW            = CAST(LPWSTR,3);
    RT_MENUW            = CAST(LPWSTR,4);
    RT_DIALOGW          = CAST(LPWSTR,5);
    RT_STRINGW          = CAST(LPWSTR,6);
    RT_FONTDIRW         = CAST(LPWSTR,7);
    RT_FONTW            = CAST(LPWSTR,8);
    RT_ACCELERATORW     = CAST(LPWSTR,9);
    RT_RCDATAW          = CAST(LPWSTR,10);
    RT_MESSAGETABLEW    = CAST(LPWSTR,11);

    RT_GROUP_CURSORW    = CAST(LPWSTR, 1 + DIFFERENCE);
    RT_GROUP_ICONW      = CAST(LPWSTR, 3 + DIFFERENCE);

    RT_VERSIONW         = CAST(LPWSTR,16);
    RT_DLGINCLUDEW      = CAST(LPWSTR,17);
    RT_PLUGPLAYW        = CAST(LPWSTR,19);
    RT_VXDW             = CAST(LPWSTR,20);
    RT_ANICURSORW   = CAST(LPWSTR, 21);
    RT_ANIICONW     = CAST(LPWSTR, 22);
    RT_HTMLW        = CAST(LPWSTR, 23);


PROCEDURE wvsprintfA(VAR a : ARRAY OF ACHAR;
                     b : ARRAY OF ACHAR;
                     c : LPVOID) : INTEGER;

PROCEDURE wvsprintfW(VAR a : ARRAY OF UCHAR;
                     b : ARRAY OF UCHAR;
                     c : LPVOID) : INTEGER;

%IF UNICODE %THEN
PROCEDURE wvsprintf = wvsprintfW;
%ELSE
PROCEDURE wvsprintf = wvsprintfA;
%END

PROCEDURE wsprintfA(VAR a : ARRAY OF ACHAR;
                    b : ARRAY OF ACHAR) : INTEGER [VARIABLE, msCdecl];

PROCEDURE wsprintfW(VAR a : ARRAY OF UCHAR;
                    b : ARRAY OF UCHAR) : INTEGER [VARIABLE, msCdecl];

%IF UNICODE %THEN
PROCEDURE wsprintf = wsprintfW;
%ELSE
PROCEDURE wsprintf = wsprintfA;
%END

CONST
    SB_HORZ              = 0;
    SB_VERT              = 1;
    SB_CTL               = 2;
    SB_BOTH              = 3;
    SB_LINEUP            = 0;
    SB_LINELEFT          = 0;
    SB_LINEDOWN          = 1;
    SB_LINERIGHT         = 1;
    SB_PAGEUP            = 2;
    SB_PAGELEFT          = 2;
    SB_PAGEDOWN          = 3;
    SB_PAGERIGHT         = 3;
    SB_THUMBPOSITION     = 4;
    SB_THUMBTRACK        = 5;
    SB_TOP               = 6;
    SB_LEFT              = 6;
    SB_BOTTOM            = 7;
    SB_RIGHT             = 7;
    SB_ENDSCROLL         = 8;

    SW_HIDE              = 0;
    SW_SHOWNORMAL        = 1;
    SW_NORMAL            = 1;
    SW_SHOWMINIMIZED     = 2;
    SW_SHOWMAXIMIZED     = 3;
    SW_MAXIMIZE          = 3;
    SW_SHOWNOACTIVATE    = 4;
    SW_SHOW              = 5;
    SW_MINIMIZE          = 6;
    SW_SHOWMINNOACTIVE   = 7;
    SW_SHOWNA            = 8;
    SW_RESTORE           = 9;
    SW_SHOWDEFAULT       = 10;
    SW_FORCEMINIMIZE     = 11;
    SW_MAX               = 11;

    HIDE_WINDOW          = 0;

    SHOW_OPENWINDOW      = 1;
    SHOW_ICONWINDOW      = 2;
    SHOW_FULLSCREEN      = 3;
    SHOW_OPENNOACTIVATE  = 4;

    SW_PARENTCLOSING     = 1;
    SW_OTHERZOOM         = 2;
    SW_PARENTOPENING     = 3;
    SW_OTHERUNZOOM       = 4;

(*
 * AnimateWindow() Commands
 *)
    AW_HOR_POSITIVE             = 00000001h;
    AW_HOR_NEGATIVE             = 00000002h;
    AW_VER_POSITIVE             = 00000004h;
    AW_VER_NEGATIVE             = 00000008h;
    AW_CENTER                   = 00000010h;
    AW_HIDE                     = 00010000h;
    AW_ACTIVATE                 = 00020000h;
    AW_SLIDE                    = 00040000h;
    AW_BLEND                    = 00080000h;

    KF_EXTENDED          = 00100h;
    KF_DLGMODE           = 00800h;
    KF_MENUMODE          = 01000h;
    KF_ALTDOWN           = 02000h;
    KF_REPEAT            = 04000h;
    KF_UP                = 08000h;

    VK_LBUTTON           = 001h;
    VK_RBUTTON           = 002h;
    VK_CANCEL            = 003h;
    VK_MBUTTON           = 004h;
    VK_BACK              = 008h;
    VK_TAB               = 009h;
    VK_CLEAR             = 00Ch;
    VK_RETURN            = 00Dh;
    VK_SHIFT             = 010h;
    VK_CONTROL           = 011h;
    VK_MENU              = 012h;
    VK_PAUSE             = 013h;
    VK_CAPITAL           = 014h;
    VK_KANA           = 15h;
    VK_HANGEUL        = 15h;  (* old name - should be here for compatibility *)
    VK_HANGUL         = 15h;
    VK_JUNJA          = 17h;
    VK_FINAL          = 18h;
    VK_HANJA          = 19h;
    VK_KANJI          = 19h;
    VK_ESCAPE            = 01Bh;
    VK_CONVERT        = 1Ch;
    VK_NONCONVERT     = 1Dh;
    VK_ACCEPT         = 1Eh;
    VK_MODECHANGE     = 1Fh;
    VK_SPACE             = 020h;
    VK_PRIOR             = 021h;
    VK_NEXT              = 022h;
    VK_END               = 023h;
    VK_HOME              = 024h;
    VK_LEFT              = 025h;
    VK_UP                = 026h;
    VK_RIGHT             = 027h;
    VK_DOWN              = 028h;
    VK_SELECT            = 029h;
    VK_PRINT             = 02Ah;
    VK_EXECUTE           = 02Bh;
    VK_SNAPSHOT          = 02Ch;
    VK_INSERT            = 02Dh;
    VK_DELETE            = 02Eh;
    VK_HELP              = 02Fh;

    VK_LWIN              = 05Bh;
    VK_RWIN              = 05Ch;
    VK_APPS              = 05Dh;

    VK_NUMPAD0           = 060h;
    VK_NUMPAD1           = 061h;
    VK_NUMPAD2           = 062h;
    VK_NUMPAD3           = 063h;
    VK_NUMPAD4           = 064h;
    VK_NUMPAD5           = 065h;
    VK_NUMPAD6           = 066h;
    VK_NUMPAD7           = 067h;
    VK_NUMPAD8           = 068h;
    VK_NUMPAD9           = 069h;
    VK_MULTIPLY          = 06Ah;
    VK_ADD               = 06Bh;
    VK_SEPARATOR         = 06Ch;
    VK_SUBTRACT          = 06Dh;
    VK_DECIMAL           = 06Eh;
    VK_DIVIDE            = 06Fh;
    VK_F1                = 070h;
    VK_F2                = 071h;
    VK_F3                = 072h;
    VK_F4                = 073h;
    VK_F5                = 074h;
    VK_F6                = 075h;
    VK_F7                = 076h;
    VK_F8                = 077h;
    VK_F9                = 078h;
    VK_F10               = 079h;
    VK_F11               = 07Ah;
    VK_F12               = 07Bh;
    VK_F13               = 07Ch;
    VK_F14               = 07Dh;
    VK_F15               = 07Eh;
    VK_F16               = 07Fh;
    VK_F17               = 080h;
    VK_F18               = 081h;
    VK_F19               = 082h;
    VK_F20               = 083h;
    VK_F21               = 084h;
    VK_F22               = 085h;
    VK_F23               = 086h;
    VK_F24               = 087h;
    VK_NUMLOCK           = 090h;
    VK_SCROLL            = 091h;
    VK_LSHIFT            = 0A0h;
    VK_RSHIFT            = 0A1h;
    VK_LCONTROL          = 0A2h;
    VK_RCONTROL          = 0A3h;
    VK_LMENU             = 0A4h;
    VK_RMENU             = 0A5h;

(* if WIN32_WINNT >= 0x0500)*)
    VK_BROWSER_BACK        = 0A6h;
    VK_BROWSER_FORWARD     = 0A7h;
    VK_BROWSER_REFRESH     = 0A8h;
    VK_BROWSER_STOP        = 0A9h;
    VK_BROWSER_SEARCH      = 0AAh;
    VK_BROWSER_FAVORITES   = 0ABh;
    VK_BROWSER_HOME        = 0ACh;

    VK_VOLUME_MUTE         = 0ADh;
    VK_VOLUME_DOWN         = 0AEh;
    VK_VOLUME_UP           = 0AFh;
    VK_MEDIA_NEXT_TRACK    = 0B0h;
    VK_MEDIA_PREV_TRACK    = 0B1h;
    VK_MEDIA_STOP          = 0B2h;
    VK_MEDIA_PLAY_PAUSE    = 0B3h;
    VK_LAUNCH_MAIL         = 0B4h;
    VK_LAUNCH_MEDIA_SELECT = 0B5h;
    VK_LAUNCH_APP1         = 0B6h;
    VK_LAUNCH_APP2         = 0B7h;

(* end _WIN32_WINNT >= 0x0500 *)

    VK_PROCESSKEY        = 0E5h;(*95*)

    VK_ATTN              = 0F6h;
    VK_CRSEL             = 0F7h;
    VK_EXSEL             = 0F8h;
    VK_EREOF             = 0F9h;
    VK_PLAY              = 0FAh;
    VK_ZOOM              = 0FBh;
    VK_NONAME            = 0FCh;
    VK_PA1               = 0FDh;
    VK_OEM_CLEAR         = 0FEh;

    WH_MIN               = ( - 1 ) ;
    WH_MSGFILTER         = ( - 1 ) ;
    WH_JOURNALRECORD     = 0;
    WH_JOURNALPLAYBACK   = 1;
    WH_KEYBOARD          = 2;
    WH_GETMESSAGE        = 3;
    WH_CALLWNDPROC       = 4;
    WH_CBT               = 5;
    WH_SYSMSGFILTER      = 6;
    WH_MOUSE             = 7;
    WH_HARDWARE          = 8;
    WH_DEBUG             = 9;
    WH_SHELL             = 10;
    WH_FOREGROUNDIDLE    = 11;


    WH_CALLWNDPROCRET    = 12;
    WH_KEYBOARD_LL     =13;(*NT only*)
    WH_MOUSE_LL        =14;(*NT only*)
    WH_MAX               = 14;

    WH_MINHOOK           = WH_MIN;
    WH_MAXHOOK           = WH_MAX;


    WM_MOUSEHOVER        = 02A1H;
    WM_MOUSELEAVE        = 02A3H;

    ENDSESSION_CLOSEAPP  = 000000001h;

    WM_APPCOMMAND        = 00319h;
    WM_THEMECHANGED      = 0031Ah;

    GWLP_USERDATA        = - 21;
    GWLP_WNDPROC         = - 4;

    WS_EX_NOINHERITLAYOUT   = 00100000h;
    WS_EX_LAYOUTRTL         = 00400000h;


    HC_ACTION            = 0;
    HC_GETNEXT           = 1;
    HC_SKIP              = 2;
    HC_NOREMOVE          = 3;
    HC_NOREM             = HC_NOREMOVE;(*95*)
    HC_SYSMODALON        = 4;
    HC_SYSMODALOFF       = 5;

    HCBT_MOVESIZE        = 0;
    HCBT_MINMAX          = 1;
    HCBT_QS              = 2;
    HCBT_CREATEWND       = 3;
    HCBT_DESTROYWND      = 4;
    HCBT_ACTIVATE        = 5;
    HCBT_CLICKSKIPPED    = 6;
    HCBT_KEYSKIPPED      = 7;
    HCBT_SYSCOMMAND      = 8;
    HCBT_SETFOCUS        = 9;

TYPE
    CREATESTRUCTA        = RECORD
        lpCreateParams       : LPVOID;
        hInstance            : HINSTANCE;
        hMenu                : HMENU;
        hwndParent           : HWND;
        cy                   : INTEGER;
        cx                   : INTEGER;
        y                    : INTEGER;
        x                    : INTEGER;
        style                : LONG;
        lpszName             : LPCSTR;
        lpszClass            : LPCSTR;
        dwExStyle            : DWORD;
    END;
    LPCREATESTRUCTA      = POINTER TO CREATESTRUCTA;

    CREATESTRUCTW        = RECORD
        lpCreateParams       : LPVOID;
        hInstance            : HINSTANCE;
        hMenu                : HMENU;
        hwndParent           : HWND;
        cy                   : INTEGER;
        cx                   : INTEGER;
        y                    : INTEGER;
        x                    : INTEGER;
        style                : LONG;
        lpszName             : LPCWSTR;
        lpszClass            : LPCWSTR;
        dwExStyle            : DWORD;
    END;
    LPCREATESTRUCTW      = POINTER TO CREATESTRUCTW;

    %IF UNICODE %THEN
    CREATESTRUCT = CREATESTRUCTW;
    LPCREATESTRUCT = LPCREATESTRUCTW;
    %ELSE
    CREATESTRUCT = CREATESTRUCTA;
    LPCREATESTRUCT = LPCREATESTRUCTA;
    %END

    CBT_CREATEWNDA = RECORD
          lpcs           : POINTER TO CREATESTRUCTA;
          hwndInsertAfter: HWND;
    END;
    LPCBT_CREATEWNDA     = POINTER TO CBT_CREATEWNDA;

    CBT_CREATEWNDW = RECORD
          lpcs           : POINTER TO CREATESTRUCTW;
          hwndInsertAfter: HWND;
    END;
    LPCBT_CREATEWNDW     = POINTER TO CBT_CREATEWNDW;

    %IF UNICODE %THEN
    CBT_CREATEWND        = CBT_CREATEWNDW;
    LPCBT_CREATEWND      = LPCBT_CREATEWNDW;
    %ELSE
    CBT_CREATEWND        = CBT_CREATEWNDA;
    LPCBT_CREATEWND      = LPCBT_CREATEWNDA;
    %END

    CBTACTIVATESTRUCT = RECORD
          fMouse         : BOOL;
          hWndActive     : HWND;
    END;
    LPCBTACTIVATESTRUCT  = POINTER TO CBTACTIVATESTRUCT;

CONST
    MSGF_DIALOGBOX       = 0;
    MSGF_MESSAGEBOX      = 1;
    MSGF_MENU            = 2;
    MSGF_MOVE            = 3;
    MSGF_SIZE            = 4;
    MSGF_SCROLLBAR       = 5;
    MSGF_NEXTWINDOW      = 6;
    MSGF_MAINLOOP        = 8;
    MSGF_MAX             = 8;
    MSGF_USER            = 4096;

    HSHELL_WINDOWCREATED        = 1;
    HSHELL_WINDOWDESTROYED      = 2;
    HSHELL_ACTIVATESHELLWINDOW  = 3;

    HSHELL_WINDOWACTIVATED      = 4;
    HSHELL_GETMINRECT           = 5;
    HSHELL_REDRAW               = 6;
    HSHELL_TASKMAN              = 7;
    HSHELL_LANGUAGE             = 8;

    HSHELL_ACCESSIBILITYSTATE   = 11;(*NT only*)
       ACCESS_STICKYKEYS            =00001h;(*NT only*)
       ACCESS_FILTERKEYS            =00002h;(*NT only*)
       ACCESS_MOUSEKEYS             =00003h;(*NT only*)


TYPE
    EVENTMSG = RECORD
          message        : UINT;
          paramL         : UINT;
          paramH         : UINT;
          time           : DWORD;
          hwnd           : HWND;
    END;
    PEVENTMSGMSG         = POINTER TO EVENTMSG;
    LPEVENTMSGMSG        = PEVENTMSGMSG;

    PEVENTMSG            = POINTER TO EVENTMSG;
    LPEVENTMSG           = PEVENTMSG;

    CWPSTRUCT = RECORD
          lParam         : LPARAM;
          wParam         : WPARAM;
          message        : DWORD;
          hwnd           : HWND;
    END;
    PCWPSTRUCT           = POINTER TO CWPSTRUCT;
    LPCWPSTRUCT          = PCWPSTRUCT;

    CWPRETSTRUCT = RECORD
        lResult         : LRESULT;
        lParam          : LPARAM;
        wParam          : WPARAM;
        message         : UINT;
        hwnd            : HWND;
    END;
    PCWPRETSTRUCT  = POINTER TO CWPRETSTRUCT;
    LPCWPRETSTRUCT = PCWPRETSTRUCT;

(*
 * Low level hook flags
 *)
CONST
    (*NT only*)
    LLKHF_EXTENDED       = 00000001h;
    LLKHF_INJECTED       = 00000010h;
    LLKHF_ALTDOWN        = 00000020h;
    LLKHF_UP             = 00000080h;

    LLMHF_INJECTED       = 00000001h;

TYPE
(*
 * Structure used by WH_KEYBOARD_LL
 *)
     (*NT only*)
    KBDLLHOOKSTRUCT = RECORD
    vkCode              : DWORD;
    scanCode            : DWORD;
    flags               : DWORD;
    time                : DWORD;
    dwExtraInfo         : ULONG_PTR;
    END;
    PKBDLLHOOKSTRUCT = POINTER TO KBDLLHOOKSTRUCT;
    LPKBDLLHOOKSTRUCT = PKBDLLHOOKSTRUCT;

(*
 * Structure used by WH_MOUSE_LL
 *)
     (*NT only*)
    MSLLHOOKSTRUCT = RECORD
    pt          : POINT;
    mouseData   : DWORD;
    flags       : DWORD;
    time        : DWORD;
    dwExtraInfo : ULONG_PTR;
    END;
    PMSLLHOOKSTRUCT = POINTER TO MSLLHOOKSTRUCT;
    LPMSLLHOOKSTRUCT = PMSLLHOOKSTRUCT;

    DEBUGHOOKINFO = RECORD
          idThread              : DWORD;
          idThreadInstaller     : DWORD;
          lParam                : LPARAM;
          wParam                : WPARAM;
          code                  : INTEGER;
    END;
    PDEBUGHOOKINFO       = POINTER TO DEBUGHOOKINFO;
    LPDEBUGHOOKINFO      = PDEBUGHOOKINFO;

    MOUSEHOOKSTRUCT = RECORD
          pt             : POINT;
          hwnd           : HWND;
          wHitTestCode   : UINT;
          dwExtraInfo    : ULONG_PTR;
    END;
    PMOUSEHOOKSTRUCT     = POINTER TO MOUSEHOOKSTRUCT;
    LPMOUSEHOOKSTRUCT    = PMOUSEHOOKSTRUCT;

    HARDWAREHOOKSTRUCT = RECORD
        hwnd    : HWND;
        message : UINT;
        wParam  : WPARAM;
        lParam  : LPARAM;
    END;
    PHARDWAREHOOKSTRUCT  = POINTER TO HARDWAREHOOKSTRUCT;
    LPHARDWAREHOOKSTRUCT = PHARDWAREHOOKSTRUCT;

CONST
    HKL_PREV             = 0;
    HKL_NEXT             = 1;
    KLF_ACTIVATE         = 000000001h;
    KLF_SUBSTITUTE_OK    = 000000002h;
    KLF_UNLOADPREVIOUS   = 000000004h;
    KLF_REORDER          = 000000008h;
    KLF_REPLACELANG      = 000000010h;
    KLF_NOTELLSHELL      = 000000080h;
    KLF_SETFORPROCESS    = 000000100h;
    KL_NAMELENGTH        = 9;

PROCEDURE LoadKeyboardLayoutA(pwszKLID : ARRAY OF ACHAR;
                              Flags : UINT) : HKL;

PROCEDURE LoadKeyboardLayoutW(pwszKLID : ARRAY OF UCHAR;
                              Flags : UINT) : HKL;

%IF UNICODE %THEN
PROCEDURE LoadKeyboardLayout = LoadKeyboardLayoutW;
%ELSE
PROCEDURE LoadKeyboardLayout = LoadKeyboardLayoutA;
%END

PROCEDURE ActivateKeyboardLayout(hkl : HKL;
                                 Flags : UINT) : BOOL;

PROCEDURE ToUnicodeEx(  wVirtKey : UINT;
                        wScanCode : UINT;
                        lpKeyState : PBYTE;
                        VAR pwszBuff : ARRAY OF UCHAR;
                        cchBuff : WINT;
                        wFlags : UINT;
                        dwhkl : HKL) : WINT;

PROCEDURE UnloadKeyboardLayout(hkl : HKL) : BOOL;

PROCEDURE GetKeyboardLayoutNameA(VAR pwszKLID : ARRAY OF ACHAR) : BOOL;

PROCEDURE GetKeyboardLayoutNameW(VAR pwszKLID : ARRAY OF UCHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE GetKeyboardLayoutName = GetKeyboardLayoutNameW;
%ELSE
PROCEDURE GetKeyboardLayoutName = GetKeyboardLayoutNameA;
%END



PROCEDURE GetKeyboardLayoutList(nBuff : WINT; VAR lpList : HKL) : WINT;

PROCEDURE GetKeyboardLayout(dwLayout : DWORD) : HKL;

TYPE
    MOUSEMOVEPOINT = RECORD
    x           : WINT;
    y           : WINT;
    time        : DWORD;
    dwExtraInfo : ULONG_PTR;
    END;
    PMOUSEMOVEPOINT  = POINTER TO MOUSEMOVEPOINT;
    LPMOUSEMOVEPOINT = PMOUSEMOVEPOINT;

(*
 * Values for resolution parameter of GetMouseMovePoints
 *)
CONST
    GMMP_USE_DISPLAY_POINTS   =1;
    GMMP_USE_DRIVER_POINTS    =2;

PROCEDURE GetMouseMovePoints(cbSize : UINT;
                             VAR lpp : MOUSEMOVEPOINT;
                             VAR lpptBuf : ARRAY OF MOUSEMOVEPOINT;
                             nBufPoints : WINT;
                             resolution : DWORD) : WINT;

CONST
    DESKTOP_READOBJECTS         = 00001h;
    DESKTOP_CREATEWINDOW        = 00002h;
    DESKTOP_CREATEMENU          = 00004h;
    DESKTOP_HOOKCONTROL         = 00008h;
    DESKTOP_JOURNALRECORD       = 00010h;
    DESKTOP_JOURNALPLAYBACK     = 00020h;
    DESKTOP_ENUMERATE           = 00040h;
    DESKTOP_WRITEOBJECTS        = 00080h;
    DESKTOP_SWITCHDESKTOP       = 00100h;

    DF_ALLOWOTHERACCOUNTHOOK    = 1;

PROCEDURE CreateDesktopA(lpszDesktop : ARRAY OF ACHAR;
                         lpszDevice : ARRAY OF ACHAR;
                         pDevmode : DEVMODEA;
                         dwFlags : DWORD;
                         dwDesiredAccess : DWORD;
                         lpsa : LPSECURITY_ATTRIBUTES) : HDESK;

PROCEDURE CreateDesktopW(lpszDesktop : ARRAY OF UCHAR;
                         lpszDevice : ARRAY OF UCHAR;
                         pDevmode : DEVMODEW;
                         dwFlags : DWORD;
                         dwDesiredAccess : DWORD;
                         lpsa : LPSECURITY_ATTRIBUTES) : HDESK;
%IF UNICODE %THEN
PROCEDURE CreateDesktop = CreateDesktopW;
%ELSE
PROCEDURE CreateDesktop = CreateDesktopA;
%END

PROCEDURE OpenDesktopA(lpszDesktop : ARRAY OF ACHAR;
                       dwFlags : DWORD;
                       fInherit : BOOL;
                       dwDesiredAccess : DWORD) : HDESK;

PROCEDURE OpenDesktopW(lpszDesktop : ARRAY OF UCHAR;
                       dwFlags : DWORD;
                       fInherit : BOOL;
                       dwDesiredAccess : DWORD) : HDESK;

%IF UNICODE %THEN
PROCEDURE OpenDesktop = OpenDesktopW;
%ELSE
PROCEDURE OpenDesktop = OpenDesktopA;
%END

PROCEDURE OpenInputDesktop(dwFlags : DWORD;
                           fInherit : BOOL;
                           dwDesiredAccess : DWORD) : HDESK;

PROCEDURE EnumDesktopsA(hwinsta : HWINSTA;
                        lpEnumFunc : DESKTOPENUMPROCA;
                        lParam : LPARAM) : BOOL;

PROCEDURE EnumDesktopsW(hwinsta : HWINSTA;
                        lpEnumFunc : DESKTOPENUMPROCW;
                        lParam : LPARAM) : BOOL;

%IF UNICODE %THEN
PROCEDURE EnumDesktops = EnumDesktopsW;
%ELSE
PROCEDURE EnumDesktops = EnumDesktopsA;
%END

PROCEDURE EnumDesktopWindows(hDesktop : HDESK;
                             lpfn : WNDENUMPROC;
                             lParam : LPARAM) : BOOL;

PROCEDURE SwitchDesktop(hDesktop : HDESK) : BOOL;

PROCEDURE SetThreadDesktop(hDesktop : HDESK) : BOOL;

PROCEDURE CloseDesktop(hDesktop : HDESK) : BOOL;

PROCEDURE GetThreadDesktop(a : DWORD) : HDESK;

CONST
    WINSTA_ENUMDESKTOPS  = 00001h;
    WINSTA_READATTRIBUTES= 00002h;
    WINSTA_ACCESSCLIPBOARD= 00004h;
    WINSTA_CREATEDESKTOP = 00008h;
    WINSTA_WRITEATTRIBUTES= 00010h;
    WINSTA_ACCESSGLOBALATOMS= 00020h;
    WINSTA_EXITWINDOWS   = 00040h;
    WINSTA_ENUMERATE     = 00100h;
    WINSTA_READSCREEN    = 00200h;
    WSF_VISIBLE          = 1;

PROCEDURE CreateWindowStationA(lpwinsta : ARRAY OF ACHAR;
                               dwReserved : DWORD;
                               dwDesiredAccess : DWORD;
                               lpsa : LPSECURITY_ATTRIBUTES) : HWINSTA;

PROCEDURE CreateWindowStationW(lpwinsta : ARRAY OF UCHAR;
                               dwReserved : DWORD;
                               dwDesiredAccess : DWORD;
                               lpsa : LPSECURITY_ATTRIBUTES) : HWINSTA;

%IF UNICODE %THEN
PROCEDURE CreateWindowStation = CreateWindowStationW;
%ELSE
PROCEDURE CreateWindowStation = CreateWindowStationA;
%END

PROCEDURE OpenWindowStationA(lpszWinSta : ARRAY OF ACHAR;
                             fInherit : BOOL;
                             dwDesiredAccess : DWORD) : HWINSTA;

PROCEDURE OpenWindowStationW(lpszWinSta : ARRAY OF UCHAR;
                             fInherit : BOOL;
                             dwDesiredAccess : DWORD) : HWINSTA;

%IF UNICODE %THEN
PROCEDURE OpenWindowStation = OpenWindowStationW;
%ELSE
PROCEDURE OpenWindowStation = OpenWindowStationA;
%END
PROCEDURE EnumWindowStationsW(lpEnumFunc : WINSTAENUMPROCW;
                              lParam : LPARAM) : BOOL;

PROCEDURE EnumWindowStationsA(lpEnumFunc : WINSTAENUMPROCA;
                              lParam : LPARAM) : BOOL;
%IF UNICODE %THEN
PROCEDURE EnumWindowStations = EnumWindowStationsW;
%ELSE
PROCEDURE EnumWindowStations = EnumWindowStationsA;
%END

PROCEDURE CloseWindowStation(hWinSta : HWINSTA) : BOOL;

PROCEDURE SetProcessWindowStation(hWinSta : HWINSTA) : BOOL;

PROCEDURE GetProcessWindowStation() : HWINSTA;

PROCEDURE SetUserObjectSecurity(hObj : HANDLE;
                                pSIRequested : PSECURITY_INFORMATION;
                                pSID : PSECURITY_DESCRIPTOR) : BOOL;

PROCEDURE GetUserObjectSecurity(hObj : HANDLE;
                                pSIRequested : PSECURITY_INFORMATION;
                                pSID : PSECURITY_DESCRIPTOR;
                                nLength : DWORD;
                                VAR lpnLengthNeeded : DWORD) : BOOL;

CONST
    UOI_FLAGS            = 1;
    UOI_NAME             = 2;
    UOI_TYPE             = 3;
    UOI_USER_SID    = 4;

TYPE
    USEROBJECTFLAGS = RECORD
        fInherit        : BOOL;
        fReserved       : BOOL;
        dwFlags         : DWORD;
    END;
    PUSEROBJECTFLAGS    = POINTER TO USEROBJECTFLAGS;

PROCEDURE GetUserObjectInformationA(hObj : HANDLE;
                                    nIndex : WINT;
                                    pvInfo : PVOID;
                                    nLength : DWORD;
                                    VAR lpnLengthNeeded : DWORD) : BOOL;

PROCEDURE GetUserObjectInformationW(hObj : HANDLE;
                                    nIndex : WINT;
                                    pvInfo : PVOID;
                                    nLength : DWORD;
                                    VAR lpnLengthNeeded : DWORD) : BOOL;
%IF UNICODE %THEN
PROCEDURE GetUserObjectInformation = GetUserObjectInformationW;
%ELSE
PROCEDURE GetUserObjectInformation = GetUserObjectInformationA;
%END

PROCEDURE SetUserObjectInformationA(hObj : HANDLE;
                                    nIndex : WINT;
                                    pvInfo : PVOID;
                                    nLength : DWORD) : BOOL;

PROCEDURE SetUserObjectInformationW(hObj : HANDLE;
                                    nIndex : WINT;
                                    pvInfo : PVOID;
                                    nLength : DWORD) : BOOL;
%IF UNICODE %THEN
PROCEDURE SetUserObjectInformation = SetUserObjectInformationW;
%ELSE
PROCEDURE SetUserObjectInformation = SetUserObjectInformationA;
%END

TYPE
    WNDCLASSA = RECORD
          style          : UINT;
          lpfnWndProc    : WNDPROC;
          cbClsExtra     : INTEGER;
          cbWndExtra     : INTEGER;
          hInstance      : HINSTANCE;
          hIcon          : HICON;
          hCursor        : HCURSOR;
          hbrBackground  : HBRUSH;
          lpszMenuName   : LPCSTR;
          lpszClassName  : LPCSTR;
    END;
    PWNDCLASSA           = POINTER TO WNDCLASSA;
    LPWNDCLASSA          = PWNDCLASSA;

    WNDCLASSW = RECORD
          style          : UINT;
          lpfnWndProc    : WNDPROC;
          cbClsExtra     : INTEGER;
          cbWndExtra     : INTEGER;
          hInstance      : HINSTANCE;
          hIcon          : HICON;
          hCursor        : HCURSOR;
          hbrBackground  : HBRUSH;
          lpszMenuName   : LPCWSTR;
          lpszClassName  : LPCWSTR;
    END;
    PWNDCLASSW           = POINTER TO WNDCLASSW;
    LPWNDCLASSW          = PWNDCLASSW;

    %IF UNICODE %THEN
    WNDCLASS             = WNDCLASSW;
    PWNDCLASS            = PWNDCLASSW;
    %ELSE
    WNDCLASS             = WNDCLASSA;
    PWNDCLASS            = PWNDCLASSA;
    %END
    LPWNDCLASS           = PWNDCLASS;

    MSG = RECORD
          hwnd           : HWND;
          message        : UINT;
          wParam         : WPARAM;
          lParam         : LPARAM;
          time           : DWORD;
          pt             : POINT;
    END;
    PMSG                 = POINTER TO MSG;
    LPMSG                = PMSG;


CONST
    GWL_WNDPROC          = - 4;
    GWL_HINSTANCE        = - 6;
    GWL_HWNDPARENT       = - 8;
    GWL_STYLE            = - 16;
    GWL_EXSTYLE          = - 20;
    GWL_USERDATA         = - 21;
    GWL_ID               = - 12;
    GCL_MENUNAME         = - 8;
    GCL_HBRBACKGROUND    = - 10;
    GCL_HCURSOR          = - 12;
    GCL_HICON            = - 14;
    GCL_HMODULE          = - 16;
    GCL_CBWNDEXTRA       = - 18;
    GCL_CBCLSEXTRA       = - 20;
    GCL_WNDPROC          = - 24;
    GCL_STYLE            = - 26;
    GCW_ATOM             = - 32;

    GCL_HICONSM          = - 34;(*95*)

    WM_NULL              = 00000h;
    WM_CREATE            = 00001h;
    WM_DESTROY           = 00002h;
    WM_MOVE              = 00003h;
    WM_SIZE              = 00005h;
    WM_ACTIVATE          = 00006h;
    WA_INACTIVE          = 0;
    WA_ACTIVE            = 1;
    WA_CLICKACTIVE       = 2;
    WM_SETFOCUS          = 00007h;
    WM_KILLFOCUS         = 00008h;
    WM_ENABLE            = 0000Ah;
    WM_SETREDRAW         = 0000Bh;
    WM_SETTEXT           = 0000Ch;
    WM_GETTEXT           = 0000Dh;
    WM_GETTEXTLENGTH     = 0000Eh;
    WM_PAINT             = 0000Fh;
    WM_CLOSE             = 00010h;
    WM_QUERYENDSESSION   = 00011h;
    WM_QUIT              = 00012h;
    WM_QUERYOPEN         = 00013h;
    WM_ERASEBKGND        = 00014h;
    WM_SYSCOLORCHANGE    = 00015h;
    WM_ENDSESSION        = 00016h;
    WM_SHOWWINDOW        = 00018h;
    WM_WININICHANGE      = 0001Ah;

    WM_SETTINGCHANGE     = WM_WININICHANGE;(*95*)

    WM_DEVMODECHANGE     = 0001Bh;
    WM_ACTIVATEAPP       = 0001Ch;
    WM_FONTCHANGE        = 0001Dh;
    WM_TIMECHANGE        = 0001Eh;
    WM_CANCELMODE        = 0001Fh;
    WM_SETCURSOR         = 00020h;
    WM_MOUSEACTIVATE     = 00021h;
    WM_CHILDACTIVATE     = 00022h;
    WM_QUEUESYNC         = 00023h;
    WM_GETMINMAXINFO     = 00024h;

TYPE
    MINMAXINFO = RECORD
          ptReserved     : POINT;
          ptMaxSize      : POINT;
          ptMaxPosition  : POINT;
          ptMinTrackSize : POINT;
          ptMaxTrackSize : POINT;
    END;
    PMINMAXINFO          = POINTER TO MINMAXINFO;
    LPMINMAXINFO         = PMINMAXINFO;

CONST
    WM_PAINTICON         = 00026h;
    WM_ICONERASEBKGND    = 00027h;
    WM_NEXTDLGCTL        = 00028h;
    WM_SPOOLERSTATUS     = 0002Ah;
    WM_DRAWITEM          = 0002Bh;
    WM_MEASUREITEM       = 0002Ch;
    WM_DELETEITEM        = 0002Dh;
    WM_VKEYTOITEM        = 0002Eh;
    WM_CHARTOITEM        = 0002Fh;
    WM_SETFONT           = 00030h;
    WM_GETFONT           = 00031h;
    WM_SETHOTKEY         = 00032h;
    WM_GETHOTKEY         = 00033h;
    WM_QUERYDRAGICON     = 00037h;
    WM_COMPAREITEM       = 00039h;
    WM_GETOBJECT                    = 003Dh;
    WM_COMPACTING        = 00041h;
    WM_OTHERWINDOWCREATED= 00042h;
    WM_OTHERWINDOWDESTROYED= 00043h;
    WM_COMMNOTIFY        = 00044h;
    WM_WINDOWPOSCHANGING = 00046h;
    WM_WINDOWPOSCHANGED  = 00047h;
    WM_POWER             = 00048h;
    PWR_OK               = 1;
    PWR_FAIL             = ( - 1 ) ;
    PWR_SUSPENDREQUEST   = 1;
    PWR_SUSPENDRESUME    = 2;
    PWR_CRITICALRESUME   = 3;
    WM_COPYDATA          = 0004Ah;
    WM_CANCELJOURNAL     = 0004Bh;

TYPE
    COPYDATASTRUCT = RECORD
          dwData         : ULONG_PTR;
          cbData         : DWORD;
          lpData         : PVOID;
    END;
    PCOPYDATASTRUCT      = POINTER TO COPYDATASTRUCT;


CONST

    WM_NOTIFY                       = 004Eh;
    WM_INPUTLANGCHANGEREQUEST       = 0050h;
    WM_INPUTLANGCHANGE              = 0051h;
    WM_TCARD                        = 0052h;
    WM_HELP                         = 0053h;
    WM_USERCHANGED                  = 0054h;
    WM_NOTIFYFORMAT                 = 0055h;

    NFR_ANSI                             = 1;
    NFR_UNICODE                          = 2;
    NF_QUERY                             = 3;
    NF_REQUERY                           = 4;

    WM_CONTEXTMENU                  = 007Bh;
    WM_STYLECHANGING                = 007Ch;
    WM_STYLECHANGED                 = 007Dh;
    WM_DISPLAYCHANGE                = 007Eh;
    WM_GETICON                      = 007Fh;
    WM_SETICON                      = 0080h;


    WM_NCCREATE          = 00081h;
    WM_NCDESTROY         = 00082h;
    WM_NCCALCSIZE        = 00083h;
    WM_NCHITTEST         = 00084h;
    WM_NCPAINT           = 00085h;
    WM_NCACTIVATE        = 00086h;
    WM_GETDLGCODE        = 00087h;
    WM_SYNCPAINT         = 00088h;
    WM_NCMOUSEMOVE       = 000A0h;
    WM_NCLBUTTONDOWN     = 000A1h;
    WM_NCLBUTTONUP       = 000A2h;
    WM_NCLBUTTONDBLCLK   = 000A3h;
    WM_NCRBUTTONDOWN     = 000A4h;
    WM_NCRBUTTONUP       = 000A5h;
    WM_NCRBUTTONDBLCLK   = 000A6h;
    WM_NCMBUTTONDOWN     = 000A7h;
    WM_NCMBUTTONUP       = 000A8h;
    WM_NCMBUTTONDBLCLK   = 000A9h;
    WM_KEYFIRST          = 00100h;
    WM_KEYDOWN           = 00100h;
    WM_KEYUP             = 00101h;
    WM_CHAR              = 00102h;
    WM_DEADCHAR          = 00103h;
    WM_SYSKEYDOWN        = 00104h;
    WM_SYSKEYUP          = 00105h;
    WM_SYSCHAR           = 00106h;
    WM_SYSDEADCHAR       = 00107h;
    WM_KEYLAST           = 00108h;


    WM_IME_STARTCOMPOSITION         = 010Dh;
    WM_IME_ENDCOMPOSITION           = 010Eh;
    WM_IME_COMPOSITION              = 010Fh;
    WM_IME_KEYLAST                  = 010Fh;


    WM_INITDIALOG        = 00110h;
    WM_COMMAND           = 00111h;
    WM_SYSCOMMAND        = 00112h;
    WM_TIMER             = 00113h;
    WM_HSCROLL           = 00114h;
    WM_VSCROLL           = 00115h;
    WM_INITMENU          = 00116h;
    WM_INITMENUPOPUP     = 00117h;
    WM_MENUSELECT        = 0011Fh;
    WM_MENUCHAR          = 00120h;
    WM_ENTERIDLE         = 00121h;
    WM_MENURBUTTONUP     = 00122h;
    WM_MENUDRAG          = 00123h;
    WM_MENUGETOBJECT     = 00124h;
    WM_UNINITMENUPOPUP   = 00125h;
    WM_MENUCOMMAND       = 00126h;
    WM_CTLCOLORMSGBOX    = 00132h;
    WM_CTLCOLOREDIT      = 00133h;
    WM_CTLCOLORLISTBOX   = 00134h;
    WM_CTLCOLORBTN       = 00135h;
    WM_CTLCOLORDLG       = 00136h;
    WM_CTLCOLORSCROLLBAR = 00137h;
    WM_CTLCOLORSTATIC    = 00138h;
    WM_MOUSEFIRST        = 00200h;
    WM_MOUSEMOVE         = 00200h;
    WM_LBUTTONDOWN       = 00201h;
    WM_LBUTTONUP         = 00202h;
    WM_LBUTTONDBLCLK     = 00203h;
    WM_RBUTTONDOWN       = 00204h;
    WM_RBUTTONUP         = 00205h;
    WM_RBUTTONDBLCLK     = 00206h;
    WM_MBUTTONDOWN       = 00207h;
    WM_MBUTTONUP         = 00208h;
    WM_MBUTTONDBLCLK     = 00209h;
    WM_MOUSEWHEEL        = 0020Ah;
    WM_MOUSELAST         = 0020Ah;

    WHEEL_DELTA          = 120;   (* Value for rolling one detent *)
    WHEEL_PAGESCROLL     = MAX(UINT); (* Scroll one page *)

    WM_PARENTNOTIFY      = 00210h;
    MENULOOP_WINDOW      = 0;
    MENULOOP_POPUP       = 1;
    WM_ENTERMENULOOP     = 00211h;
    WM_EXITMENULOOP      = 00212h;


    WM_NEXTMENU          = 00213h;

TYPE
    MDINEXTMENU = RECORD
        hmenuIn         : HMENU;
        hmenuNext       : HMENU;
        hwndNext        : HWND;
    END;
    PMDINEXTMENU        = POINTER TO MDINEXTMENU;
    LPMDINEXTMENU       = PMDINEXTMENU;

CONST
    WM_SIZING                       = 0214h;
    WM_CAPTURECHANGED               = 0215h;
    WM_MOVING                       = 0216h;
    WM_POWERBROADCAST               = 0218h;

    PBT_APMQUERYSUSPEND             = 0000h;
    PBT_APMQUERYSTANDBY             = 0001h;

    PBT_APMQUERYSUSPENDFAILED       = 0002h;
    PBT_APMQUERYSTANDBYFAILED       = 0003h;

    PBT_APMSUSPEND                  = 0004h;
    PBT_APMSTANDBY                  = 0005h;

    PBT_APMRESUMECRITICAL           = 0006h;
    PBT_APMRESUMESUSPEND            = 0007h;
    PBT_APMRESUMESTANDBY            = 0008h;

    PBTF_APMRESUMEFROMFAILURE       = 00000001h;

    PBT_APMBATTERYLOW               = 0009h;
    PBT_APMPOWERSTATUSCHANGE        = 000Ah;

    PBT_APMOEMEVENT                 = 000Bh;
    PBT_APMRESUMEAUTOMATIC          = 0012h;

    WM_DEVICECHANGE                 = 0219h;

    WM_IME_SETCONTEXT               = 0281h;
    WM_IME_NOTIFY                   = 0282h;
    WM_IME_CONTROL                  = 0283h;
    WM_IME_COMPOSITIONFULL          = 0284h;
    WM_IME_SELECT                   = 0285h;
    WM_IME_CHAR                     = 0286h;
    WM_IME_REQUEST                  = 0288h;
    WM_IME_KEYDOWN                  = 0290h;
    WM_IME_KEYUP                    = 0291h;


    WM_MDICREATE         = 00220h;
    WM_MDIDESTROY        = 00221h;
    WM_MDIACTIVATE       = 00222h;
    WM_MDIRESTORE        = 00223h;
    WM_MDINEXT           = 00224h;
    WM_MDIMAXIMIZE       = 00225h;
    WM_MDITILE           = 00226h;
    WM_MDICASCADE        = 00227h;
    WM_MDIICONARRANGE    = 00228h;
    WM_MDIGETACTIVE      = 00229h;
    WM_MDISETMENU        = 00230h;
    WM_ENTERSIZEMOVE     = 00231h;
    WM_EXITSIZEMOVE      = 00232h;
    WM_DROPFILES         = 00233h;
    WM_MDIREFRESHMENU    = 00234h;
    WM_CUT               = 00300h;
    WM_COPY              = 00301h;
    WM_PASTE             = 00302h;
    WM_CLEAR             = 00303h;
    WM_UNDO              = 00304h;
    WM_RENDERFORMAT      = 00305h;
    WM_RENDERALLFORMATS  = 00306h;
    WM_DESTROYCLIPBOARD  = 00307h;
    WM_DRAWCLIPBOARD     = 00308h;
    WM_PAINTCLIPBOARD    = 00309h;
    WM_VSCROLLCLIPBOARD  = 0030Ah;
    WM_SIZECLIPBOARD     = 0030Bh;
    WM_ASKCBFORMATNAME   = 0030Ch;
    WM_CHANGECBCHAIN     = 0030Dh;
    WM_HSCROLLCLIPBOARD  = 0030Eh;
    WM_QUERYNEWPALETTE   = 0030Fh;
    WM_PALETTEISCHANGING = 00310h;
    WM_PALETTECHANGED    = 00311h;
    WM_HOTKEY            = 00312h;

    WM_PRINT             = 00317h;
    WM_PRINTCLIENT       = 00318h;

    WM_HANDHELDFIRST     = 00358h;
    WM_HANDHELDLAST      = 0035Fh;

    WM_AFXFIRST          = 00360h;
    WM_AFXLAST           = 0037Fh;

    WM_PENWINFIRST       = 00380h;
    WM_PENWINLAST        = 0038Fh;

    WM_APP               = 08000h;(*95*)

    WM_USER              = 00400h;
    WM_CONTROL           = WM_USER+1642H; (* for all own controls *)


    WMSZ_LEFT           = 1;
    WMSZ_RIGHT          = 2;
    WMSZ_TOP            = 3;
    WMSZ_TOPLEFT        = 4;
    WMSZ_TOPRIGHT       = 5;
    WMSZ_BOTTOM         = 6;
    WMSZ_BOTTOMLEFT     = 7;
    WMSZ_BOTTOMRIGHT    = 8;


    ST_BEGINSWP          = 0;
    ST_ENDSWP            = 1;
    HTERROR              = -2;
    HTTRANSPARENT        = -1;
    HTNOWHERE            = 0;
    HTCLIENT             = 1;
    HTCAPTION            = 2;
    HTSYSMENU            = 3;
    HTGROWBOX            = 4;
    HTSIZE               = HTGROWBOX;(*95*)
    HTMENU               = 5;
    HTHSCROLL            = 6;
    HTVSCROLL            = 7;
    HTMINBUTTON          = 8;
    HTMAXBUTTON          = 9;
    HTLEFT               = 10;
    HTRIGHT              = 11;
    HTTOP                = 12;
    HTTOPLEFT            = 13;
    HTTOPRIGHT           = 14;
    HTBOTTOM             = 15;
    HTBOTTOMLEFT         = 16;
    HTBOTTOMRIGHT        = 17;
    HTBORDER             = 18;

    HTREDUCE             = HTMINBUTTON;
    HTZOOM               = HTMAXBUTTON;
    HTSIZEFIRST          = HTLEFT;
    HTSIZELAST           = HTBOTTOMRIGHT;
    HTOBJECT             = 19;
    HTCLOSE              = 20;
    HTHELP               = 21;


    SMTO_NORMAL          = 00000h;
    SMTO_BLOCK           = 00001h;
    SMTO_ABORTIFHUNG     = 00002h;
    SMTO_NOTIMEOUTIFNOTHUNG = 00008h;

    MA_ACTIVATE          = 1;
    MA_ACTIVATEANDEAT    = 2;
    MA_NOACTIVATE        = 3;
    MA_NOACTIVATEANDEAT  = 4;

(*
 * WM_SETICON / WM_GETICON Type Codes
 *)
    ICON_SMALL          =0;
    ICON_BIG            =1;

PROCEDURE RegisterWindowMessageA(lpString : ARRAY OF ACHAR) : UINT;

PROCEDURE RegisterWindowMessageW(lpString : ARRAY OF UCHAR) : UINT;

%IF UNICODE %THEN
PROCEDURE RegisterWindowMessage = RegisterWindowMessageW;
%ELSE
PROCEDURE RegisterWindowMessage = RegisterWindowMessageA;
%END

CONST
    SIZE_RESTORED        = 0;
    SIZE_MINIMIZED       = 1;
    SIZE_MAXIMIZED       = 2;
    SIZE_MAXSHOW         = 3;
    SIZE_MAXHIDE         = 4;
    SIZENORMAL           = SIZE_RESTORED;
    SIZEICONIC           = SIZE_MINIMIZED;
    SIZEFULLSCREEN       = SIZE_MAXIMIZED;
    SIZEZOOMSHOW         = SIZE_MAXSHOW;
    SIZEZOOMHIDE         = SIZE_MAXHIDE;


TYPE
    WINDOWPOS = RECORD
          hwnd           : HWND;
          hwndInsertAfter: HWND;
          x              : INTEGER;
          y              : INTEGER;
          cx             : INTEGER;
          cy             : INTEGER;
          flags          : UINT;
    END;
    PWINDOWPOS           = POINTER TO WINDOWPOS;
    LPWINDOWPOS          = PWINDOWPOS;


    NCCALCSIZE_PARAMS = RECORD
          rgrc           : ARRAY [0..3 - 1] OF RECT;
          lppos          : PWINDOWPOS;
    END;
    LPNCCALCSIZE_PARAMS  = POINTER TO NCCALCSIZE_PARAMS;

CONST
    WVR_ALIGNTOP         = 00010h;
    WVR_ALIGNLEFT        = 00020h;
    WVR_ALIGNBOTTOM      = 00040h;
    WVR_ALIGNRIGHT       = 00080h;
    WVR_HREDRAW          = 00100h;
    WVR_VREDRAW          = 00200h;
    WVR_REDRAW           = ( WVR_HREDRAW BOR WVR_VREDRAW ) ;
    WVR_VALIDRECTS       = 00400h;

    MK_LBUTTON           = 00001h;
    MK_RBUTTON           = 00002h;
    MK_SHIFT             = 00004h;
    MK_CONTROL           = 00008h;
    MK_MBUTTON           = 00010h;

    TME_HOVER       =000000001h;
    TME_LEAVE       =000000002h;
    TME_QUERY       =040000000h;
    TME_CANCEL      =080000000h;


    HOVER_DEFAULT   =0FFFFFFFFh;

TYPE
    TRACKMOUSEEVENT = RECORD
    cbSize : DWORD;
    dwFlags : DWORD;
    hwndTrack : HWND;
    dwHoverTime : DWORD;
    END;
    LPTRACKMOUSEEVENT = TRACKMOUSEEVENT;


PROCEDURE TrackMouseEvent(VAR lpEventTrack : TRACKMOUSEEVENT) : BOOL;

CONST
    WS_OVERLAPPED        = 000000000h;
    WS_POPUP             = 080000000h;
    WS_CHILD             = 040000000h;
    WS_MINIMIZE          = 020000000h;
    WS_VISIBLE           = 010000000h;
    WS_DISABLED          = 008000000h;
    WS_CLIPSIBLINGS      = 004000000h;
    WS_CLIPCHILDREN      = 002000000h;
    WS_MAXIMIZE          = 001000000h;
    WS_CAPTION           = 000C00000h;
    WS_BORDER            = 000800000h;
    WS_DLGFRAME          = 000400000h;
    WS_VSCROLL           = 000200000h;
    WS_HSCROLL           = 000100000h;
    WS_SYSMENU           = 000080000h;
    WS_THICKFRAME        = 000040000h;
    WS_GROUP             = 000020000h;
    WS_TABSTOP           = 000010000h;
    WS_MINIMIZEBOX       = 000020000h;
    WS_MAXIMIZEBOX       = 000010000h;
    WS_TILED             = WS_OVERLAPPED;
    WS_ICONIC            = WS_MINIMIZE;
    WS_SIZEBOX           = WS_THICKFRAME;

    WS_OVERLAPPEDWINDOW  =   WS_OVERLAPPED BOR
                             WS_CAPTION BOR
                             WS_SYSMENU BOR
                             WS_THICKFRAME BOR
                             WS_MINIMIZEBOX BOR
                             WS_MAXIMIZEBOX;

    WS_POPUPWINDOW       = WS_POPUP BOR WS_BORDER BOR WS_SYSMENU;

    WS_TILEDWINDOW       = WS_OVERLAPPEDWINDOW;

    WS_CHILDWINDOW       = WS_CHILD;

    WS_EX_DLGMODALFRAME  = 000000001h;
    WS_EX_NOPARENTNOTIFY = 000000004h;
    WS_EX_TOPMOST        = 000000008h;
    WS_EX_ACCEPTFILES    = 000000010h;
    WS_EX_TRANSPARENT    = 000000020h;


    WS_EX_MDICHILD          = 00000040h;
    WS_EX_TOOLWINDOW        = 00000080h;
    WS_EX_WINDOWEDGE        = 00000100h;
    WS_EX_CLIENTEDGE        = 00000200h;
    WS_EX_CONTEXTHELP       = 00000400h;

    WS_EX_RIGHT             = 00001000h;
    WS_EX_LEFT              = 00000000h;
    WS_EX_RTLREADING        = 00002000h;
    WS_EX_LTRREADING        = 00000000h;
    WS_EX_LEFTSCROLLBAR     = 00004000h;
    WS_EX_RIGHTSCROLLBAR    = 00000000h;

    WS_EX_CONTROLPARENT     = 00010000h;
    WS_EX_STATICEDGE        = 00020000h;
    WS_EX_APPWINDOW         = 00040000h;

    WS_EX_OVERLAPPEDWINDOW  = (WS_EX_WINDOWEDGE BOR WS_EX_CLIENTEDGE);
    WS_EX_PALETTEWINDOW     = (WS_EX_WINDOWEDGE BOR
                               WS_EX_TOOLWINDOW BOR
                               WS_EX_TOPMOST);


    CS_VREDRAW           = 00001h;
    CS_HREDRAW           = 00002h;
    CS_KEYCVTWINDOW      = 00004h;
    CS_DBLCLKS           = 00008h;
    CS_OWNDC             = 00020h;
    CS_CLASSDC           = 00040h;
    CS_PARENTDC          = 00080h;
    CS_NOKEYCVT          = 00100h;
    CS_NOCLOSE           = 00200h;
    CS_SAVEBITS          = 00800h;
    CS_BYTEALIGNCLIENT   = 01000h;
    CS_BYTEALIGNWINDOW   = 02000h;
    CS_GLOBALCLASS       = 04000h;


    CS_IME              = 00010000h;

    PRF_CHECKVISIBLE    = 00000001h;
    PRF_NONCLIENT       = 00000002h;
    PRF_CLIENT          = 00000004h;
    PRF_ERASEBKGND      = 00000008h;
    PRF_CHILDREN        = 00000010h;
    PRF_OWNED           = 00000020h;

    BDR_RAISEDOUTER = 0001h;
    BDR_SUNKENOUTER = 0002h;
    BDR_RAISEDINNER = 0004h;
    BDR_SUNKENINNER = 0008h;

    BDR_OUTER       = 0003h;
    BDR_INNER       = 000ch;
    BDR_RAISED      = 0005h;
    BDR_SUNKEN      = 000ah;

    EDGE_RAISED     = (BDR_RAISEDOUTER BOR BDR_RAISEDINNER);
    EDGE_SUNKEN     = (BDR_SUNKENOUTER BOR BDR_SUNKENINNER);
    EDGE_ETCHED     = (BDR_SUNKENOUTER BOR BDR_RAISEDINNER);
    EDGE_BUMP       = (BDR_RAISEDOUTER BOR BDR_SUNKENINNER);

    BF_LEFT         = 0001h;
    BF_TOP          = 0002h;
    BF_RIGHT        = 0004h;
    BF_BOTTOM       = 0008h;

    BF_TOPLEFT      = (BF_TOP BOR BF_LEFT);
    BF_TOPRIGHT     = (BF_TOP BOR BF_RIGHT);
    BF_BOTTOMLEFT   = (BF_BOTTOM BOR BF_LEFT);
    BF_BOTTOMRIGHT  = (BF_BOTTOM BOR BF_RIGHT);
    BF_RECT         = (BF_LEFT BOR BF_TOP BOR BF_RIGHT BOR BF_BOTTOM);

    BF_DIAGONAL     = 0010h;

    BF_DIAGONAL_ENDTOPRIGHT     = (BF_DIAGONAL BOR BF_TOP BOR BF_RIGHT);
    BF_DIAGONAL_ENDTOPLEFT      = (BF_DIAGONAL BOR BF_TOP BOR BF_LEFT);
    BF_DIAGONAL_ENDBOTTOMLEFT   = (BF_DIAGONAL BOR BF_BOTTOM BOR BF_LEFT);
    BF_DIAGONAL_ENDBOTTOMRIGHT  = (BF_DIAGONAL BOR BF_BOTTOM BOR BF_RIGHT);

    BF_MIDDLE       = 0800h;
    BF_SOFT         = 1000h;
    BF_ADJUST       = 2000h;
    BF_FLAT         = 4000h;
    BF_MONO         = 8000h;

PROCEDURE DrawEdge(hdc: HDC;
                   qrc: RECT;
                   edge: UINT;
                   grfFlags: UINT) : BOOL;

CONST
    DFC_CAPTION             = 1;
    DFC_MENU                = 2;
    DFC_SCROLL              = 3;
    DFC_BUTTON              = 4;
    DFC_POPUPMENU           = 5;

    DFCS_CAPTIONCLOSE       = 0000h;
    DFCS_CAPTIONMIN         = 0001h;
    DFCS_CAPTIONMAX         = 0002h;
    DFCS_CAPTIONRESTORE     = 0003h;
    DFCS_CAPTIONHELP        = 0004h;

    DFCS_MENUARROW          = 0000h;
    DFCS_MENUCHECK          = 0001h;
    DFCS_MENUBULLET         = 0002h;
    DFCS_MENUARROWRIGHT     = 0004h;

    DFCS_SCROLLUP           = 0000h;
    DFCS_SCROLLDOWN         = 0001h;
    DFCS_SCROLLLEFT         = 0002h;
    DFCS_SCROLLRIGHT        = 0003h;
    DFCS_SCROLLCOMBOBOX     = 0005h;
    DFCS_SCROLLSIZEGRIP     = 0008h;
    DFCS_SCROLLSIZEGRIPRIGHT = 0010h;

    DFCS_BUTTONCHECK        = 0000h;
    DFCS_BUTTONRADIOIMAGE   = 0001h;
    DFCS_BUTTONRADIOMASK    = 0002h;
    DFCS_BUTTONRADIO        = 0004h;
    DFCS_BUTTON3STATE       = 0008h;
    DFCS_BUTTONPUSH         = 0010h;

    DFCS_INACTIVE           = 0100h;
    DFCS_PUSHED             = 0200h;
    DFCS_CHECKED            = 0400h;
    DFCS_ADJUSTRECT         = 2000h;
    DFCS_FLAT               = 4000h;
    DFCS_MONO               = 8000h;

    DFCS_TRANSPARENT        =00800h;
    DFCS_HOT                =01000h;

PROCEDURE DrawFrameControl(a: HDC; b: RECT; c: UINT; d: UINT) : BOOL;

CONST
    DC_ACTIVE           = 0001h;
    DC_SMALLCAP         = 0002h;
    DC_ICON             = 0004h;
    DC_TEXT             = 0008h;
    DC_INBUTTON         = 0010h;
    DC_GRADIENT         = 0020h;
    (*??
    DC_CAPTION          = (DC_ICON BOR DC_TEXT BOR DC_BUTTONS);
    DC_NC               = (DC_CAPTION BOR DC_FRAME);
    *)

PROCEDURE DrawCaption(a: HWND; b: HDC; c: RECT; d: UINT) : BOOL;

CONST
    IDANI_OPEN          = 1;
    IDANI_CLOSE         = 2;
    IDANI_CAPTION       = 3;

PROCEDURE DrawAnimatedRects(hwnd : HWND;
                            idAni : WINT;
                            lprcFrom : RECT;
                            lprcTo : RECT) : BOOL;


CONST
    CF_TEXT              = 1;
    CF_BITMAP            = 2;
    CF_METAFILEPICT      = 3;
    CF_SYLK              = 4;
    CF_DIF               = 5;
    CF_TIFF              = 6;
    CF_OEMTEXT           = 7;
    CF_DIB               = 8;
    CF_PALETTE           = 9;
    CF_PENDATA           = 10;
    CF_RIFF              = 11;
    CF_WAVE              = 12;
    CF_UNICODETEXT       = 13;
    CF_ENHMETAFILE       = 14;

    CF_HDROP             = 15;
    CF_LOCALE            = 16;
    CF_MAX               = 17;

    CF_OWNERDISPLAY      = 00080h;
    CF_DSPTEXT           = 00081h;
    CF_DSPBITMAP         = 00082h;
    CF_DSPMETAFILEPICT   = 00083h;
    CF_DSPENHMETAFILE    = 0008Eh;

    CF_PRIVATEFIRST      = 00200h;
    CF_PRIVATELAST       = 002FFh;
    CF_GDIOBJFIRST       = 00300h;
    CF_GDIOBJLAST        = 003FFh;

    FVIRTKEY             = 001h;(*95*)
    FNOINVERT            = 002h;
    FSHIFT               = 004h;
    FCONTROL             = 008h;
    FALT                 = 010h;

TYPE
    ACCEL = RECORD
          fVirt          : BYTE;
          key            : WORD;
          cmd            : WORD;
    END;
    LPACCEL              = POINTER TO ACCEL;

    PAINTSTRUCT = RECORD
          hdc            : HDC;
          fErase         : BOOL;
          rcPaint        : RECT;
          fRestore       : BOOL;
          fIncUpdate     : BOOL;
          rgbReserved    : ARRAY [0..32 - 1] OF BYTE;
    END;
    PPAINTSTRUCT         = POINTER TO PAINTSTRUCT;
    LPPAINTSTRUCT        = PPAINTSTRUCT;


TYPE
    WINDOWPLACEMENT = RECORD
          length         : UINT;
          flags          : UINT;
          showCmd        : UINT;
          ptMinPosition  : POINT;
          ptMaxPosition  : POINT;
          rcNormalPosition: RECT;
    END;
    PWINDOWPLACEMENT     = POINTER TO WINDOWPLACEMENT;
    LPWINDOWPLACEMENT    = PWINDOWPLACEMENT;

CONST
    WPF_SETMINPOSITION   = 00001h;
    WPF_RESTORETOMAXIMIZED= 00002h;

TYPE
    NMHDR = RECORD
        hwndFrom        : HWND;
        idFrom          : UINT_PTR;
        code            : UINT;
    END;
    LPNMHDR = POINTER TO NMHDR;

    STYLESTRUCT = RECORD
        styleOld        : DWORD;
        styleNew        : DWORD;
    END;
    LPSTYLESTRUCT       = POINTER TO STYLESTRUCT;

CONST
    ODT_MENU             = 1;
    ODT_LISTBOX          = 2;
    ODT_COMBOBOX         = 3;
    ODT_BUTTON           = 4;
    ODT_STATIC           = 5;(*95*)

    ODA_DRAWENTIRE       = 00001h;
    ODA_SELECT           = 00002h;
    ODA_FOCUS            = 00004h;
    ODS_SELECTED         = 00001h;
    ODS_GRAYED           = 00002h;
    ODS_DISABLED         = 00004h;
    ODS_CHECKED          = 00008h;
    ODS_FOCUS            = 00010h;

    ODS_DEFAULT          = 00020h;
    ODS_COMBOBOXEDIT     = 01000h;
    ODS_HOTLIGHT        = 00040h;
    ODS_INACTIVE        = 00080h;


TYPE
    MEASUREITEMSTRUCT = RECORD
          CtlType        : UINT;
          CtlID          : UINT;
          itemID         : UINT;
          itemWidth      : UINT;
          itemHeight     : UINT;
          itemData       : ULONG_PTR;
    END;
    PMEASUREITEMSTRUCT   = POINTER TO MEASUREITEMSTRUCT;
    LPMEASUREITEMSTRUCT  = PMEASUREITEMSTRUCT;

    DRAWITEMSTRUCT = RECORD
          CtlType        : UINT;
          CtlID          : UINT;
          itemID         : UINT;
          itemAction     : UINT;
          itemState      : UINT;
          hwndItem       : HWND;
          hDC            : HDC;
          rcItem         : RECT;
          itemData       : ULONG_PTR;
    END;
    PDRAWITEMSTRUCT      = POINTER TO DRAWITEMSTRUCT;
    LPDRAWITEMSTRUCT     = PDRAWITEMSTRUCT;

    DELETEITEMSTRUCT = RECORD
          CtlType        : UINT;
          CtlID          : UINT;
          itemID         : UINT;
          hwndItem       : HWND;
          itemData       : ULONG_PTR;
    END;
    PDELETEITEMSTRUCT    = POINTER TO DELETEITEMSTRUCT;
    LPDELETEITEMSTRUCT   = PDELETEITEMSTRUCT;

    COMPAREITEMSTRUCT = RECORD
          CtlType        : UINT;
          CtlID          : UINT;
          hwndItem       : HWND;
          itemID1        : UINT;
          itemData1      : ULONG_PTR;
          itemID2        : UINT;
          itemData2      : ULONG_PTR;
          dwLocaleId     : DWORD;
    END;
    PCOMPAREITEMSTRUCT   = POINTER TO COMPAREITEMSTRUCT;
    LPCOMPAREITEMSTRUCT  = PCOMPAREITEMSTRUCT;

PROCEDURE GetMessageA(VAR lpMsg : MSG;
                      hWnd : HWND;
                      wMsgFilterMin : UINT;
                      wMsgFilterMax : UINT) : BOOL;

PROCEDURE GetMessageW(VAR lpMsg : MSG;
                      hWnd : HWND;
                      wMsgFilterMin : UINT;
                      wMsgFilterMax : UINT) : BOOL;

%IF UNICODE %THEN
PROCEDURE GetMessage = GetMessageW;
%ELSE
PROCEDURE GetMessage = GetMessageA;
%END

PROCEDURE TranslateMessage(VAR lpMsg : MSG) : BOOL;

PROCEDURE DispatchMessageA(VAR lpMsg : MSG) : LONG;

PROCEDURE DispatchMessageW(VAR lpMsg : MSG) : LONG;

%IF UNICODE %THEN
PROCEDURE DispatchMessage = DispatchMessageW;
%ELSE
PROCEDURE DispatchMessage = DispatchMessageA;
%END

PROCEDURE SetMessageQueue(cMessagesMax : INTEGER) : BOOL;

PROCEDURE PeekMessageA(VAR lpMsg : MSG;
                       hWnd : HWND;
                       wMsgFilterMin : UINT;
                       wMsgFilterMax : UINT;
                       wRemoveMsg : UINT) : BOOL;

PROCEDURE PeekMessageW(VAR lpMsg : MSG;
                       hWnd : HWND;
                       wMsgFilterMin : UINT;
                       wMsgFilterMax : UINT;
                       wRemoveMsg : UINT) : BOOL;

%IF UNICODE %THEN
PROCEDURE PeekMessage = PeekMessageW;
%ELSE
PROCEDURE PeekMessage = PeekMessageA;
%END

CONST
    PM_NOREMOVE          = 00000h;
    PM_REMOVE            = 00001h;
    PM_NOYIELD           = 00002h;

PROCEDURE RegisterHotKey(hWnd : HWND;
                         id : INTEGER;
                         fsModifiers : UINT;
                         vk : UINT) : BOOL;

PROCEDURE UnregisterHotKey(hWnd : HWND;
                           id : INTEGER) : BOOL;


CONST
    MOD_ALT              = 00001h;
    MOD_CONTROL          = 00002h;
    MOD_SHIFT            = 00004h;
    MOD_WIN              = 00008h;

    IDHOT_SNAPWINDOW     = -1;
    IDHOT_SNAPDESKTOP    = -2;


    EW_RESTARTWINDOWS    = 00042h;
    EW_REBOOTSYSTEM      = 00043h;
    EW_EXITANDEXECAPP    = 00044h;


    ENDSESSION_LOGOFF    = 080000000h;

    EWX_LOGOFF           = 0h;
    EWX_SHUTDOWN         = 1h;
    EWX_REBOOT           = 2h;
    EWX_FORCE            = 4h;
    EWX_POWEROFF         = 8h;
    EWX_FORCEIFHUNG      = 000000010h;(*NT only*)

PROCEDURE ExitWindowsEx(uFlags : UINT;
                        dwReserved : DWORD) : BOOL;

PROCEDURE SwapMouseButton(fSwap : BOOL) : BOOL;

PROCEDURE GetMessagePos() : DWORD;

PROCEDURE GetMessageTime() : LONG;

PROCEDURE GetMessageExtraInfo() : LONG;


PROCEDURE SetMessageExtraInfo(lParam : LPARAM) : LPARAM;


PROCEDURE SendMessageA(hWnd : HWND;
                       Msg : UINT;
                       wParam : WPARAM;
                       lParam : LPARAM) : LRESULT;

PROCEDURE SendMessageW(hWnd : HWND;
                       Msg : UINT;
                       wParam : WPARAM;
                       lParam : LPARAM) : LRESULT;

%IF UNICODE %THEN
PROCEDURE SendMessage = SendMessageW;
%ELSE
PROCEDURE SendMessage = SendMessageA;
%END

PROCEDURE SendMessageTimeoutA(hWnd : HWND;
                              Msg : UINT;
                              wParam : WPARAM;
                              lParam : LPARAM;
                              fuFlags : UINT;
                              uTimeout : UINT;
                              VAR lpdwResult : DWORD_PTR) : LRESULT;

PROCEDURE SendMessageTimeoutW(hWnd : HWND;
                              Msg : UINT;
                              wParam : WPARAM;
                              lParam : LPARAM;
                              fuFlags : UINT;
                              uTimeout : UINT;
                              VAR lpdwResult : DWORD_PTR) : LRESULT;


%IF UNICODE %THEN
PROCEDURE SendMessageTimeout = SendMessageTimeoutW;
%ELSE
PROCEDURE SendMessageTimeout = SendMessageTimeoutA;
%END

PROCEDURE SendNotifyMessageA(hWnd : HWND;
                             Msg : UINT;
                             wParam : WPARAM;
                             lParam : LPARAM) : BOOL;

PROCEDURE SendNotifyMessageW(hWnd : HWND;
                             Msg : UINT;
                             wParam : WPARAM;
                             lParam : LPARAM) : BOOL;

%IF UNICODE %THEN
PROCEDURE SendNotifyMessage = SendNotifyMessageW;
%ELSE
PROCEDURE SendNotifyMessage = SendNotifyMessageA;
%END

PROCEDURE SendMessageCallbackA(hWnd : HWND;
                               Msg : UINT;
                               wParam : WPARAM;
                               lParam : LPARAM;
                               lpResultCallBack : SENDASYNCPROC;
                               dwData : ULONG_PTR) : BOOL;

PROCEDURE SendMessageCallbackW(hWnd : HWND;
                               Msg : UINT;
                               wParam : WPARAM;
                               lParam : LPARAM;
                               lpResultCallBack : SENDASYNCPROC;
                               dwData : ULONG_PTR) : BOOL;

%IF UNICODE %THEN
PROCEDURE SendMessageCallback = SendMessageCallbackW;
%ELSE
PROCEDURE SendMessageCallback = SendMessageCallbackA;
%END

(* only on NT *)
PROCEDURE BroadcastSystemMessageW(a: DWORD;
                                  VAR b: DWORD;
                                  c: UINT;
                                  d: WPARAM;
                                  e: LPARAM) : LONG;

(* only on NT *)
PROCEDURE BroadcastSystemMessageA(a: DWORD;
                                  VAR b: DWORD;
                                  c: UINT;
                                  d: WPARAM;
                                  e: LPARAM) : LONG;

(* only on Win9x*)
PROCEDURE BroadcastSystemMessage(a: DWORD;
                                 VAR b: DWORD;
                                 c: UINT;
                                 d: WPARAM;
                                 e: LPARAM) : LONG;

CONST
    BROADCAST_QUERY_DENY         = 424D5144h;(* Return this value to deny a query.*)

(*Broadcast Special Message Recipient list*)
    BSM_ALLCOMPONENTS       = 00000000h;
    BSM_VXDS                = 00000001h;
    BSM_NETDRIVER           = 00000002h;
    BSM_INSTALLABLEDRIVERS  = 00000004h;
    BSM_APPLICATIONS        = 00000008h;
    BSM_ALLDESKTOPS         = 00000010h;

(*Broadcast Special Message Flags*)
    BSF_QUERY               = 00000001h;
    BSF_IGNORECURRENTTASK   = 00000002h;
    BSF_FLUSHDISK           = 00000004h;
    BSF_NOHANG              = 00000008h;
    BSF_POSTMESSAGE         = 00000010h;
    BSF_FORCEIFHUNG         = 00000020h;
    BSF_NOTIMEOUTIFNOTHUNG  = 00000040h;

    DBWF_LPARAMPOINTER          = 08000h;

TYPE
    BROADCASTSYSMSG = RECORD
        uiMessage : UINT;
        wParam  : WPARAM;
        lParam  : LPARAM;
    END;
    LPBROADCASTSYSMSG   = POINTER TO BROADCASTSYSMSG;

TYPE
    HDEVNOTIFY = PVOID;
    PHDEVNOTIFY = POINTER TO HDEVNOTIFY;

CONST
    EVICE_NOTIFY_WINDOW_HANDLE     = 00000000h;

PROCEDURE RegisterDeviceNotificationA(hRecipient : HANDLE;
                                      NotificationFilter : LPVOID;
                                      Flags : DWORD) : HDEVNOTIFY;

PROCEDURE RegisterDeviceNotificationW(hRecipient : HANDLE;
                                      NotificationFilter : LPVOID;
                                      Flags : DWORD) : HDEVNOTIFY;

%IF UNICODE %THEN
PROCEDURE RegisterDeviceNotification = RegisterDeviceNotificationW;
%ELSE
PROCEDURE RegisterDeviceNotification = RegisterDeviceNotificationA;
%END

PROCEDURE UnregisterDeviceNotification(Handle : HDEVNOTIFY) : BOOL;

PROCEDURE PostMessageA(hWnd : HWND;
                       Msg : UINT;
                       wParam : WPARAM;
                       lParam : LPARAM) : BOOL;

PROCEDURE PostMessageW(hWnd : HWND;
                       Msg : UINT;
                       wParam : WPARAM;
                       lParam : LPARAM) : BOOL;

%IF UNICODE %THEN
PROCEDURE PostMessage = PostMessageW;
%ELSE
PROCEDURE PostMessage = PostMessageA;
%END

PROCEDURE PostThreadMessageA(idThread : DWORD;
                             Msg : UINT;
                             wParam : WPARAM;
                             lParam : LPARAM) : BOOL;

PROCEDURE PostThreadMessageW(idThread : DWORD;
                             Msg : UINT;
                             wParam : WPARAM;
                             lParam : LPARAM) : BOOL;

%IF UNICODE %THEN
PROCEDURE PostThreadMessage = PostThreadMessageW;
%ELSE
PROCEDURE PostThreadMessage = PostThreadMessageA;
%END

CONST
    HWND_BROADCAST   =  CAST(HWND,0ffffH);
    HWND_MESSAGE     = CAST(HWND, -3);

PROCEDURE AttachThreadInput(idAttach : DWORD;
                            idAttachTo : DWORD;
                            fAttach : BOOL) : BOOL;

PROCEDURE ReplyMessage(lResult : LRESULT) : BOOL;

PROCEDURE WaitMessage() : BOOL;

PROCEDURE WaitForInputIdle(hProcess : HANDLE;
                           dwMilliseconds : DWORD) : DWORD;

PROCEDURE DefWindowProcA(hWnd : HWND;
                         Msg : UINT;
                         wParam : WPARAM;
                         lParam : LPARAM) : LRESULT [EXPORT];

PROCEDURE DefWindowProcW(hWnd : HWND;
                         Msg : UINT;
                         wParam : WPARAM;
                         lParam : LPARAM) : LRESULT [EXPORT];

%IF UNICODE %THEN
PROCEDURE DefWindowProc = DefWindowProcW;
%ELSE
PROCEDURE DefWindowProc = DefWindowProcA;
%END

PROCEDURE PostQuitMessage(nExitCode : INTEGER);

PROCEDURE CallWindowProcA(lpPrevWndFunc : WNDPROC;
                          hWnd : HWND;
                          Msg : UINT;
                          wParam : WPARAM;
                          lParam : LPARAM) : LRESULT;

PROCEDURE CallWindowProcW(lpPrevWndFunc : WNDPROC;
                          hWnd : HWND;
                          Msg : UINT;
                          wParam : WPARAM;
                          lParam : LPARAM) : LRESULT;

%IF UNICODE %THEN
PROCEDURE CallWindowProc = CallWindowProcW;
%ELSE
PROCEDURE CallWindowProc = CallWindowProcA;
%END

PROCEDURE InSendMessage() : BOOL;

PROCEDURE InSendMessageEx(lpReserved : LPVOID) : DWORD;

(*
 * InSendMessageEx return value
 *)
CONST
    ISMEX_NOSEND      = 00000000h;
    ISMEX_SEND        = 00000001h;
    ISMEX_NOTIFY      = 00000002h;
    ISMEX_CALLBACK    = 00000004h;
    ISMEX_REPLIED     = 00000008h;

PROCEDURE GetDoubleClickTime() : UINT;

PROCEDURE SetDoubleClickTime(a : UINT) : BOOL;

PROCEDURE RegisterClassA(lpWndClass : WNDCLASSA) : ATOM;

PROCEDURE RegisterClassW(lpWndClass : WNDCLASSW) : ATOM;

%IF UNICODE %THEN
PROCEDURE RegisterClass = RegisterClassW;
%ELSE
PROCEDURE RegisterClass = RegisterClassA;
%END

PROCEDURE UnregisterClassA(lpClassName : ARRAY OF ACHAR;
                           a : HINSTANCE) : BOOL;

PROCEDURE UnregisterClassW(lpClassName : ARRAY OF UCHAR;
                           a : HINSTANCE) : BOOL;

%IF UNICODE %THEN
PROCEDURE UnregisterClass = UnregisterClassW;
%ELSE
PROCEDURE UnregisterClass = UnregisterClassA;
%END

PROCEDURE GetClassInfoA(a : HINSTANCE;
                        lpClassName : ARRAY OF ACHAR;
                        VAR lpWndClass : WNDCLASSA) : BOOL;

PROCEDURE GetClassInfoW(a : HINSTANCE;
                        lpClassName : ARRAY OF UCHAR;
                        VAR lpWndClass : WNDCLASSW) : BOOL;

%IF UNICODE %THEN
PROCEDURE GetClassInfo = GetClassInfoW;
%ELSE
PROCEDURE GetClassInfo = GetClassInfoA;
%END



TYPE
    WNDCLASSEXA = RECORD
        cbSize          : UINT;

        style           : UINT;
        lpfnWndProc     : WNDPROC;
        cbClsExtra      : WINT;
        cbWndExtra      : WINT;
        hInstance       : HINSTANCE;
        hIcon           : HICON;
        hCursor         : HCURSOR;
        hbrBackground   : HBRUSH;
        lpszMenuName    : LPCSTR;
        lpszClassName   : LPCSTR;

        hIconSm         : HICON;
    END;
    PWNDCLASSEXA  = POINTER TO WNDCLASSEXA;
    LPWNDCLASSEXA = PWNDCLASSEXA;

    WNDCLASSEXW = RECORD
        cbSize          : UINT;

        style           : UINT;
        lpfnWndProc     : WNDPROC;
        cbClsExtra      : WINT;
        cbWndExtra      : WINT;
        hInstance       : HINSTANCE;
        hIcon           : HICON;
        hCursor         : HCURSOR;
        hbrBackground   : HBRUSH;
        lpszMenuName    : LPCWSTR;
        lpszClassName   : LPCWSTR;

        hIconSm         : HICON;
    END;
    PWNDCLASSEXW  = POINTER TO WNDCLASSEXW;
    LPWNDCLASSEXW = PWNDCLASSEXW;

%IF UNICODE %THEN
    WNDCLASSEX = WNDCLASSEXW;
    PWNDCLASSEX  = PWNDCLASSEXW;
%ELSE
    WNDCLASSEX = WNDCLASSEXA;
    PWNDCLASSEX  = PWNDCLASSEXA;
%END
    LPWNDCLASSEX = PWNDCLASSEX;

PROCEDURE RegisterClassExA(a: WNDCLASSEXA) : ATOM;

PROCEDURE RegisterClassExW(a: WNDCLASSEXW) : ATOM;

%IF UNICODE %THEN
PROCEDURE RegisterClassEx = RegisterClassExW;
%ELSE
PROCEDURE RegisterClassEx = RegisterClassExA;
%END

PROCEDURE GetClassInfoExA(a: HINSTANCE;
                          b: ARRAY OF ACHAR;
                          VAR c: WNDCLASSEXA) : BOOL;

PROCEDURE GetClassInfoExW(a: HINSTANCE;
                          b: ARRAY OF UCHAR;
                          VAR c: WNDCLASSEXW) : BOOL;
%IF UNICODE %THEN
PROCEDURE GetClassInfoEx = GetClassInfoExW;
%ELSE
PROCEDURE GetClassInfoEx = GetClassInfoExA;
%END




CONST
    CW_USEDEFAULT   = CAST(INTEGER, 080000000H);
    HWND_DESKTOP    = CAST(HWND, 0);

PROCEDURE CreateWindowExA(a : DWORD;
                          lpClassName : ARRAY OF ACHAR;
                          lpWindowName : ARRAY OF ACHAR;
                          dwStyle : DWORD;
                          X : INTEGER;
                          Y : INTEGER;
                          nWidth : INTEGER;
                          nHeight : INTEGER;
                          hWndParent : HWND;
                          b : HMENU;
                          c : HINSTANCE;
                          lpParam : LPVOID) : HWND;

PROCEDURE CreateWindowExW(a : DWORD;
                          lpClassName : ARRAY OF UCHAR;
                          lpWindowName : ARRAY OF UCHAR;
                          dwStyle : DWORD;
                          X : INTEGER;
                          Y : INTEGER;
                          nWidth : INTEGER;
                          nHeight : INTEGER;
                          hWndParent : HWND;
                          b : HMENU;
                          c : HINSTANCE;
                          lpParam : LPVOID) : HWND;

%IF UNICODE %THEN
PROCEDURE CreateWindowEx = CreateWindowExW;
%ELSE
PROCEDURE CreateWindowEx = CreateWindowExA;
%END


PROCEDURE IsWindow(hWnd : HWND) : BOOL;

PROCEDURE IsMenu(a : HMENU) : BOOL;

PROCEDURE IsChild(hWndParent : HWND;
                  hWnd : HWND) : BOOL;

PROCEDURE DestroyWindow(hWnd : HWND) : BOOL;

PROCEDURE ShowWindow(hWnd : HWND;
                     nCmdShow : INTEGER) : BOOL;


PROCEDURE ShowWindowAsync(hWnd : HWND; nCmdShow : WINT) : BOOL;

PROCEDURE AnimateWindow(hWnd : HWND;
                        dwTime : DWORD;
                        dwFlags : DWORD) : BOOL;

CONST
    FLASHW_STOP         =0h;
    FLASHW_CAPTION      =000000001h;
    FLASHW_TRAY         =000000002h;
    FLASHW_ALL          =(FLASHW_CAPTION BOR FLASHW_TRAY);
    FLASHW_TIMER        =000000004h;
    FLASHW_TIMERNOFG    =00000000Ch;

PROCEDURE FlashWindow(hWnd : HWND; dwFlags : DWORD) : BOOL;

PROCEDURE ShowOwnedPopups(hWnd : HWND; fShow : BOOL) : BOOL;

PROCEDURE OpenIcon(hWnd : HWND) : BOOL;

PROCEDURE CloseWindow(hWnd : HWND) : BOOL;

PROCEDURE MoveWindow(hWnd : HWND;
                     X : INTEGER;
                     Y : INTEGER;
                     nWidth : INTEGER;
                     nHeight : INTEGER;
                     bRepaint : BOOL) : BOOL;

PROCEDURE SetWindowPos(hWnd : HWND;
                       hWndInsertAfter : HWND;
                       X : INTEGER;
                       Y : INTEGER;
                       cx : INTEGER;
                       cy :INTEGER;
                       uFlags : UINT) : BOOL;

PROCEDURE GetWindowPlacement(hWnd : HWND;
                             VAR lpwndpl : WINDOWPLACEMENT) : BOOL;

PROCEDURE SetWindowPlacement(hWnd : HWND;
                             VAR lpwndpl : WINDOWPLACEMENT) : BOOL;

PROCEDURE BeginDeferWindowPos(nNumWindows : INTEGER) : HDWP;

PROCEDURE DeferWindowPos(hWinPosInfo : HDWP;
                         hWnd : HWND;
                         hWndInsertAfter : HWND;
                         x : INTEGER;
                         y :INTEGER ;
                         cx : INTEGER;
                         cy : INTEGER;
                         uFlags : UINT) : HDWP;

PROCEDURE EndDeferWindowPos(hWinPosInfo : HDWP) : BOOL;

PROCEDURE IsWindowVisible(hWnd : HWND) : BOOL;

PROCEDURE IsIconic(hWnd : HWND) : BOOL;

PROCEDURE AnyPopup() : BOOL;

PROCEDURE BringWindowToTop(hWnd : HWND) : BOOL;

PROCEDURE IsZoomed(hWnd : HWND) : BOOL;


CONST
    SWP_NOSIZE           = 00001h;
    SWP_NOMOVE           = 00002h;
    SWP_NOZORDER         = 00004h;
    SWP_NOREDRAW         = 00008h;
    SWP_NOACTIVATE       = 00010h;
    SWP_FRAMECHANGED     = 00020h;
    SWP_SHOWWINDOW       = 00040h;
    SWP_HIDEWINDOW       = 00080h;
    SWP_NOCOPYBITS       = 00100h;
    SWP_NOOWNERZORDER    = 00200h;
    SWP_NOSENDCHANGING   = 00400h;


    SWP_DRAWFRAME       = SWP_FRAMECHANGED;
    SWP_NOREPOSITION    = SWP_NOOWNERZORDER;

    SWP_DEFERERASE      = 02000h;
    SWP_ASYNCWINDOWPOS  = 04000h;


    HWND_TOP     = CAST(HWND, 0);
    HWND_BOTTOM          = CAST(HWND, 1);
    HWND_TOPMOST         = CAST(HWND, -1);
    HWND_NOTOPMOST       = CAST(HWND, -2);

TYPE
    <*/PUSH/PACK*>
    DLGTEMPLATE = RECORD
        style                   : DWORD;
        dwExtendedStyle         : DWORD;
        cdit                    : WORD;
        x                       : SHORT;
        y                       : SHORT;
        cx                      : SHORT;
        cy                      : SHORT;
    END;

    DLGITEMTEMPLATE = RECORD
          style          : DWORD;
          dwExtendedStyle: DWORD;
          x              : INTEGER16;
          y              : INTEGER16;
          cx              : INTEGER16;
          cy              : INTEGER16;
          id             : WORD;
    END;
    <*/POP*>

    LPDLGTEMPLATEW = POINTER TO DLGTEMPLATE;
    LPCDLGTEMPLATEW = LPDLGTEMPLATEW;
    LPDLGTEMPLATEA = LPDLGTEMPLATEW;
    LPCDLGTEMPLATEA = LPCDLGTEMPLATEW;

    LPDLGTEMPLATE = LPDLGTEMPLATEW;
    LPCDLGTEMPLATE = LPCDLGTEMPLATEW;

    PDLGITEMTEMPLATEW    = POINTER TO DLGITEMTEMPLATE;
    PDLGITEMTEMPLATEA    = PDLGITEMTEMPLATEW;
    PDLGITEMTEMPLATE     = PDLGITEMTEMPLATEW;

    LPDLGITEMTEMPLATEW   = PDLGITEMTEMPLATEW;
    LPDLGITEMTEMPLATEA   = PDLGITEMTEMPLATEW;
    LPDLGITEMTEMPLATE    = PDLGITEMTEMPLATEW;

PROCEDURE CreateDialogParamA(a : HINSTANCE;
                             lpTemplateName : ARRAY OF ACHAR;
                             hWndParent : HWND;
                             lpDialogFunc : DLGPROC;
                             dwInitParam : LPARAM) : HWND;

PROCEDURE CreateDialogParamW(a : HINSTANCE;
                             lpTemplateName : ARRAY OF UCHAR;
                             hWndParent : HWND;
                             lpDialogFunc : DLGPROC;
                             dwInitParam : LPARAM) : HWND;

%IF UNICODE %THEN
PROCEDURE CreateDialogParam = CreateDialogParamW;
%ELSE
PROCEDURE CreateDialogParam = CreateDialogParamA;
%END

PROCEDURE CreateDialogIndirectParamA(a : HINSTANCE;
                                     lpTemplate : LPCDLGTEMPLATEA;
                                     hWndParent : HWND;
                                     lpDialogFunc : DLGPROC;
                                     dwInitParam : LPARAM) : HWND;

PROCEDURE CreateDialogIndirectParamW(a : HINSTANCE;
                                     lpTemplate : LPCDLGTEMPLATEW;
                                     hWndParent : HWND;
                                     lpDialogFunc : DLGPROC;
                                     dwInitParam : LPARAM) : HWND;

%IF UNICODE %THEN
PROCEDURE CreateDialogIndirectParam = CreateDialogIndirectParamW;
%ELSE
PROCEDURE CreateDialogIndirectParam = CreateDialogIndirectParamA;
%END

PROCEDURE DialogBoxParamA(a : HINSTANCE;
                          lpTemplateName : ARRAY OF ACHAR;
                          hWndParent : HWND;
                          lpDialogFunc : DLGPROC;
                          dwInitParam : LPARAM) : INT_PTR;

PROCEDURE DialogBoxParamW(a : HINSTANCE;
                          lpTemplateName : ARRAY OF UCHAR;
                          hWndParent : HWND;
                          lpDialogFunc : DLGPROC;
                          dwInitParam : LPARAM) : INT_PTR;

%IF UNICODE %THEN
PROCEDURE DialogBoxParam = DialogBoxParamW;
%ELSE
PROCEDURE DialogBoxParam = DialogBoxParamA;
%END

PROCEDURE DialogBoxIndirectParamA(a : HINSTANCE;
                                  hDialogTemplate : LPCDLGTEMPLATEA;
                                  hWndParent : HWND;
                                  lpDialogFunc : DLGPROC;
                                  dwInitParam : LPARAM) : INT_PTR;

PROCEDURE DialogBoxIndirectParamW(a : HINSTANCE;
                                  hDialogTemplate : LPCDLGTEMPLATEW;
                                  hWndParent : HWND;
                                  lpDialogFunc : DLGPROC;
                                  dwInitParam : LPARAM) : INT_PTR;

%IF UNICODE %THEN
PROCEDURE DialogBoxIndirectParam = DialogBoxIndirectParamW;
%ELSE
PROCEDURE DialogBoxIndirectParam = DialogBoxIndirectParamA;
%END

PROCEDURE EndDialog(hDlg : HWND;
                    nResult : INT_PTR) : BOOL;

PROCEDURE GetDlgItem(hDlg : HWND;
                     nIDDlgItem : INTEGER) : HWND [Invariant];

PROCEDURE SetDlgItemInt(hDlg : HWND;
                        nIDDlgItem : INTEGER;
                        uValue : UINT;
                        bSigned : BOOL) : BOOL;

PROCEDURE GetDlgItemInt(hDlg : HWND;
                        nIDDlgItem : INTEGER;
                        VAR lpTranslated : BOOL;
                        bSigned : BOOL) : UINT;

PROCEDURE SetDlgItemTextA(hDlg : HWND;
                          nIDDlgItem : INTEGER;
                          lpString : ARRAY OF ACHAR) : BOOL;

PROCEDURE SetDlgItemTextW(hDlg : HWND;
                          nIDDlgItem : INTEGER;
                          lpString : ARRAY OF UCHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE SetDlgItemText = SetDlgItemTextW;
%ELSE
PROCEDURE SetDlgItemText = SetDlgItemTextA;
%END


PROCEDURE GetDlgItemTextW(hDlg : HWND;
                          nIDDlgItem : INTEGER;
                          VAR lpString : ARRAY OF UCHAR;
                          nMaxCount : INTEGER) : UINT;

PROCEDURE GetDlgItemTextA(hDlg : HWND;
                          nIDDlgItem : INTEGER;
                          VAR lpString : ARRAY OF ACHAR;
                          nMaxCount : INTEGER) : UINT;

%IF UNICODE %THEN
PROCEDURE GetDlgItemText = GetDlgItemTextW;
%ELSE
PROCEDURE GetDlgItemText = GetDlgItemTextA;
%END

PROCEDURE CheckDlgButton(hDlg : HWND;
                         nIDButton : INTEGER;
                         uCheck : UINT) : BOOL;

PROCEDURE CheckRadioButton(hDlg : HWND;
                           nIDFirstButton : INTEGER;
                           nIDLastButton : INTEGER;
                           nIDCheckButton : INTEGER) : BOOL;

PROCEDURE IsDlgButtonChecked(hDlg : HWND;
                             nIDButton : INTEGER) : UINT;

PROCEDURE SendDlgItemMessageA(hDlg : HWND;
                              nIDDlgItem : INTEGER;
                              Msg : UINT;
                              wParam : WPARAM;
                              lParam : LPARAM) : LONG;

PROCEDURE SendDlgItemMessageW(hDlg : HWND;
                              nIDDlgItem : INTEGER;
                              Msg : UINT;
                              wParam : WPARAM;
                              lParam : LPARAM) : LONG;

%IF UNICODE %THEN
PROCEDURE SendDlgItemMessage = SendDlgItemMessageW;
%ELSE
PROCEDURE SendDlgItemMessage = SendDlgItemMessageA;
%END

PROCEDURE GetNextDlgGroupItem(hDlg : HWND;
                              hCtl : HWND;
                              bPrevious : BOOL) : HWND;

PROCEDURE GetNextDlgTabItem(hDlg : HWND;
                            hCtl : HWND;
                            bPrevious : BOOL) : HWND;

PROCEDURE GetDlgCtrlID(hWnd : HWND) : INTEGER;

PROCEDURE GetDialogBaseUnits() : CARDINAL32;

PROCEDURE DefDlgProcA(hDlg : HWND;
                      Msg : UINT;
                      wParam : WPARAM;
                      lParam : LPARAM) : LRESULT;

PROCEDURE DefDlgProcW(hDlg : HWND;
                      Msg : UINT;
                      wParam : WPARAM;
                      lParam : LPARAM) : LRESULT;

%IF UNICODE %THEN
PROCEDURE DefDlgProc = DefDlgProcW;
%ELSE
PROCEDURE DefDlgProc = DefDlgProcA;
%END


CONST
    DLGWINDOWEXTRA       = 30;

PROCEDURE CallMsgFilterA(VAR lpMsg : MSG;
                         nCode : INTEGER) : BOOL;

PROCEDURE CallMsgFilterW(VAR lpMsg : MSG;
                         nCode : INTEGER) : BOOL;

%IF UNICODE %THEN
PROCEDURE CallMsgFilter = CallMsgFilterW;
%ELSE
PROCEDURE CallMsgFilter = CallMsgFilterA;
%END

PROCEDURE OpenClipboard(hWndNewOwner : HWND) : BOOL;

PROCEDURE CloseClipboard() : BOOL;

PROCEDURE GetClipboardSequenceNumber() : DWORD;

PROCEDURE GetClipboardOwner() : HWND;

PROCEDURE SetClipboardViewer(hWndNewViewer : HWND) : HWND;

PROCEDURE GetClipboardViewer() : HWND;

PROCEDURE ChangeClipboardChain(hWndRemove : HWND;
                               hWndNewNext : HWND) : BOOL;

PROCEDURE SetClipboardData(uFormat : UINT;
                           hMem : HANDLE) : HANDLE;

PROCEDURE GetClipboardData(uFormat : UINT) : HANDLE;

PROCEDURE RegisterClipboardFormatA(lpszFormat : ARRAY OF ACHAR) : UINT;

PROCEDURE RegisterClipboardFormatW(lpszFormat : ARRAY OF UCHAR) : UINT;

%IF UNICODE %THEN
PROCEDURE RegisterClipboardFormat = RegisterClipboardFormatW;
%ELSE
PROCEDURE RegisterClipboardFormat = RegisterClipboardFormatA;
%END


PROCEDURE CountClipboardFormats() : INTEGER;

PROCEDURE EnumClipboardFormats(format : UINT) : UINT;

PROCEDURE GetClipboardFormatNameA(format : UINT;
                                  VAR lpszFormatName : ARRAY OF ACHAR;
                                  cchMaxCount : INTEGER) : INTEGER;

PROCEDURE GetClipboardFormatNameW(format : UINT;
                                  VAR lpszFormatName : ARRAY OF UCHAR;
                                  cchMaxCount : INTEGER) : INTEGER;
%IF UNICODE %THEN
PROCEDURE GetClipboardFormatName = GetClipboardFormatNameW;
%ELSE
PROCEDURE GetClipboardFormatName = GetClipboardFormatNameA;
%END


PROCEDURE EmptyClipboard() : BOOL;

PROCEDURE IsClipboardFormatAvailable(format : UINT) : BOOL;

PROCEDURE GetPriorityClipboardFormat(VAR paFormatPriorityList : UINT;
                                     cFormats : INTEGER) : INTEGER;

PROCEDURE GetOpenClipboardWindow() : HWND;

PROCEDURE CharToOemA(lpszSrc : ARRAY OF ACHAR;
                     VAR lpszDst : ARRAY OF ACHAR) : BOOL;

PROCEDURE CharToOemW(lpszSrc : ARRAY OF UCHAR;
                     VAR lpszDst : ARRAY OF ACHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE CharToOem = CharToOemW;
%ELSE
PROCEDURE CharToOem = CharToOemA;
%END

PROCEDURE OemToCharA(lpszSrc : ARRAY OF ACHAR;
                     VAR lpszDst : ARRAY OF ACHAR) : BOOL;

PROCEDURE OemToCharW(lpszSrc : ARRAY OF ACHAR;
                     VAR lpszDst : ARRAY OF UCHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE OemToChar = OemToCharW;
%ELSE
PROCEDURE OemToChar = OemToCharA;
%END

PROCEDURE CharToOemBuffA(lpszSrc : ARRAY OF ACHAR;
                         VAR lpszDst : ARRAY OF ACHAR;
                         cchDstLength : DWORD) : BOOL;

PROCEDURE CharToOemBuffW(lpszSrc : ARRAY OF UCHAR;
                         VAR lpszDst : ARRAY OF ACHAR;
                         cchDstLength : DWORD) : BOOL;
%IF UNICODE %THEN
PROCEDURE CharToOemBuff = CharToOemBuffW;
%ELSE
PROCEDURE CharToOemBuff = CharToOemBuffA;
%END

PROCEDURE OemToCharBuffA(lpszSrc : ARRAY OF ACHAR;
                         VAR lpszDst : ARRAY OF ACHAR;
                         cchDstLength : DWORD) : BOOL;

PROCEDURE OemToCharBuffW(lpszSrc : ARRAY OF ACHAR;
                         VAR lpszDst : ARRAY OF UCHAR;
                         cchDstLength : DWORD) : BOOL;
%IF UNICODE %THEN
PROCEDURE OemToCharBuff = OemToCharBuffW;
%ELSE
PROCEDURE OemToCharBuff = OemToCharBuffA;
%END

PROCEDURE CharUpperA(ch : DWORD) : ACHAR;

PROCEDURE CharUpperW(ch : DWORD) : UCHAR;

%IF UNICODE %THEN
PROCEDURE CharUpper = CharUpperW;
%ELSE
PROCEDURE CharUpper = CharUpperA;
%END

PROCEDURE CharUpperBuffA(VAR lpsz : ARRAY OF ACHAR;
                         cchLength : DWORD) : DWORD;

PROCEDURE CharUpperBuffW(VAR lpsz : ARRAY OF UCHAR;
                         cchLength : DWORD) : DWORD;

%IF UNICODE %THEN
PROCEDURE CharUpperBuff = CharUpperBuffW;
%ELSE
PROCEDURE CharUpperBuff = CharUpperBuffA;
%END

PROCEDURE CharLowerA(ch : DWORD) : ACHAR;

PROCEDURE CharLowerW(ch : DWORD) : UCHAR;

%IF UNICODE %THEN
PROCEDURE CharLower = CharLowerW;
%ELSE
PROCEDURE CharLower = CharLowerA;
%END

PROCEDURE CharLowerBuffA(VAR lpsz : ARRAY OF ACHAR;
                         cchLength : DWORD) : DWORD;

PROCEDURE CharLowerBuffW(VAR lpsz : ARRAY OF UCHAR;
                         cchLength : DWORD) : DWORD;

%IF UNICODE %THEN
PROCEDURE CharLowerBuff = CharLowerBuffW;
%ELSE
PROCEDURE CharLowerBuff = CharLowerBuffA;
%END

PROCEDURE CharNextA(lpsz : ARRAY OF ACHAR) : LPSTR;

PROCEDURE CharNextW(lpsz : ARRAY OF UCHAR) : LPWSTR;

%IF UNICODE %THEN
PROCEDURE CharNext = CharNextW;
%ELSE
PROCEDURE CharNext = CharNextA;
%END

PROCEDURE CharPrevA(lpszStart : ARRAY OF ACHAR;
                    lpszCurrent : ARRAY OF ACHAR) : LPSTR;

PROCEDURE CharPrevW(lpszStart : ARRAY OF UCHAR;
                    lpszCurrent : ARRAY OF UCHAR) : LPWSTR;

%IF UNICODE %THEN
PROCEDURE CharPrev = CharPrevW;
%ELSE
PROCEDURE CharPrev = CharPrevA;
%END


PROCEDURE CharNextExA(
                     CodePage : WORD;
                     lpCurrentChar : ARRAY OF ACHAR;
                     dwFlags : DWORD) : LPSTR;

PROCEDURE CharNextExW(
                     CodePage : WORD;
                     lpCurrentChar : ARRAY OF UCHAR;
                     dwFlags : DWORD) : LPWSTR;

%IF UNICODE %THEN
PROCEDURE CharNextEx = CharNextExW;
%ELSE
PROCEDURE CharNextEx = CharNextExA;
%END

PROCEDURE CharPrevExA(CodePage : WORD;
                      lpStart : ARRAY OF ACHAR;
                      lpCurrentChar : ARRAY OF ACHAR;
                      dwFlags : DWORD) : LPSTR;



PROCEDURE IsCharAlphaA(ch : ACHAR) : BOOL;

PROCEDURE IsCharAlphaW(ch : WCHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE IsCharAlpha = IsCharAlphaW;
%ELSE
PROCEDURE IsCharAlpha = IsCharAlphaA;
%END

PROCEDURE IsCharAlphaNumericA(ch : ACHAR) : BOOL;

PROCEDURE IsCharAlphaNumericW(ch : WCHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE IsCharAlphaNumeric = IsCharAlphaNumericW;
%ELSE
PROCEDURE IsCharAlphaNumeric = IsCharAlphaNumericA;
%END

PROCEDURE IsCharUpperA(ch : ACHAR) : BOOL;

PROCEDURE IsCharUpperW(ch : WCHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE IsCharUpper = IsCharUpperW;
%ELSE
PROCEDURE IsCharUpper = IsCharUpperA;
%END

PROCEDURE IsCharLowerA(ch : ACHAR) : BOOL;

PROCEDURE IsCharLowerW(ch : WCHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE IsCharLower = IsCharLowerW;
%ELSE
PROCEDURE IsCharLower = IsCharLowerA;
%END

PROCEDURE SetFocus(hWnd : HWND) : HWND;

PROCEDURE GetActiveWindow() : HWND;

PROCEDURE GetFocus() : HWND;

PROCEDURE GetKBCodePage() : UINT;

PROCEDURE GetKeyState(nVirtKey : INTEGER) : SHORT;

PROCEDURE GetAsyncKeyState(vKey : INTEGER) : SHORT;

PROCEDURE GetKeyboardState(lpKeyState : PBYTE) : BOOL;

PROCEDURE SetKeyboardState(lpKeyState : PBYTE) : BOOL;

PROCEDURE GetKeyNameTextA(lParam : LONG;
                          VAR lpString : ARRAY OF ACHAR;
                          nSize : INTEGER) : INTEGER;

PROCEDURE GetKeyNameTextW(lParam : LONG;
                          VAR lpString : ARRAY OF UCHAR;
                          nSize : INTEGER) : INTEGER;

%IF UNICODE %THEN
PROCEDURE GetKeyNameText = GetKeyNameTextW;
%ELSE
PROCEDURE GetKeyNameText = GetKeyNameTextA;
%END

PROCEDURE GetKeyboardType(nTypeFlag : INTEGER) : INTEGER;

PROCEDURE ToAscii(uVirtKey : UINT;
                  uScanCode : UINT;
                  lpKeyState : PBYTE;
                  lpChar : LPWORD;
                  uFlags : UINT) : INTEGER;


PROCEDURE ToAsciiEx(
            uVirtKey : UINT;
            uScanCode : UINT;
            lpKeyState : PBYTE;
            lpChar : LPWORD;
            uFlags : UINT;
            dwhkl : HKL) : WINT;


PROCEDURE ToUnicode(wVirtKey : UINT;
                    wScanCode : UINT;
                    lpKeyState : PBYTE;
                    VAR pwszBuff : ARRAY OF UCHAR;
                    cchBuff : INTEGER;
                    wFlags : UINT) : INTEGER;

PROCEDURE OemKeyScan(wOemChar : WORD) : DWORD;

PROCEDURE VkKeyScanA(ch : ACHAR) : SHORT;

PROCEDURE VkKeyScanW(ch : WCHAR) : SHORT;

%IF UNICODE %THEN
PROCEDURE VkKeyScan = VkKeyScanW;
%ELSE
PROCEDURE VkKeyScan = VkKeyScanA;
%END


PROCEDURE VkKeyScanExA(ch : ACHAR; dwhkl : HKL) : SHORT;

PROCEDURE VkKeyScanExW(ch : ACHAR; dwhkl : HKL) : SHORT;

%IF UNICODE %THEN
PROCEDURE VkKeyScanEx = VkKeyScanExW;
%ELSE
PROCEDURE VkKeyScanEx = VkKeyScanExA;
%END


CONST
    KEYEVENTF_EXTENDEDKEY= 00001h;
    KEYEVENTF_KEYUP      = 00002h;

PROCEDURE keybd_event(bVk : BYTE;
                      bScan : BYTE;
                      dwFlags : DWORD;
                      dwExtraInfo : ULONG_PTR);


CONST
    MOUSEEVENTF_MOVE     = 00001h;
    MOUSEEVENTF_LEFTDOWN = 00002h;
    MOUSEEVENTF_LEFTUP   = 00004h;
    MOUSEEVENTF_RIGHTDOWN= 00008h;
    MOUSEEVENTF_RIGHTUP  = 00010h;
    MOUSEEVENTF_MIDDLEDOWN= 00020h;
    MOUSEEVENTF_MIDDLEUP = 00040h;
    MOUSEEVENTF_WHEEL       = 00800h; (* wheel button rolled **)
    MOUSEEVENTF_ABSOLUTE = 08000h;

PROCEDURE mouse_event(dwFlags : DWORD;
                      dx : INTEGER;
                      dy : INTEGER;
                      cButtons : DWORD;
                      dwExtraInfo : ULONG_PTR);

TYPE
    (*NT only*)
    MOUSEINPUT = RECORD
    dx          : LONG;
    dy          : LONG;
    mouseData   : DWORD;
    dwFlags     : DWORD;
    time        : DWORD;
    dwExtraInfo : ULONG_PTR;
    END;
    PMOUSEINPUT = POINTER TO MOUSEINPUT;
    LPMOUSEINPUT = PMOUSEINPUT;

    (*NT only*)
    KEYBDINPUT = RECORD
    wVk         : WORD;
    wScan       : WORD;
    dwFlags     : DWORD;
    time        : DWORD;
    dwExtraInfo : ULONG_PTR;
    END;
    PKEYBDINPUT = POINTER TO KEYBDINPUT;
    LPKEYBDINPUT = PKEYBDINPUT;

    (*NT only*)
    HARDWAREINPUT = RECORD
    uMsg        : DWORD;
    wParamL     : WORD;
    wParamH     : WORD;
    END;
    PHARDWAREINPUT = POINTER TO HARDWAREINPUT;
    LPHARDWAREINPUT = PHARDWAREINPUT;

    (*NT only*)
    INPUT = RECORD
    type        : DWORD;

    CASE : CARDINAL OF
        0: mi : MOUSEINPUT;|
        1: ki : KEYBDINPUT;|
        2: hi : HARDWAREINPUT;
    ELSE
    END;
    END;
    PINPUT = POINTER TO INPUT;
    LPINPUT = PINPUT;

CONST
    INPUT_MOUSE     =0;
    INPUT_KEYBOARD  =1;
    INPUT_HARDWARE  =2;

PROCEDURE SendInput(cInputs : UINT;     (* number of input in the array*)
                    pInputs : ARRAY OF INPUT;     (* array of inputs*)
                    cbSize : WINT) : UINT;    (* sizeof(INPUT)*)

TYPE
    (*NT only*)
    LASTINPUTINFO = RECORD
    cbSize      : UINT;
    dwTime      : DWORD;
    END;
    PLASTINPUTINFO = POINTER TO LASTINPUTINFO;

(*NT only*)
PROCEDURE GetLastInputInfo(plii : LASTINPUTINFO) : BOOL;

PROCEDURE MapVirtualKeyA(uCode : UINT;
                         uMapType : UINT) : UINT;

PROCEDURE MapVirtualKeyW(uCode : UINT;
                         uMapType : UINT) : UINT;

%IF UNICODE %THEN
PROCEDURE MapVirtualKey = MapVirtualKeyW;
%ELSE
PROCEDURE MapVirtualKey = MapVirtualKeyA;
%END


PROCEDURE MapVirtualKeyExA(
                            uCode : UINT;
                            uMapType : UINT;
                            dwhkl : HKL) : UINT;

PROCEDURE MapVirtualKeyExW(
                            uCode : UINT;
                            uMapType : UINT;
                            dwhkl : HKL) : UINT;

%IF UNICODE %THEN
PROCEDURE MapVirtualKeyEx = MapVirtualKeyExW;
%ELSE
PROCEDURE MapVirtualKeyEx = MapVirtualKeyExA;
%END



PROCEDURE GetInputState() : BOOL;

PROCEDURE GetQueueStatus(flags : UINT) : DWORD;

PROCEDURE GetCapture() : HWND;

PROCEDURE SetCapture(hWnd : HWND) : HWND;

PROCEDURE ReleaseCapture() : BOOL;

PROCEDURE MsgWaitForMultipleObjects(nCount : DWORD;
                                    pHandles : ARRAY OF HANDLE;
                                    fWaitAll : BOOL;
                                    dwMilliseconds : DWORD;
                                    dwWakeMask : DWORD) : DWORD;


PROCEDURE MsgWaitForMultipleObjectsEx(nCount : DWORD;
                                      pHandles : ARRAY OF HANDLE;
                                      dwMilliseconds : DWORD;
                                      dwWakeMask : DWORD;
                                      dwFlags : DWORD) : DWORD;

CONST
    MWMO_WAITALL        = 0001h;
    MWMO_ALERTABLE      = 0002h;
    MWMO_INPUTAVAILABLE = 0004h;

    QS_KEY               = 001h;
    QS_MOUSEMOVE         = 002h;
    QS_MOUSEBUTTON       = 004h;
    QS_POSTMESSAGE       = 008h;
    QS_TIMER             = 010h;
    QS_PAINT             = 020h;
    QS_SENDMESSAGE       = 040h;
    QS_HOTKEY            = 080h;
    QS_ALLPOSTMESSAGE    = 0100h;

    QS_MOUSE             =  QS_MOUSEMOVE BOR QS_MOUSEBUTTON;
    QS_INPUT             =  QS_MOUSE BOR QS_KEY;
    QS_ALLEVENTS         =      QS_INPUT BOR
                                QS_POSTMESSAGE BOR
                                QS_TIMER BOR
                                QS_PAINT BOR
                                QS_HOTKEY;
    QS_ALLINPUT          =      QS_SENDMESSAGE BOR
                                QS_PAINT BOR
                                QS_TIMER BOR
                                QS_POSTMESSAGE BOR
                                QS_MOUSEBUTTON BOR
                                QS_MOUSEMOVE BOR
                                QS_HOTKEY BOR
                                QS_KEY;

PROCEDURE SetTimer(hWnd : HWND;
                   nIDEvent : UINT_PTR;
                   uElapse : UINT;
                   lpTimerFunc : TIMERPROC) : UINT_PTR;

PROCEDURE KillTimer(hWnd : HWND;
                    uIDEvent : UINT_PTR) : BOOL;

PROCEDURE IsWindowUnicode(hWnd : HWND) : BOOL;

PROCEDURE EnableWindow(hWnd : HWND;
                       bEnable : BOOL) : BOOL;

PROCEDURE IsWindowEnabled(hWnd : HWND) : BOOL;

PROCEDURE LoadAcceleratorsA(a : HINSTANCE;
                            lpTableName : ARRAY OF ACHAR) : HACCEL;

PROCEDURE LoadAcceleratorsW(a : HINSTANCE;
                            lpTableName : ARRAY OF UCHAR) : HACCEL;

%IF UNICODE %THEN
PROCEDURE LoadAccelerators = LoadAcceleratorsW;
%ELSE
PROCEDURE LoadAccelerators = LoadAcceleratorsA;
%END

PROCEDURE CreateAcceleratorTableA(a : LPACCEL;
                                  b : INTEGER) : HACCEL;

PROCEDURE CreateAcceleratorTableW(a : LPACCEL;
                                  b : INTEGER) : HACCEL;

%IF UNICODE %THEN
PROCEDURE CreateAcceleratorTable = CreateAcceleratorTableW;
%ELSE
PROCEDURE CreateAcceleratorTable = CreateAcceleratorTableA;
%END

PROCEDURE DestroyAcceleratorTable(hAccel : HACCEL) : BOOL;

PROCEDURE CopyAcceleratorTableA(hAccelSrc : HACCEL;
                                VAR lpAccelDst : ARRAY OF ACCEL;
                                cAccelEntries : INTEGER) : INTEGER;

PROCEDURE CopyAcceleratorTableW(hAccelSrc : HACCEL;
                                VAR lpAccelDst : ARRAY OF ACCEL;
                                cAccelEntries : INTEGER) : INTEGER;

%IF UNICODE %THEN
PROCEDURE CopyAcceleratorTable = CopyAcceleratorTableW;
%ELSE
PROCEDURE CopyAcceleratorTable = CopyAcceleratorTableA;
%END

PROCEDURE TranslateAcceleratorA(hWnd : HWND;
                                hAccTable : HACCEL;
                                VAR lpMsg : MSG) : INTEGER;

PROCEDURE TranslateAcceleratorW(hWnd : HWND;
                                hAccTable : HACCEL;
                                VAR lpMsg : MSG) : INTEGER;

%IF UNICODE %THEN
PROCEDURE TranslateAccelerator = TranslateAcceleratorW;
%ELSE
PROCEDURE TranslateAccelerator = TranslateAcceleratorA;
%END

CONST
    SM_CXSCREEN          = 0;
    SM_CYSCREEN          = 1;
    SM_CXVSCROLL         = 2;
    SM_CYHSCROLL         = 3;
    SM_CYCAPTION         = 4;
    SM_CXBORDER          = 5;
    SM_CYBORDER          = 6;
    SM_CXDLGFRAME        = 7;
    SM_CYDLGFRAME        = 8;
    SM_CYVTHUMB          = 9;
    SM_CXHTHUMB          = 10;
    SM_CXICON            = 11;
    SM_CYICON            = 12;
    SM_CXCURSOR          = 13;
    SM_CYCURSOR          = 14;
    SM_CYMENU            = 15;
    SM_CXFULLSCREEN      = 16;
    SM_CYFULLSCREEN      = 17;
    SM_CYKANJIWINDOW     = 18;
    SM_MOUSEPRESENT      = 19;
    SM_CYVSCROLL         = 20;
    SM_CXHSCROLL         = 21;
    SM_DEBUG             = 22;
    SM_SWAPBUTTON        = 23;
    SM_RESERVED1         = 24;
    SM_RESERVED2         = 25;
    SM_RESERVED3         = 26;
    SM_RESERVED4         = 27;
    SM_CXMIN             = 28;
    SM_CYMIN             = 29;
    SM_CXSIZE            = 30;
    SM_CYSIZE            = 31;
    SM_CXFRAME           = 32;
    SM_CYFRAME           = 33;
    SM_CXMINTRACK        = 34;
    SM_CYMINTRACK        = 35;
    SM_CXDOUBLECLK       = 36;
    SM_CYDOUBLECLK       = 37;
    SM_CXICONSPACING     = 38;
    SM_CYICONSPACING     = 39;
    SM_MENUDROPALIGNMENT = 40;
    SM_PENWINDOWS        = 41;
    SM_DBCSENABLED       = 42;
    SM_CMOUSEBUTTONS     = 43;

    SM_CXFIXEDFRAME      = SM_CXDLGFRAME;
    SM_CYFIXEDFRAME      = SM_CYDLGFRAME;
    SM_CXSIZEFRAME       = SM_CXFRAME;
    SM_CYSIZEFRAME       = SM_CYFRAME;
    SM_SECURE            = 44;
    SM_CXEDGE            = 45;
    SM_CYEDGE            = 46;
    SM_CXMINSPACING      = 47;
    SM_CYMINSPACING      = 48;
    SM_CXSMICON          = 49;
    SM_CYSMICON          = 50;
    SM_CYSMCAPTION       = 51;
    SM_CXSMSIZE          = 52;
    SM_CYSMSIZE          = 53;
    SM_CXMENUSIZE        = 54;
    SM_CYMENUSIZE        = 55;
    SM_ARRANGE           = 56;
    SM_CXMINIMIZED       = 57;
    SM_CYMINIMIZED       = 58;
    SM_CXMAXTRACK        = 59;
    SM_CYMAXTRACK        = 60;
    SM_CXMAXIMIZED       = 61;
    SM_CYMAXIMIZED       = 62;
    SM_NETWORK           = 63;
    SM_CLEANBOOT         = 67;
    SM_CXDRAG            = 68;
    SM_CYDRAG            = 69;
    SM_SHOWSOUNDS        = 70;
    SM_CXMENUCHECK       = 71;
    SM_CYMENUCHECK       = 72;
    SM_SLOWMACHINE       = 73;
    SM_MIDEASTENABLED    = 74;
    SM_MOUSEWHEELPRESENT = 75;
    SM_XVIRTUALSCREEN    = 76;
    SM_YVIRTUALSCREEN    = 77;
    SM_CXVIRTUALSCREEN   = 78;
    SM_CYVIRTUALSCREEN   = 79;
    SM_CMONITORS         = 80;
    SM_SAMEDISPLAYFORMAT = 81;
    SM_CMETRICS          = 83;
    SM_TABLETPC          = 86;

PROCEDURE GetSystemMetrics(nIndex : INTEGER) : INTEGER;

PROCEDURE LoadMenuA(a : HINSTANCE; lpMenuName : ARRAY OF ACHAR) : HMENU;

PROCEDURE LoadMenuW(a : HINSTANCE; lpMenuName : ARRAY OF UCHAR) : HMENU;

%IF UNICODE %THEN
PROCEDURE LoadMenu = LoadMenuW;
%ELSE
PROCEDURE LoadMenu = LoadMenuA;
%END

PROCEDURE LoadMenuIndirectA(VAR lpMenuTemplate : MENUTEMPLATEA) : HMENU;

PROCEDURE LoadMenuIndirectW(VAR lpMenuTemplate : MENUTEMPLATEW) : HMENU;

%IF UNICODE %THEN
PROCEDURE LoadMenuIndirect = LoadMenuIndirectW;
%ELSE
PROCEDURE LoadMenuIndirect = LoadMenuIndirectA;
%END

PROCEDURE GetMenu(hWnd : HWND) : HMENU;

PROCEDURE SetMenu(hWnd : HWND;
                  a : HMENU) : BOOL;

PROCEDURE ChangeMenuA(a : HMENU;
                      cmd : UINT;
                      lpszNewItem : ARRAY OF ACHAR;
                      cmdInsert : UINT;
                      flags : UINT) : BOOL;

PROCEDURE ChangeMenuW(a : HMENU;
                      cmd : UINT;
                      lpszNewItem : ARRAY OF UCHAR;
                      cmdInsert : UINT;
                      flags : UINT) : BOOL;

%IF UNICODE %THEN
PROCEDURE ChangeMenu = ChangeMenuW;
%ELSE
PROCEDURE ChangeMenu = ChangeMenuA;
%END

PROCEDURE HiliteMenuItem(hWnd : HWND;
                         a : HMENU;
                         uIDHiliteItem : UINT;
                         uHilite : UINT) : BOOL;

PROCEDURE GetMenuStringA(a : HMENU;
                         uIDItem : UINT;
                         VAR lpString : ARRAY OF ACHAR;
                         nMaxCount : INTEGER;
                         uFlag : UINT) : INTEGER;

PROCEDURE GetMenuStringW(a : HMENU;
                         uIDItem : UINT;
                         VAR lpString : ARRAY OF UCHAR;
                         nMaxCount : INTEGER;
                         uFlag : UINT) : INTEGER;

%IF UNICODE %THEN
PROCEDURE GetMenuString = GetMenuStringW;
%ELSE
PROCEDURE GetMenuString = GetMenuStringA;
%END

PROCEDURE GetMenuState(a : HMENU;
                       uId : UINT;
                       uFlags : UINT) : UINT;

PROCEDURE DrawMenuBar(hWnd : HWND) : BOOL;

PROCEDURE GetSystemMenu(hWnd : HWND;
                        bRevert : BOOL) : HMENU;

PROCEDURE CreateMenu() : HMENU;

PROCEDURE CreatePopupMenu() : HMENU;

PROCEDURE DestroyMenu(a : HMENU) : BOOL;

PROCEDURE CheckMenuItem(a : HMENU;
                        uIDCheckItem : UINT;
                        uCheck : UINT) : DWORD;

PROCEDURE EnableMenuItem(a : HMENU;
                         uIDEnableItem : UINT;
                         uEnable : UINT) : DWORD;

PROCEDURE GetSubMenu(a : HMENU;
                     nPos : INTEGER) : HMENU;

PROCEDURE GetMenuItemID(a : HMENU;
                        nPos : INTEGER) : UINT;

PROCEDURE GetMenuItemCount(a : HMENU) : INTEGER;

PROCEDURE InsertMenuA(a : HMENU;
                      uPosition : UINT;
                      uFlags : UINT;
                      uIDNewItem : UINT_PTR;
                      lpNewItem : ARRAY OF ACHAR) : BOOL;

PROCEDURE InsertMenuW(a : HMENU;
                      uPosition : UINT;
                      uFlags : UINT;
                      uIDNewItem : UINT_PTR;
                      lpNewItem : ARRAY OF UCHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE InsertMenu = InsertMenuW;
%ELSE
PROCEDURE InsertMenu = InsertMenuA;
%END

PROCEDURE AppendMenuA(a : HMENU;
                      uFlags : UINT;
                      uIDNewItem : UINT_PTR;
                      lpNewItem : ARRAY OF ACHAR) : BOOL;

PROCEDURE AppendMenuW(a : HMENU;
                      uFlags : UINT;
                      uIDNewItem : UINT_PTR;
                      lpNewItem : ARRAY OF UCHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE AppendMenu = AppendMenuW;
%ELSE
PROCEDURE AppendMenu = AppendMenuA;
%END

PROCEDURE ModifyMenuA(hMnu : HMENU;
                      uPosition : UINT;
                      uFlags : UINT;
                      uIDNewItem : UINT_PTR;
                      lpNewItem : ARRAY OF ACHAR) : BOOL;

PROCEDURE ModifyMenuW(hMnu : HMENU;
                      uPosition : UINT;
                      uFlags : UINT;
                      uIDNewItem : UINT_PTR;
                      lpNewItem : ARRAY OF UCHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE ModifyMenu = ModifyMenuW;
%ELSE
PROCEDURE ModifyMenu = ModifyMenuA;
%END

PROCEDURE RemoveMenu(a : HMENU;
                     uPosition : UINT;
                     uFlags : UINT) : BOOL;

PROCEDURE DeleteMenu(a : HMENU;
                     uPosition : UINT;
                     uFlags : UINT) : BOOL;

PROCEDURE SetMenuItemBitmaps(a : HMENU;
                             uPosition : UINT;
                             uFlags : UINT;
                             hBitmapUnchecked : HBITMAP;
                             hBitmapChecked : HBITMAP) : BOOL;

PROCEDURE GetMenuCheckMarkDimensions() : LONG;

PROCEDURE TrackPopupMenu(a : HMENU;
                         uFlags : UINT;
                         x : INTEGER;
                         y : INTEGER;
                         nReserved : INTEGER;
                         hWnd : HWND;
                         prcRect : RECT) : BOOL;


CONST
    MNC_IGNORE  = 0;
    MNC_CLOSE   = 1;
    MNC_EXECUTE = 2;
    MNC_SELECT  = 3;

TYPE
    TPMPARAMS = RECORD
        cbSize          : UINT;
        rcExclude       : RECT;
    END;
    LPTPMPARAMS = POINTER TO TPMPARAMS;

PROCEDURE TrackPopupMenuEx(a: HMENU;
                           b: UINT;
                           c: WINT;
                           d: WINT;
                           e: HWND;
                           VAR f: TPMPARAMS) : BOOL;

CONST
    MNS_NOCHECK         = 80000000h;
    MNS_MODELESS        = 40000000h;
    MNS_DRAGDROP        = 20000000h;
    MNS_AUTODISMISS     = 10000000h;
    MNS_NOTIFYBYPOS     = 08000000h;
    MNS_CHECKORBMP      = 04000000h;

    MIM_MAXHEIGHT               = 00000001h;
    MIM_BACKGROUND              = 00000002h;
    MIM_HELPID                  = 00000004h;
    MIM_MENUDATA                =00000008h;
    MIM_STYLE                   = 00000010h;
    MIM_APPLYTOSUBMENUS         = 80000000h;

TYPE
    MENUINFO = RECORD
    cbSize      : DWORD;
    fMask       : DWORD;
    dwStyle     : DWORD;
    cyMax       : UINT;
    hbrBack     : HBRUSH;
    dwContextHelpID : DWORD;
    dwMenuData : ULONG_PTR;
    END;
    LPMENUINFO = POINTER TO MENUINFO;
    LPCMENUINFO = LPMENUINFO;

PROCEDURE GetMenuInfo(a : HMENU; VAR b : MENUINFO) : BOOL;

PROCEDURE SetMenuInfo(a : HMENU; b : MENUINFO);

PROCEDURE EndMenu() : BOOL;

(*
 * WM_MENUDRAG return values.
 *)
CONST
    MND_CONTINUE       =0;
    MND_ENDMENU        =1;

TYPE
    MENUGETOBJECTINFO = RECORD
    dwFlags : DWORD;
    uPos : UINT;
    hmenu : HMENU;
    riid : PVOID;
    pvObj : PVOID;
    END;
    PMENUGETOBJECTINFO = POINTER TO MENUGETOBJECTINFO;

(*
 * MENUGETOBJECTINFO dwFlags values
 *)

CONST
    MNGOF_GAP            = 00000003h;

(*
 * WM_MENUGETOBJECT return values
 *)
    MNGO_NOINTERFACE     = 00000000h;
    MNGO_NOERROR         = 00000001h;

CONST
    MIIM_STATE       = 000000001h;
    MIIM_ID          = 000000002h;
    MIIM_SUBMENU     = 000000004h;
    MIIM_CHECKMARKS  = 000000008h;
    MIIM_TYPE        = 000000010h;
    MIIM_DATA        = 000000020h;

    MIIM_STRING      = 00000040h;
    MIIM_BITMAP      = 00000080h;
    MIIM_FTYPE       = 00000100h;

    HBMMENU_CALLBACK            =CAST(HBITMAP, -1);
    HBMMENU_SYSTEM              =CAST(HBITMAP,  1);
    HBMMENU_MBAR_RESTORE        =CAST(HBITMAP,  2);
    HBMMENU_MBAR_MINIMIZE       =CAST(HBITMAP,  3);
    HBMMENU_MBAR_CLOSE          =CAST(HBITMAP,  5);
    HBMMENU_MBAR_CLOSE_D        =CAST(HBITMAP,  6);
    HBMMENU_MBAR_MINIMIZE_D     =CAST(HBITMAP,  7);
    HBMMENU_POPUP_CLOSE         =CAST(HBITMAP,  8);
    HBMMENU_POPUP_RESTORE       =CAST(HBITMAP,  9);
    HBMMENU_POPUP_MAXIMIZE      =CAST(HBITMAP, 10);
    HBMMENU_POPUP_MINIMIZE      =CAST(HBITMAP, 11);

TYPE
    MENUITEMINFOA = RECORD
        cbSize          : UINT;
        fMask           : UINT;
        fType           : UINT;
        fState          : UINT;
        wID             : UINT;
        hSubMenu        : HMENU;
        hbmpChecked     : HBITMAP;
        hbmpUnchecked   : HBITMAP;
        dwItemData      : ULONG_PTR;
        dwTypeData      : LPSTR;
        cch             : UINT;
        (*NT only*)
        hbmpItem        : HBITMAP; (* used if MIIM_BITMAP*)
    END;
    LPMENUITEMINFOA     = POINTER TO MENUITEMINFOA;
    LPCMENUITEMINFOA    = LPMENUITEMINFOA;

    MENUITEMINFOW = RECORD
        cbSize          : UINT;
        fMask           : UINT;
        fType           : UINT;
        fState          : UINT;
        wID             : UINT;
        hSubMenu        : HMENU;
        hbmpChecked     : HBITMAP;
        hbmpUnchecked   : HBITMAP;
        dwItemData      : ULONG_PTR;
        dwTypeData      : LPWSTR;
        cch             : UINT;
        (*NT only*)
        hbmpItem        : HBITMAP; (* used if MIIM_BITMAP*)
    END;
    LPMENUITEMINFOW     = POINTER TO MENUITEMINFOW;
    LPCMENUITEMINFOW    = LPMENUITEMINFOW;

%IF UNICODE %THEN
    MENUITEMINFO        = MENUITEMINFOW;
    LPMENUITEMINFO      = LPMENUITEMINFOW;
%ELSE
    MENUITEMINFO        = MENUITEMINFOA;
    LPMENUITEMINFO      = LPMENUITEMINFOA;
%END
    LPCMENUITEMINFO     = LPMENUITEMINFO;

PROCEDURE InsertMenuItemA(
                        a: HMENU;
                        b: UINT;
                        c: BOOL;
                        d: MENUITEMINFOA
                        ) : BOOL;

PROCEDURE InsertMenuItemW(
                        a: HMENU;
                        b: UINT;
                        c: BOOL;
                        d: MENUITEMINFOW
                        ) : BOOL;

%IF UNICODE %THEN
PROCEDURE InsertMenuItem = InsertMenuItemW;
%ELSE
PROCEDURE InsertMenuItem = InsertMenuItemA;
%END

PROCEDURE GetMenuItemInfoA(
                            a: HMENU;
                            b: UINT;
                            c: BOOL;
                            VAR d: MENUITEMINFOA
                            ) : BOOL;

PROCEDURE GetMenuItemInfoW(
                            a: HMENU;
                            b: UINT;
                            c: BOOL;
                            VAR d: MENUITEMINFOW
                            ) : BOOL;

%IF UNICODE %THEN
PROCEDURE GetMenuItemInfo = GetMenuItemInfoW;
%ELSE
PROCEDURE GetMenuItemInfo = GetMenuItemInfoA;
%END

PROCEDURE SetMenuItemInfoA(
                            a: HMENU;
                            b: UINT;
                            c: BOOL;
                            d: MENUITEMINFOA
                            ) : BOOL;

PROCEDURE SetMenuItemInfoW(
                            a: HMENU;
                            b: UINT;
                            c: BOOL;
                            d: MENUITEMINFOW
                            ) : BOOL;

%IF UNICODE %THEN
PROCEDURE SetMenuItemInfo = SetMenuItemInfoW;
%ELSE
PROCEDURE SetMenuItemInfo = SetMenuItemInfoA;
%END

CONST
    GMDI_USEDISABLED    = 00001h;
    GMDI_GOINTOPOPUPS   = 00002h;

PROCEDURE GetMenuDefaultItem(hMenu : HMENU;
                             fByPos : UINT;
                             gmdiFlags : UINT) : UINT;

PROCEDURE SetMenuDefaultItem(hMenu : HMENU;
                             uItem : UINT;
                             fByPos :  UINT) : BOOL;

PROCEDURE GetMenuItemRect(hWnd : HWND;
                          hMenu : HWND;
                          uItem : UINT;
                          VAR lprcItem : RECT ) : BOOL;

PROCEDURE MenuItemFromPoint(hWnd : HWND;
                            hMenu : HMENU;
                            ptScreen : VALUE POINT) : WINT;


CONST
    TPM_LEFTBUTTON       = 00000h;
    TPM_RIGHTBUTTON      = 00002h;
    TPM_LEFTALIGN        = 00000h;
    TPM_CENTERALIGN      = 00004h;
    TPM_RIGHTALIGN       = 00008h;

    TPM_TOPALIGN        = 0000h;
    TPM_VCENTERALIGN    = 0010h;
    TPM_BOTTOMALIGN     = 0020h;

    TPM_HORIZONTAL      = 0000h;
    TPM_VERTICAL        = 0040h;
    TPM_NONOTIFY        = 0080h;
    TPM_RETURNCMD       = 0100h;

    TPM_RECURSE         = 0001h;

TYPE
    DROPSTRUCT = RECORD
        hwndSource      : HWND;
        hwndSink        : HWND;
        wFmt            : DWORD;
        dwData          : ULONG_PTR;
        ptDrop          : POINT;
        dwControlData   : DWORD;
    END;
    PDROPSTRUCT         = POINTER TO DROPSTRUCT;
    LPDROPSTRUCT        = PDROPSTRUCT;

CONST
    DOF_EXECUTABLE      = 8001h;
    DOF_DOCUMENT        = 8002h;
    DOF_DIRECTORY       = 8003h;
    DOF_MULTIPLE        = 8004h;
    DOF_PROGMAN         = 0001h;
    DOF_SHELLDATA       = 0002h;

    DO_DROPFILE         = 454C4946h;
    DO_PRINTFILE        = 544E5250h;

PROCEDURE DragObject(a: HWND;
                     b: HWND;
                     c: UINT;
                     d: ULONG_PTR;
                     e: HCURSOR) : DWORD;

PROCEDURE DragDetect(a: HWND; b: VALUE POINT) : BOOL;


PROCEDURE DrawIcon(hDC : HDC;
                   X : INTEGER;
                   Y : INTEGER;
                   hIcon : HICON) : BOOL;


CONST
    DT_TOP               = 00000h;
    DT_LEFT              = 00000h;
    DT_CENTER            = 00001h;
    DT_RIGHT             = 00002h;
    DT_VCENTER           = 00004h;
    DT_BOTTOM            = 00008h;
    DT_WORDBREAK         = 00010h;
    DT_SINGLELINE        = 00020h;
    DT_EXPANDTABS        = 00040h;
    DT_TABSTOP           = 00080h;
    DT_NOCLIP            = 00100h;
    DT_EXTERNALLEADING   = 00200h;
    DT_CALCRECT          = 00400h;
    DT_NOPREFIX          = 00800h;
    DT_INTERNAL          = 01000h;

    DT_EDITCONTROL       = 00002000h;
    DT_PATH_ELLIPSIS     = 00004000h;
    DT_END_ELLIPSIS      = 00008000h;
    DT_MODIFYSTRING      = 00010000h;
    DT_RTLREADING        = 00020000h;
    DT_WORD_ELLIPSIS     = 00040000h;

TYPE
    DRAWTEXTPARAMS = RECORD
        cbSize          : UINT;
        iTabLength      : WINT;
        iLeftMargin     : WINT;
        iRightMargin    : WINT;
        uiLengthDrawn   : UINT;
    END;
    LPDRAWTEXTPARAMS    = POINTER TO DRAWTEXTPARAMS;


PROCEDURE DrawTextA(hDC : HDC;
                    lpString : ARRAY OF ACHAR;
                    nCount : INTEGER;
                    lpRect : RECT;
                    uFormat : UINT) : INTEGER;

PROCEDURE DrawTextW(hDC : HDC;
                    lpString : ARRAY OF UCHAR;
                    nCount : INTEGER;
                    lpRect : RECT;
                    uFormat : UINT) : INTEGER;

%IF UNICODE %THEN
PROCEDURE DrawText = DrawTextW;
%ELSE
PROCEDURE DrawText = DrawTextA;
%END


PROCEDURE DrawTextExA(a: HDC;
                      b: ARRAY OF ACHAR;
                      c: WINT;
                      d: RECT;
                      e: UINT;
                      VAR f: DRAWTEXTPARAMS) : WINT;

PROCEDURE DrawTextExW(a: HDC;
                      b: ARRAY OF UCHAR;
                      c: WINT;
                      d: RECT;
                      e: UINT;
                      VAR f: DRAWTEXTPARAMS) : WINT;
%IF UNICODE %THEN
PROCEDURE DrawTextEx = DrawTextExW;
%ELSE
PROCEDURE DrawTextEx = DrawTextExA;
%END



PROCEDURE GrayStringA(hDC : HDC;
                      hBrush : HBRUSH;
                      lpOutputFunc : GRAYSTRINGPROC;
                      lpData : LPARAM;
                      nCount : INTEGER;
                      X : INTEGER;
                      Y : INTEGER;
                      nWidth : INTEGER;
                      nHeight : INTEGER) : BOOL;

PROCEDURE GrayStringW(hDC : HDC;
                      hBrush : HBRUSH;
                      lpOutputFunc : GRAYSTRINGPROC;
                      lpData : LPARAM;
                      nCount : INTEGER;
                      X : INTEGER;
                      Y : INTEGER;
                      nWidth : INTEGER;
                      nHeight : INTEGER) : BOOL;

%IF UNICODE %THEN
PROCEDURE GrayString = GrayStringW;
%ELSE
PROCEDURE GrayString = GrayStringA;
%END

CONST
    DST_COMPLEX     = 0000h;
    DST_TEXT        = 0001h;
    DST_PREFIXTEXT  = 0002h;
    DST_ICON        = 0003h;
    DST_BITMAP      = 0004h;

    DSS_NORMAL      = 0000h;
    DSS_UNION       = 0010h;
    DSS_DISABLED    = 0020h;
    DSS_MONO        = 0080h;
    DSS_RIGHT       = 8000h;

PROCEDURE DrawStateA(a: HDC;
                     b: HBRUSH;
                     c: DRAWSTATEPROC;
                     d: LPARAM;
                     e: WPARAM;
                     f: WINT;
                     g: WINT;
                     h: WINT;
                     i: WINT;
                     j: UINT) : BOOL;

PROCEDURE DrawStateW(a: HDC;
                     b: HBRUSH;
                     c: DRAWSTATEPROC;
                     d: LPARAM;
                     e: WPARAM;
                     f: WINT;
                     g: WINT;
                     h: WINT;
                     i: WINT;
                     j: UINT) : BOOL;

%IF UNICODE %THEN
PROCEDURE DrawState = DrawStateW;
%ELSE
PROCEDURE DrawState = DrawStateA;
%END

PROCEDURE TabbedTextOutA(hDC : HDC;
                         X : INTEGER;
                         Y : INTEGER;
                         lpString : ARRAY OF ACHAR;
                         nCount : INTEGER;
                         nTabPositions : INTEGER;
                         lpnTabStopPositions : ARRAY OF WINT;
                         nTabOrigin : INTEGER) : LONG;

PROCEDURE TabbedTextOutW(hDC : HDC;
                         X : INTEGER;
                         Y : INTEGER;
                         lpString : ARRAY OF UCHAR;
                         nCount : INTEGER;
                         nTabPositions : INTEGER;
                         lpnTabStopPositions : ARRAY OF WINT;
                         nTabOrigin : INTEGER) : LONG;

%IF UNICODE %THEN
PROCEDURE TabbedTextOut = TabbedTextOutW;
%ELSE
PROCEDURE TabbedTextOut = TabbedTextOutA;
%END

PROCEDURE GetTabbedTextExtentA(hDC : HDC;
                               lpString : ARRAY OF ACHAR;
                               nCount : INTEGER;
                               nTabPositions : INTEGER;
                               lpnTabStopPositions : ARRAY OF WINT) : DWORD;

PROCEDURE GetTabbedTextExtentW(hDC : HDC;
                               lpString : ARRAY OF UCHAR;
                               nCount : INTEGER;
                               nTabPositions : INTEGER;
                               lpnTabStopPositions : ARRAY OF WINT) : DWORD;

%IF UNICODE %THEN
PROCEDURE GetTabbedTextExtent = GetTabbedTextExtentW;
%ELSE
PROCEDURE GetTabbedTextExtent = GetTabbedTextExtentA;
%END

PROCEDURE UpdateWindow(hWnd : HWND) : BOOL;

PROCEDURE SetActiveWindow(hWnd : HWND) : HWND;

PROCEDURE GetForegroundWindow() : HWND;


PROCEDURE PaintDesktop(hdc : HDC) : BOOL;

PROCEDURE SwitchToThisWindow(hwnd : HWND; fUnknown : BOOL);


PROCEDURE SetForegroundWindow(hWnd : HWND) : BOOL;

PROCEDURE WindowFromDC(hDC : HDC) : HWND;

PROCEDURE GetDC(hWnd : HWND) : HDC;

PROCEDURE GetDCEx(hWnd : HWND;
                  hrgnClip : HRGN;
                  flags : DWORD) : HDC;


CONST
    DCX_WINDOW           = 000000001h;
    DCX_CACHE            = 000000002h;
    DCX_NORESETATTRS     = 000000004h;
    DCX_CLIPCHILDREN     = 000000008h;
    DCX_CLIPSIBLINGS     = 000000010h;
    DCX_PARENTCLIP       = 000000020h;
    DCX_EXCLUDERGN       = 000000040h;
    DCX_INTERSECTRGN     = 000000080h;
    DCX_EXCLUDEUPDATE    = 000000100h;
    DCX_INTERSECTUPDATE  = 000000200h;
    DCX_LOCKWINDOWUPDATE = 000000400h;
    DCX_NORECOMPUTE      = 000100000h;
    DCX_VALIDATE         = 000200000h;

PROCEDURE AlignRects(arc : RECT;
                     cCount : DWORD;
                     iPrimary : DWORD;
                     dwFlags : DWORD) : BOOL;

(*
 AlignRects flags
*)
CONST
    CUDR_NORMAL             =00000h;
    CUDR_NOSNAPTOGRID       =00001h;
    CUDR_NORESOLVEPOSITIONS =00002h;
    CUDR_NOCLOSEGAPS        =00004h;
    CUDR_NEGATIVECOORDS     =00008h;
    CUDR_NOPRIMARY          =00010h;

PROCEDURE GetWindowDC(hWnd : HWND) : HDC;

PROCEDURE ReleaseDC(hWnd : HWND;
                    hDC : HDC) : INTEGER;

PROCEDURE BeginPaint(hWnd : HWND;
                     VAR OUT lpPaint : PAINTSTRUCT) : HDC;

PROCEDURE EndPaint(hWnd : HWND;
                   VAR INOUT lpPaint : PAINTSTRUCT) : BOOL;

PROCEDURE GetUpdateRect(hWnd : HWND;
                        VAR LPRect : RECT;
                        bErase : BOOL) : BOOL;

PROCEDURE GetUpdateRgn(hWnd : HWND;
                       hRgn : HRGN;
                       bErase : BOOL) : INTEGER;

PROCEDURE SetWindowRgn(hWnd : HWND;
                       hRgn : HRGN;
                       bRedraw : BOOL) : WINT;

PROCEDURE GetWindowRgn(hWnd : HWND;
                       hRgn : HRGN) : WINT;

PROCEDURE ExcludeUpdateRgn(hDC : HDC;
                           hWnd : HWND) : INTEGER;

PROCEDURE InvalidateRect(hWnd : HWND;
                         lpRect : RECT;
                         bErase : BOOL) : BOOL;

PROCEDURE ValidateRect(hWnd : HWND;
                       lpRect : RECT) : BOOL;

PROCEDURE InvalidateRgn(hWnd : HWND;
                        hRgn : HRGN;
                        bErase : BOOL) : BOOL;

PROCEDURE ValidateRgn(hWnd : HWND;
                      hRgn : HRGN) : BOOL;

PROCEDURE RedrawWindow(hWnd : HWND;
                       lprcUpdate : RECT;
                       hrgnUpdate : HRGN;
                       flags : UINT) : BOOL;


CONST
    RDW_INVALIDATE       = 00001h;
    RDW_INTERNALPAINT    = 00002h;
    RDW_ERASE            = 00004h;
    RDW_VALIDATE         = 00008h;
    RDW_NOINTERNALPAINT  = 00010h;
    RDW_NOERASE          = 00020h;
    RDW_NOCHILDREN       = 00040h;
    RDW_ALLCHILDREN      = 00080h;
    RDW_UPDATENOW        = 00100h;
    RDW_ERASENOW         = 00200h;
    RDW_FRAME            = 00400h;
    RDW_NOFRAME          = 00800h;

PROCEDURE LockWindowUpdate(hWndLock : HWND) : BOOL;

PROCEDURE ScrollWindow(hWnd : HWND;
                       XAmount : INTEGER;
                       YAmount : INTEGER;
                       lpRect : RECT;
                       lpClipRect : RECT) : BOOL;

PROCEDURE ScrollDC(hDC : HDC;
                   dx : INTEGER;
                   dy : INTEGER;
                   lprcScroll : RECT;
                   lprcClip : RECT;
                   hrgnUpdate : HRGN;
                   VAR lprcUpdate : RECT) : BOOL;

PROCEDURE ScrollWindowEx(hWnd : HWND;
                         dx : INTEGER;
                         dy : INTEGER;
                         prcScroll : RECT;
                         prcClip : RECT;
                         hrgnUpdate : HRGN;
                         VAR prcUpdate : RECT;
                         flags : UINT) : INTEGER;


CONST
    SW_SCROLLCHILDREN    = 00001h;
    SW_INVALIDATE        = 00002h;
    SW_ERASE             = 00004h;
    SW_SMOOTHSCROLL     = 0010h;  (* Use smooth scrolling *)

PROCEDURE SetScrollPos(hWnd : HWND;
                       nBar : INTEGER;
                       nPos : INTEGER;
                       bRedraw : BOOL) : INTEGER;

PROCEDURE GetScrollPos(hWnd : HWND;
                       nBar : INTEGER) : INTEGER;

PROCEDURE SetScrollRange(hWnd : HWND;
                         nBar : INTEGER;
                         nMinPos : INTEGER;
                         nMaxPos : INTEGER;
                         bRedraw : BOOL) : BOOL;

PROCEDURE GetScrollRange(hWnd : HWND;
                         nBar : INTEGER;
                         VAR lpMinPos : WINT;
                         VAR lpMaxPos : WINT) : BOOL;

PROCEDURE ShowScrollBar(hWnd : HWND;
                        wBar : INTEGER;
                        bShow : BOOL) : BOOL;

PROCEDURE EnableScrollBar(hWnd : HWND;
                          wSBflags : UINT;
                          wArrows : UINT) : BOOL;


CONST
    ESB_ENABLE_BOTH      = 00000h;
    ESB_DISABLE_BOTH     = 00003h;
    ESB_DISABLE_LEFT     = 00001h;
    ESB_DISABLE_RIGHT    = 00002h;
    ESB_DISABLE_UP       = 00001h;
    ESB_DISABLE_DOWN     = 00002h;
    ESB_DISABLE_LTUP     = ESB_DISABLE_LEFT;
    ESB_DISABLE_RTDN     = ESB_DISABLE_RIGHT;


PROCEDURE SetPropA(hWnd : HWND;
                   lpString : ARRAY OF ACHAR;
                   hData : HANDLE) : BOOL;

PROCEDURE SetPropW(hWnd : HWND;
                   lpString : ARRAY OF UCHAR;
                   hData : HANDLE) : BOOL;

%IF UNICODE %THEN
PROCEDURE SetProp = SetPropW;
%ELSE
PROCEDURE SetProp = SetPropA;
%END


PROCEDURE GetPropA(hWnd : HWND;
                   lpString : ARRAY OF ACHAR) : HANDLE;

PROCEDURE GetPropW(hWnd : HWND;
                   lpString : ARRAY OF UCHAR) : HANDLE;

%IF UNICODE %THEN
PROCEDURE GetProp = GetPropW;
%ELSE
PROCEDURE GetProp = GetPropA;
%END

PROCEDURE RemovePropA(hWnd : HWND;
                      lpString : ARRAY OF ACHAR) : HANDLE;

PROCEDURE RemovePropW(hWnd : HWND;
                      lpString : ARRAY OF UCHAR) : HANDLE;

%IF UNICODE %THEN
PROCEDURE RemoveProp = RemovePropW;
%ELSE
PROCEDURE RemoveProp = RemovePropA;
%END

PROCEDURE EnumPropsExA(hWnd : HWND;
                       lpEnumFunc : PROPENUMPROCEXA;
                       lParam : LPARAM) : INTEGER;

PROCEDURE EnumPropsExW(hWnd : HWND;
                       lpEnumFunc : PROPENUMPROCEXW;
                       lParam : LPARAM) : INTEGER;

%IF UNICODE %THEN
PROCEDURE EnumPropsEx = EnumPropsExW;
%ELSE
PROCEDURE EnumPropsEx = EnumPropsExA;
%END

PROCEDURE EnumPropsA(hWnd : HWND;
                     lpEnumFunc : PROPENUMPROCA) : INTEGER;

PROCEDURE EnumPropsW(hWnd : HWND;
                     lpEnumFunc : PROPENUMPROCW) : INTEGER;

%IF UNICODE %THEN
PROCEDURE EnumProps = EnumPropsW;
%ELSE
PROCEDURE EnumProps = EnumPropsA;
%END

PROCEDURE SetWindowTextA(hWnd : HWND;
                         lpString : ARRAY OF ACHAR) : BOOL;

PROCEDURE SetWindowTextW(hWnd : HWND;
                         lpString : ARRAY OF UCHAR) : BOOL;

%IF UNICODE %THEN
PROCEDURE SetWindowText = SetWindowTextW;
%ELSE
PROCEDURE SetWindowText = SetWindowTextA;
%END

PROCEDURE GetWindowTextA(hWnd : HWND;
                         VAR lpString : ARRAY OF ACHAR;
                         nMaxCount : INTEGER) : INTEGER;

PROCEDURE GetWindowTextW(hWnd : HWND;
                         VAR lpString : ARRAY OF UCHAR;
                         nMaxCount : INTEGER) : INTEGER;

%IF UNICODE %THEN
PROCEDURE GetWindowText = GetWindowTextW;
%ELSE
PROCEDURE GetWindowText = GetWindowTextA;
%END

PROCEDURE GetWindowTextLengthA(hWnd : HWND) : INTEGER;

PROCEDURE GetWindowTextLengthW(hWnd : HWND) : INTEGER;

%IF UNICODE %THEN
PROCEDURE GetWindowTextLength = GetWindowTextLengthW;
%ELSE
PROCEDURE GetWindowTextLength = GetWindowTextLengthA;
%END

PROCEDURE GetClientRect(hWnd : HWND;
                        VAR lpRect : RECT) : BOOL;

PROCEDURE GetWindowRect(hWnd : HWND;
                        VAR lpRect : RECT) : BOOL;

PROCEDURE AdjustWindowRect(VAR lpRect : RECT;
                           dwStyle : DWORD;
                           bMenu : BOOL) : BOOL;

PROCEDURE AdjustWindowRectEx(VAR lpRect : RECT;
                             dwStyle : DWORD;
                             bMenu : BOOL;
                             dwExStyle : DWORD) : BOOL;

CONST
    HELPINFO_WINDOW    = 1;
    HELPINFO_MENUITEM  = 2;

TYPE
    HELPINFO = RECORD
        cbSize  : UINT;
        iContextType: WINT;
        iCtrlId : WINT;
        hItemHandle     : HANDLE;
        dwContextId     : DWORD_PTR;
        MousePos        : POINT;
    END;
    LPHELPINFO = POINTER TO HELPINFO;

PROCEDURE SetWindowContextHelpId(a: HWND; b: DWORD) : BOOL;

PROCEDURE GetWindowContextHelpId(a: HWND) : DWORD;

PROCEDURE SetMenuContextHelpId(a: HMENU; b: DWORD) : BOOL;

PROCEDURE GetMenuContextHelpId(a: HMENU) : DWORD;


CONST
    MB_OK                = 000000000h;
    MB_OKCANCEL          = 000000001h;
    MB_ABORTRETRYIGNORE  = 000000002h;
    MB_YESNOCANCEL       = 000000003h;
    MB_YESNO             = 000000004h;
    MB_RETRYCANCEL       = 000000005h;
    MB_ICONHAND          = 000000010h;
    MB_ICONSTOP          = MB_ICONHAND;
    MB_ICONQUESTION      = 000000020h;
    MB_ICONEXCLAMATION   = 000000030h;
    MB_ICONASTERISK      = 000000040h;

    MB_ICONWARNING       = MB_ICONEXCLAMATION;
    MB_ICONERROR         = MB_ICONHAND;

    MB_ICONINFORMATION   = MB_ICONASTERISK;

    MB_DEFBUTTON1        = 000000000h;
    MB_DEFBUTTON2        = 000000100h;
    MB_DEFBUTTON3        = 000000200h;
    MB_DEFBUTTON4        = 000000300h;(*95*)

    MB_APPLMODAL         = 000000000h;
    MB_SYSTEMMODAL       = 000001000h;
    MB_TASKMODAL         = 000002000h;

    MB_HELP              = 000004000h;
    MB_RIGHT             = 000080000h;
    MB_RTLREADING        = 000100000h;


    MB_NOFOCUS                  = 000008000h;
    MB_SETFOREGROUND            = 000010000h;
    MB_DEFAULT_DESKTOP_ONLY     = 000020000h;
    MB_TOPMOST                  = 000040000h;

    MB_SERVICE_NOTIFICATION     = 00200000h;(*NT*)
    MB_SERVICE_NOTIFICATION_NT3X= 00040000h;(*NT*)

    MB_TYPEMASK          = 00000000Fh;
    MB_USERICON          = 000000080h;(*95*)

    MB_ICONMASK          = 0000000F0h;
    MB_DEFMASK           = 000000F00h;
    MB_MODEMASK          = 000003000h;
    MB_MISCMASK          = 00000C000h;

PROCEDURE MessageBoxA(hWnd : HWND;
                      lpText : ARRAY OF ACHAR;
                      lpCaption : ARRAY OF ACHAR;
                      uType : UINT) : INTEGER;

PROCEDURE MessageBoxW(hWnd : HWND;
                      lpText : ARRAY OF UCHAR;
                      lpCaption : ARRAY OF UCHAR;
                      uType : UINT) : INTEGER;

%IF UNICODE %THEN
PROCEDURE MessageBox = MessageBoxW;
%ELSE
PROCEDURE MessageBox = MessageBoxA;
%END

PROCEDURE MessageBoxExA(hWnd : HWND;
                        lpText : ARRAY OF ACHAR;
                        lpCaption : ARRAY OF ACHAR;
                        uType : UINT;
                        wLanguageId : WORD) : INTEGER;

PROCEDURE MessageBoxExW(hWnd : HWND;
                        lpText : ARRAY OF UCHAR;
                        lpCaption : ARRAY OF UCHAR;
                        uType : UINT;
                        wLanguageId : WORD) : INTEGER;

%IF UNICODE %THEN
PROCEDURE MessageBoxEx = MessageBoxExW;
%ELSE
PROCEDURE MessageBoxEx = MessageBoxExA;
%END

TYPE
    MSGBOXCALLBACK      = PROCEDURE(VAR HELPINFO) [EXPORT];

    MSGBOXPARAMSA = RECORD
        cbSize          : UINT;
        hwndOwner       : HWND;
        hInstance       : HINSTANCE;
        lpszText        : LPCSTR;
        lpszCaption     : LPCSTR;
        dwStyle         : DWORD;
        lpszIcon        : LPCSTR;
        dwContextHelpId : DWORD_PTR;
        lpfnMsgBoxCallback : MSGBOXCALLBACK;
        dwLanguageId    : DWORD;
    END;
    PMSGBOXPARAMSA   = POINTER TO MSGBOXPARAMSA;
    LPMSGBOXPARAMSA  = PMSGBOXPARAMSA;

    MSGBOXPARAMSW = RECORD
        cbSize          : UINT;
        hwndOwner       : HWND;
        hInstance       : HINSTANCE;
        lpszText        : LPCWSTR;
        lpszCaption     : LPCWSTR;
        dwStyle         : DWORD;
        lpszIcon        : LPCWSTR;
        dwContextHelpId : DWORD_PTR;
        lpfnMsgBoxCallback : MSGBOXCALLBACK;
        dwLanguageId    : DWORD;
    END;
    PMSGBOXPARAMSW   = POINTER TO MSGBOXPARAMSW;
    LPMSGBOXPARAMSW  = PMSGBOXPARAMSW;

%IF UNICODE %THEN
    MSGBOXPARAMS   = MSGBOXPARAMSW;
    PMSGBOXPARAMS   = PMSGBOXPARAMSW;
%ELSE
    MSGBOXPARAMS   = MSGBOXPARAMSA;
    PMSGBOXPARAMS   = PMSGBOXPARAMSA;
%END
    LPMSGBOXPARAMS  = PMSGBOXPARAMS;

PROCEDURE MessageBoxIndirectA(VAR a: MSGBOXPARAMSA) : WINT;

PROCEDURE MessageBoxIndirectW(VAR a: MSGBOXPARAMSW) : WINT;

%IF UNICODE %THEN
PROCEDURE MessageBoxIndirect = MessageBoxIndirectW;
%ELSE
PROCEDURE MessageBoxIndirect = MessageBoxIndirectA;
%END

PROCEDURE MessageBeep(uType : UINT) : BOOL;

PROCEDURE ShowCursor(bShow : BOOL) : INTEGER;

PROCEDURE SetCursorPos(X : INTEGER;
                       Y : INTEGER) : BOOL;

PROCEDURE SetCursor(hCursor : HCURSOR) : HCURSOR;

PROCEDURE GetCursorPos(VAR lpPoint : POINT) : BOOL;

PROCEDURE ClipCursor(lpRect : RECT) : BOOL;

PROCEDURE GetClipCursor(VAR lpRect : RECT) : BOOL;

PROCEDURE GetCursor() : HCURSOR;

PROCEDURE CreateCaret(hWnd : HWND;
                      hBitmap : HBITMAP;
                      nWidth : INTEGER;
                      nHeight : INTEGER) : BOOL;

PROCEDURE GetCaretBlinkTime() : UINT;

PROCEDURE SetCaretBlinkTime(uMSeconds : UINT) : BOOL;

PROCEDURE DestroyCaret() : BOOL;

PROCEDURE HideCaret(hWnd : HWND) : BOOL;

PROCEDURE ShowCaret(hWnd : HWND) : BOOL;

PROCEDURE SetCaretPos(X : INTEGER;
                      Y : INTEGER) : BOOL;

PROCEDURE GetCaretPos(VAR lpPoint : POINT) : BOOL;

PROCEDURE ClientToScreen(hWnd : HWND;
                         VAR lpPoint : POINT) : BOOL;

PROCEDURE ScreenToClient(hWnd : HWND;
                         VAR lpPoint : POINT) : BOOL;

PROCEDURE MapWindowPoints(hWndFrom : HWND;
                          hWndTo : HWND;
                          VAR lpPoints : ARRAY OF POINT;
                          cPoints : UINT) : INTEGER;

PROCEDURE WindowFromPoint(Point : VALUE POINT) : HWND;

PROCEDURE ChildWindowFromPoint(hWndParent : HWND;
                               Point : VALUE POINT) : HWND;


CONST
    CWP_ALL             = 0000h;
    CWP_SKIPINVISIBLE   = 0001h;
    CWP_SKIPDISABLED    = 0002h;
    CWP_SKIPTRANSPARENT = 0004h;

PROCEDURE ChildWindowFromPointEx(a: HWND; b: VALUE POINT; c: UINT) : HWND;




CONST
    CTLCOLOR_MSGBOX      = 0;
    CTLCOLOR_EDIT        = 1;
    CTLCOLOR_LISTBOX     = 2;
    CTLCOLOR_BTN         = 3;
    CTLCOLOR_DLG         = 4;
    CTLCOLOR_SCROLLBAR   = 5;
    CTLCOLOR_STATIC      = 6;
    CTLCOLOR_MAX         = 8;

    COLOR_SCROLLBAR      = 0;
    COLOR_BACKGROUND     = 1;
    COLOR_ACTIVECAPTION  = 2;
    COLOR_INACTIVECAPTION= 3;
    COLOR_MENU           = 4;
    COLOR_WINDOW         = 5;
    COLOR_WINDOWFRAME    = 6;
    COLOR_MENUTEXT       = 7;
    COLOR_WINDOWTEXT     = 8;
    COLOR_CAPTIONTEXT    = 9;
    COLOR_ACTIVEBORDER   = 10;
    COLOR_INACTIVEBORDER = 11;
    COLOR_APPWORKSPACE   = 12;
    COLOR_HIGHLIGHT      = 13;
    COLOR_HIGHLIGHTTEXT  = 14;
    COLOR_BTNFACE        = 15;
    COLOR_BTNSHADOW      = 16;
    COLOR_GRAYTEXT       = 17;
    COLOR_BTNTEXT        = 18;
    COLOR_INACTIVECAPTIONTEXT= 19;
    COLOR_BTNHIGHLIGHT   = 20;

    COLOR_3DDKSHADOW        = 21;
    COLOR_3DLIGHT           = 22;
    COLOR_INFOTEXT          = 23;
    COLOR_INFOBK            = 24;

    COLOR_HOTLIGHT                  =26;
    COLOR_GRADIENTACTIVECAPTION     =27;
    COLOR_GRADIENTINACTIVECAPTION   =28;

    COLOR_DESKTOP           = COLOR_BACKGROUND;
    COLOR_3DFACE            = COLOR_BTNFACE;
    COLOR_3DSHADOW          = COLOR_BTNSHADOW;
    COLOR_3DHIGHLIGHT       = COLOR_BTNHIGHLIGHT;
    COLOR_3DHILIGHT         = COLOR_BTNHIGHLIGHT;
    COLOR_BTNHILIGHT        = COLOR_BTNHIGHLIGHT;


PROCEDURE GetSysColor(nIndex : INTEGER) : DWORD;


PROCEDURE GetSysColorBrush(nIndex : WINT) : HBRUSH;


PROCEDURE SetSysColors(cElements : INTEGER;
                       lpaElements : ARRAY OF WINT;
                       lpaRgbValues : ARRAY OF COLORREF) : BOOL;

PROCEDURE DrawFocusRect(hDC : HDC;
                        lprc : RECT) : BOOL;

PROCEDURE FillRect(hDC : HDC;
                   lprc : RECT;
                   hbr : HBRUSH) : INTEGER;

PROCEDURE FrameRect(hDC : HDC;
                    lprc : RECT;
                    hbr : HBRUSH) : INTEGER;

PROCEDURE InvertRect(hDC : HDC;
                     lprc : RECT) : BOOL;

PROCEDURE SetRect(VAR lprc : RECT;
                  xLeft : INTEGER;
                  yTop : INTEGER;
                  xRight : INTEGER;
                  yBottom : INTEGER) : BOOL;

PROCEDURE SetRectEmpty(VAR lprc : RECT) : BOOL;

PROCEDURE CopyRect(VAR LPRCDST : RECT;
                   lprcSrc : RECT) : BOOL;

PROCEDURE InflateRect(VAR lprc : RECT;
                      dx : INTEGER;
                      dy : INTEGER) : BOOL;

PROCEDURE IntersectRect(VAR lprcDst : RECT;
                        lprcSrc1 : RECT;
                        lprcSrc2 : RECT) : BOOL;

PROCEDURE UnionRect(VAR lprcDst : RECT;
                    lprcSrc1 : RECT;
                    lprcSrc2 : RECT) : BOOL;

PROCEDURE SubtractRect(VAR lprcDst : RECT;
                       lprcSrc1 : RECT;
                       lprcSrc2 : RECT) : BOOL;

PROCEDURE OffsetRect(VAR lprc : RECT;
                     dx : INTEGER;
                     dy : INTEGER) : BOOL;

PROCEDURE IsRectEmpty(lprc : RECT) : BOOL;

PROCEDURE EqualRect(lprc1 : RECT;
                    lprc2 : RECT) : BOOL;

PROCEDURE PtInRect(lprc : RECT;
                   pt : VALUE POINT) : BOOL;

PROCEDURE GetWindowWord(hWnd : HWND;
                        nIndex : INTEGER) : WORD;

PROCEDURE SetWindowWord(hWnd : HWND;
                        nIndex : INTEGER;
                        wNewWord : WORD) : WORD;

PROCEDURE GetWindowLongA(hWnd : HWND; nIndex : INTEGER) : LONG;

PROCEDURE GetWindowLongW(hWnd : HWND; nIndex : INTEGER) : LONG;

%IF UNICODE %THEN
PROCEDURE GetWindowLong = GetWindowLongW;
%ELSE
PROCEDURE GetWindowLong = GetWindowLongA;
%END

%IF Bits64 %THEN
PROCEDURE GetWindowLongPtrA(hWnd : HWND; nIndex : INTEGER) : LONG_PTR;
PROCEDURE GetWindowLongPtrW(hWnd : HWND; nIndex : INTEGER) : LONG_PTR;
%ELSE
PROCEDURE GetWindowLongPtrA = GetWindowLongA;
PROCEDURE GetWindowLongPtrW = GetWindowLongW;
%END

%IF UNICODE %THEN
PROCEDURE GetWindowLongPtr = GetWindowLongPtrW;
%ELSE
PROCEDURE GetWindowLongPtr = GetWindowLongPtrA;
%END

PROCEDURE SetWindowLongA(hWnd : HWND; nIndex : INTEGER; dwNewLong : LONG) : LONG;

PROCEDURE SetWindowLongW(hWnd : HWND; nIndex : INTEGER; dwNewLong : LONG) : LONG;

%IF UNICODE %THEN
PROCEDURE SetWindowLong = SetWindowLongW;
%ELSE
PROCEDURE SetWindowLong = SetWindowLongA;
%END

%IF Bits64 %THEN
PROCEDURE SetWindowLongPtrA(hWnd : HWND; nIndex : INTEGER; dwNewLong : LONG_PTR) : LONG_PTR;
PROCEDURE SetWindowLongPtrW(hWnd : HWND; nIndex : INTEGER; dwNewLong : LONG_PTR) : LONG_PTR;
%ELSE
PROCEDURE SetWindowLongPtrA = SetWindowLongA;
PROCEDURE SetWindowLongPtrW = SetWindowLongW;
%END

%IF UNICODE %THEN
PROCEDURE SetWindowLongPtr = SetWindowLongPtrW;
%ELSE
PROCEDURE SetWindowLongPtr = SetWindowLongPtrA;
%END

PROCEDURE GetClassWord(hWnd : HWND;
                       nIndex : INTEGER) : WORD;

PROCEDURE SetClassWord(hWnd : HWND;
                       nIndex : INTEGER;
                       wNewWord : WORD) : WORD;

PROCEDURE GetClassLongA(hWnd : HWND;
                        nIndex : INTEGER) : DWORD;

PROCEDURE GetClassLongW(hWnd : HWND;
                        nIndex : INTEGER) : DWORD;

%IF UNICODE %THEN
PROCEDURE GetClassLong = GetClassLongW;
%ELSE
PROCEDURE GetClassLong = GetClassLongA;
%END

%IF Bits64 %THEN
PROCEDURE GetClassLongPtrA(hWnd : HWND; nIndex : INTEGER) : LONG_PTR;
PROCEDURE GetClassLongPtrW(hWnd : HWND; nIndex : INTEGER) : LONG_PTR;
%ELSE
PROCEDURE GetClassLongPtrA = GetWindowLongA;
PROCEDURE GetClassLongPtrW = GetWindowLongW;
%END

%IF UNICODE %THEN
PROCEDURE GetClassLongPtr = GetClassLongPtrW;
%ELSE
PROCEDURE GetClassLongPtr = GetClassLongPtrA;
%END

PROCEDURE SetClassLongA(hWnd : HWND;
                        nIndex : INTEGER;
                        dwNewLong : LONG) : DWORD;

PROCEDURE SetClassLongW(hWnd : HWND;
                        nIndex : INTEGER;
                        dwNewLong : LONG) : DWORD;

%IF UNICODE %THEN
PROCEDURE SetClassLong = SetClassLongW;
%ELSE
PROCEDURE SetClassLong = SetClassLongA;
%END

%IF Bits64 %THEN
PROCEDURE SetClassLongPtrA(hWnd : HWND; nIndex : INTEGER; dwNewLong : LONG_PTR) : LONG_PTR;
PROCEDURE SetClassLongPtrW(hWnd : HWND; nIndex : INTEGER; dwNewLong : LONG_PTR) : LONG_PTR;
%ELSE
PROCEDURE SetClassLongPtrA = SetClassLongA;
PROCEDURE SetClassLongPtrW = SetClassLongW;
%END

%IF UNICODE %THEN
PROCEDURE SetClassLongPtr = SetClassLongPtrW;
%ELSE
PROCEDURE SetClassLongPtr = SetClassLongPtrA;
%END

PROCEDURE GetDesktopWindow() : HWND;

PROCEDURE GetParent(hWnd : HWND) : HWND;

PROCEDURE SetParent(hWndChild : HWND;
                    hWndNewParent : HWND) : HWND;

PROCEDURE EnumChildWindows(hWndParent : HWND;
                           lpEnumFunc : WNDENUMPROC;
                           lParam : LPARAM) : BOOL;

PROCEDURE FindWindowA(lpClassName : ARRAY OF ACHAR;
                      lpWindowName : ARRAY OF ACHAR) : HWND;

PROCEDURE FindWindowW(lpClassName : ARRAY OF UCHAR;
                      lpWindowName : ARRAY OF UCHAR) : HWND;

%IF UNICODE %THEN
PROCEDURE FindWindow = FindWindowW;
%ELSE
PROCEDURE FindWindow = FindWindowA;
%END

PROCEDURE FindWindowExA(a: HWND;
                        b: HWND;
                        c: ARRAY OF ACHAR;
                        d: ARRAY OF ACHAR) : HWND;

PROCEDURE FindWindowExW(a: HWND;
                        b: HWND;
                        c: ARRAY OF UCHAR;
                        d: ARRAY OF UCHAR) : HWND;

%IF UNICODE %THEN
PROCEDURE FindWindowEx = FindWindowExW;
%ELSE
PROCEDURE FindWindowEx = FindWindowExA;
%END


PROCEDURE EnumWindows(lpEnumFunc : WNDENUMPROC;
                      lParam : LPARAM) : BOOL;

PROCEDURE EnumThreadWindows(dwThreadId : DWORD;
                            lpfn : WNDENUMPROC;
                            lParam : LPARAM) : BOOL;

PROCEDURE GetClassNameA(hWnd : HWND;
                        VAR lpClassName : ARRAY OF ACHAR;
                        nMaxCount : INTEGER) : INTEGER;

PROCEDURE GetClassNameW(hWnd : HWND;
                        VAR lpClassName : ARRAY OF UCHAR;
                        nMaxCount : INTEGER) : INTEGER;

%IF UNICODE %THEN
PROCEDURE GetClassName = GetClassNameW;
%ELSE
PROCEDURE GetClassName = GetClassNameA;
%END

PROCEDURE GetTopWindow(hWnd : HWND) : HWND;


PROCEDURE GetWindowThreadProcessId(hWnd : HWND;
                                   VAR lpdwProcessId : DWORD) : DWORD;

PROCEDURE GetLastActivePopup(hWnd : HWND) : HWND;


CONST
    GW_HWNDFIRST         = 0;
    GW_HWNDLAST          = 1;
    GW_HWNDNEXT          = 2;
    GW_HWNDPREV          = 3;
    GW_OWNER             = 4;
    GW_CHILD             = 5;
    GW_ENABLEDPOPUP      = 6;
    GW_MAX               = 6;

PROCEDURE GetWindow(hWnd : HWND;
                    uCmd : UINT) : HWND;

PROCEDURE SetWindowsHookA(nFilterType : INTEGER;
                          pfnFilterProc : HOOKPROC) : HHOOK;

PROCEDURE SetWindowsHookW(nFilterType : INTEGER;
                          pfnFilterProc : HOOKPROC) : HHOOK;

%IF UNICODE %THEN
PROCEDURE SetWindowsHook = SetWindowsHookW;
%ELSE
PROCEDURE SetWindowsHook = SetWindowsHookA;
%END

PROCEDURE UnhookWindowsHook(nCode : INTEGER;
                            pfnFilterProc : HOOKPROC) : BOOL;

PROCEDURE SetWindowsHookExA(idHook : INTEGER;
                            lpfn : HOOKPROC;
                            hmod : HINSTANCE;
                            dwThreadId : DWORD) : HHOOK;

PROCEDURE SetWindowsHookExW(idHook : INTEGER;
                            lpfn : HOOKPROC;
                            hmod : HINSTANCE;
                            dwThreadId : DWORD) : HHOOK;

%IF UNICODE %THEN
PROCEDURE SetWindowsHookEx = SetWindowsHookExW;
%ELSE
PROCEDURE SetWindowsHookEx = SetWindowsHookExA;
%END

PROCEDURE UnhookWindowsHookEx(hhk : HHOOK) : BOOL;

PROCEDURE CallNextHookEx(hhk : HHOOK;
                         nCode : INTEGER;
                         wParam : WPARAM;
                         lParam : LPARAM) : LRESULT;

CONST
    MF_INSERT            = 000000000h;
    MF_CHANGE            = 000000080h;
    MF_APPEND            = 000000100h;
    MF_DELETE            = 000000200h;
    MF_REMOVE            = 000001000h;
    MF_BYCOMMAND         = 000000000h;
    MF_BYPOSITION        = 000000400h;
    MF_SEPARATOR         = 000000800h;
    MF_ENABLED           = 000000000h;
    MF_GRAYED            = 000000001h;
    MF_DISABLED          = 000000002h;
    MF_UNCHECKED         = 000000000h;
    MF_CHECKED           = 000000008h;
    MF_USECHECKBITMAPS   = 000000200h;
    MF_STRING            = 000000000h;
    MF_BITMAP            = 000000004h;
    MF_OWNERDRAW         = 000000100h;
    MF_POPUP             = 000000010h;
    MF_MENUBARBREAK      = 000000020h;
    MF_MENUBREAK         = 000000040h;
    MF_UNHILITE          = 000000000h;
    MF_HILITE            = 000000080h;
    MF_SYSMENU           = 000002000h;
    MF_HELP              = 000004000h;
    MF_MOUSESELECT       = 000008000h;

    MF_DEFAULT           = 000001000h;
    MF_RIGHTJUSTIFY      = 000004000h;
    MF_END               = 000000080h;

    MFT_STRING           = MF_STRING;
    MFT_BITMAP           = MF_BITMAP;
    MFT_MENUBARBREAK     = MF_MENUBARBREAK;
    MFT_MENUBREAK        = MF_MENUBREAK;
    MFT_OWNERDRAW        = MF_OWNERDRAW;
    MFT_RADIOCHECK       = 000000200h;
    MFT_SEPARATOR        = MF_SEPARATOR;
    MFT_RIGHTORDER       = 000002000h;
    MFT_RIGHTJUSTIFY     = MF_RIGHTJUSTIFY;

    MFS_GRAYED           = 000000003h;
    MFS_DISABLED         = MFS_GRAYED;
    MFS_CHECKED          = MF_CHECKED;
    MFS_HILITE           = MF_HILITE;
    MFS_ENABLED          = MF_ENABLED;
    MFS_UNCHECKED        = MF_UNCHECKED;
    MFS_UNHILITE         = MF_UNHILITE;
    MFS_DEFAULT          = MF_DEFAULT;

    MFS_MASK            = 0000108Bh;
    MFS_HOTTRACKDRAWN   = 10000000h;
    MFS_CACHEDBMP       = 20000000h;
    MFS_BOTTOMGAPDROP   = 40000000h;
    MFS_TOPGAPDROP      = 80000000h;
    MFS_GAPDROP         = 0C0000000h;

    MFR_POPUP            = 1h;
    MFR_END              = MF_END;

PROCEDURE CheckMenuRadioItem(a: HMENU;
                             b: UINT;
                             c: UINT;
                             d: UINT;
                             e: UINT) : BOOL;



TYPE
    MENUITEMTEMPLATEHEADER = RECORD
          versionNumber  : WORD;
          offset         : WORD;
    END;
    PMENUITEMTEMPLATEHEADER     = POINTER TO MENUITEMTEMPLATEHEADER;

    MENUITEMTEMPLATE = RECORD
          mtOption       : WORD;
          mtID           : WORD;
          mtString       : ARRAY [0..1 - 1] OF WCHAR;
    END;
    PMENUITEMTEMPLATE   = POINTER TO MENUITEMTEMPLATE;

CONST
    SC_SIZE              = 0F000h;
    SC_MOVE              = 0F010h;
    SC_MINIMIZE          = 0F020h;
    SC_MAXIMIZE          = 0F030h;
    SC_NEXTWINDOW        = 0F040h;
    SC_PREVWINDOW        = 0F050h;
    SC_CLOSE             = 0F060h;
    SC_VSCROLL           = 0F070h;
    SC_HSCROLL           = 0F080h;
    SC_MOUSEMENU         = 0F090h;
    SC_KEYMENU           = 0F100h;
    SC_ARRANGE           = 0F110h;
    SC_RESTORE           = 0F120h;
    SC_TASKLIST          = 0F130h;
    SC_SCREENSAVE        = 0F140h;
    SC_HOTKEY            = 0F150h;


    SC_DEFAULT           = 0F160h;
    SC_MONITORPOWER      = 0F170h;
    SC_CONTEXTHELP       = 0F180h;
    SC_SEPARATOR         = 0F00Fh;
    SC_ICON              = SC_MINIMIZE;
    SC_ZOOM              = SC_MAXIMIZE;


PROCEDURE LoadBitmapA(a : HINSTANCE;
                      lpBitmapName : ARRAY OF ACHAR) : HBITMAP;

PROCEDURE LoadBitmapW(a : HINSTANCE;
                      lpBitmapName : ARRAY OF UCHAR) : HBITMAP;

%IF UNICODE %THEN
PROCEDURE LoadBitmap = LoadBitmapW;
%ELSE
PROCEDURE LoadBitmap = LoadBitmapA;
%END

PROCEDURE LoadCursorA(a : HINSTANCE;
                      lpCursorName : ARRAY OF ACHAR) : HCURSOR;

PROCEDURE LoadCursorW(a : HINSTANCE;
                      lpCursorName : ARRAY OF UCHAR) : HCURSOR;

%IF UNICODE %THEN
PROCEDURE LoadCursor = LoadCursorW;
%ELSE
PROCEDURE LoadCursor = LoadCursorA;
%END


PROCEDURE LoadCursorFromFileA(lpFileName : ARRAY OF ACHAR) : HCURSOR;

PROCEDURE LoadCursorFromFileW(lpFileName : ARRAY OF UCHAR) : HCURSOR;

%IF UNICODE %THEN
PROCEDURE LoadCursorFromFile = LoadCursorFromFileW;
%ELSE
PROCEDURE LoadCursorFromFile = LoadCursorFromFileA;
%END



PROCEDURE CreateCursor(hInst : HINSTANCE;
                       xHotSpot : INTEGER;
                       yHotSpot : INTEGER;
                       nWidth : INTEGER;
                       nHeight : INTEGER;
                       pvANDPlane : LPVOID;
                       pvXORPlane : LPVOID) : HCURSOR;

PROCEDURE DestroyCursor(hCursor : HCURSOR) : BOOL;

CONST
    IDC_ARROW           = CAST(LPTSTR, 32512);
    IDC_IBEAM           = CAST(LPTSTR, 32513);
    IDC_WAIT            = CAST(LPTSTR, 32514);
    IDC_CROSS           = CAST(LPTSTR, 32515);
    IDC_UPARROW         = CAST(LPTSTR, 32516);
    (* Fixed wrong #'s*)
    IDC_SIZE            = CAST(LPTSTR, 32640);
    IDC_ICON            = CAST(LPTSTR, 32641);
    IDC_SIZENWSE        = CAST(LPTSTR, 32642);
    IDC_SIZENESW        = CAST(LPTSTR, 32643);
    IDC_SIZEWE          = CAST(LPTSTR, 32644);
    IDC_SIZENS          = CAST(LPTSTR, 32645);
    IDC_SIZEALL         = CAST(LPTSTR, 32646);
    IDC_NO              = CAST(LPTSTR, 32648);
    IDC_APPSTARTING     = CAST(LPTSTR, 32650);
    IDC_HELP            = CAST(LPTSTR, 32651);

    IDC_HAND            = CAST(LPTSTR, 32649);

    IDC_ARROWW          = CAST(LPWSTR, 32512);
    IDC_IBEAMW          = CAST(LPWSTR, 32513);
    IDC_WAITW           = CAST(LPWSTR, 32514);
    IDC_CROSSW          = CAST(LPWSTR, 32515);
    IDC_UPARROWW        = CAST(LPWSTR, 32516);
    (* Fixed wrong #'s*)
    IDC_SIZEW           = CAST(LPWSTR, 32640);
    IDC_ICONW           = CAST(LPWSTR, 32641);
    IDC_SIZENWSEW       = CAST(LPWSTR, 32642);
    IDC_SIZENESWW       = CAST(LPWSTR, 32643);
    IDC_SIZEWEW         = CAST(LPWSTR, 32644);
    IDC_SIZENSW         = CAST(LPWSTR, 32645);
    IDC_SIZEALLW        = CAST(LPWSTR, 32646);
    IDC_NOW             = CAST(LPWSTR, 32648);
    IDC_APPSTARTINGW    = CAST(LPWSTR, 32650);
    IDC_HELPW           = CAST(LPWSTR, 32651);

    IDC_HANDW           = CAST(LPWSTR, 32649);

(*95*)
PROCEDURE SetSystemCursor(
                            hcur : HCURSOR;
                            id : DWORD) : BOOL;

TYPE
    ICONINFO = RECORD
          fIcon          : BOOL;
          xHotspot       : DWORD;
          yHotspot       : DWORD;
          hbmMask        : HBITMAP;
          hbmColor       : HBITMAP;
    END;
    PICONINFO            = POINTER TO ICONINFO;

PROCEDURE LoadIconA(a : HINSTANCE;
                    lpIconName : ARRAY OF ACHAR) : HICON;

PROCEDURE LoadIconW(a : HINSTANCE;
                    lpIconName : ARRAY OF UCHAR) : HICON;

%IF UNICODE %THEN
PROCEDURE LoadIcon = LoadIconW;
%ELSE
PROCEDURE LoadIcon = LoadIconA;
%END

PROCEDURE CreateIcon(a : HINSTANCE;
                     nWidth : INTEGER;
                     nHeight : INTEGER;
                     cPlanes : BYTE;
                     cBitsPixel : BYTE;
                     lpbANDbits : LPVOID;
                     lpbXORbits : LPVOID) : HICON;

PROCEDURE DestroyIcon(hIcon : HICON) : BOOL;

PROCEDURE LookupIconIdFromDirectory(presbits : PBYTE;
                                    fIcon : BOOL) : INTEGER;


PROCEDURE LookupIconIdFromDirectoryEx(presbits : PBYTE;
                                      fIcon : BOOL;
                                      cxDesired : WINT;
                                      cyDesired : WINT;
                                      Flags : UINT) : WINT;

PROCEDURE CreateIconFromResource(presbits : PBYTE;
                                 dwResSize : DWORD;
                                 fIcon : BOOL;
                                 dwVer : DWORD) : HICON;

PROCEDURE CreateIconFromResourceEx(presbits : PBYTE;
                                   dwResSize : DWORD;
                                   fIcon : BOOL;
                                   dwVer : DWORD;
                                   cxDesired : WINT;
                                   cyDesired : WINT;
                                   Flags : UINT) : HICON;

TYPE
    CURSORSHAPE = RECORD
        xHotSpot        : WINT;
        yHotSpot        : WINT;
        cx              : WINT;
        cy              : WINT;
        cbWidth         : WINT;
        Planes          : BYTE;
        BitsPixel       : BYTE;
    END;
    LPCURSORSHAPE       = POINTER TO CURSORSHAPE;

CONST
    IMAGE_BITMAP        = 0;
    IMAGE_ICON          = 1;
    IMAGE_CURSOR        = 2;
    IMAGE_ENHMETAFILE   = 3;

    LR_DEFAULTCOLOR     = 0000h;
    LR_MONOCHROME       = 0001h;
    LR_COLOR            = 0002h;
    LR_COPYRETURNORG    = 0004h;
    LR_COPYDELETEORG    = 0008h;
    LR_LOADFROMFILE     = 0010h;
    LR_LOADTRANSPARENT  = 0020h;
    LR_DEFAULTSIZE      = 0040h;
    LR_LOADREALSIZE     = 0080h;
    LR_LOADMAP3DCOLORS  = 1000h;
    LR_CREATEDIBSECTION = 2000h;
    LR_VGACOLOR         = 0080h;
    LR_COPYFROMRESOURCE = 4000h;
    LR_SHARED           = 8000h;

PROCEDURE LoadImageA(
        a: HINSTANCE;
        b: ARRAY OF ACHAR;
        c: UINT;
        d: WINT;
        e: WINT;
        f: UINT) : HANDLE;

PROCEDURE LoadImageW(
        a: HINSTANCE;
        b: ARRAY OF UCHAR;
        c: UINT;
        d: WINT;
        e: WINT;
        f: UINT) : HANDLE;

%IF UNICODE %THEN
PROCEDURE LoadImage = LoadImageW;
%ELSE
PROCEDURE LoadImage = LoadImageA;
%END

PROCEDURE CopyImage(a: HANDLE;
                    b: UINT;
                    c: WINT;
                    d: WINT;
                    e: UINT) : HICON;

CONST
    DI_MASK         = 0001h;
    DI_IMAGE        = 0002h;
    DI_NORMAL       = 0003h;
    DI_COMPAT       = 0004h;
    DI_DEFAULTSIZE  = 0008h;

PROCEDURE DrawIconEx(hdc : HDC;
                     xLeft : WINT;
                     yTop : WINT;
                     hIcon : HICON;
                     cxWidth : WINT;
                     cyWidth : WINT;
                     istepIfAniCur : UINT;
                     hbrFlickerFreeDraw : HBRUSH;
                     diFlags : UINT) : BOOL;



PROCEDURE CreateIconIndirect(piconinfo : PICONINFO) : HICON;

PROCEDURE CopyIcon(hIcon : HICON) : HICON;

PROCEDURE GetIconInfo(hIcon : HICON;
                      piconinfo : PICONINFO) : BOOL;


CONST

    RES_ICON             = 1;
    RES_CURSOR           = 2;


    OBM_CLOSE            = 32754;
    OBM_UPARROW          = 32753;
    OBM_DNARROW          = 32752;
    OBM_RGARROW          = 32751;
    OBM_LFARROW          = 32750;
    OBM_REDUCE           = 32749;
    OBM_ZOOM             = 32748;
    OBM_RESTORE          = 32747;
    OBM_REDUCED          = 32746;
    OBM_ZOOMD            = 32745;
    OBM_RESTORED         = 32744;
    OBM_UPARROWD         = 32743;
    OBM_DNARROWD         = 32742;
    OBM_RGARROWD         = 32741;
    OBM_LFARROWD         = 32740;
    OBM_MNARROW          = 32739;
    OBM_COMBO            = 32738;
    OBM_UPARROWI         = 32737;
    OBM_DNARROWI         = 32736;
    OBM_RGARROWI         = 32735;
    OBM_LFARROWI         = 32734;
    OBM_OLD_CLOSE        = 32767;
    OBM_SIZE             = 32766;
    OBM_OLD_UPARROW      = 32765;
    OBM_OLD_DNARROW      = 32764;
    OBM_OLD_RGARROW      = 32763;
    OBM_OLD_LFARROW      = 32762;
    OBM_BTSIZE           = 32761;
    OBM_CHECK            = 32760;
    OBM_CHECKBOXES       = 32759;
    OBM_BTNCORNERS       = 32758;
    OBM_OLD_REDUCE       = 32757;
    OBM_OLD_ZOOM         = 32756;
    OBM_OLD_RESTORE      = 32755;

    OCR_NORMAL           = 32512;
    OCR_IBEAM            = 32513;
    OCR_WAIT             = 32514;
    OCR_CROSS            = 32515;
    OCR_UP               = 32516;
    OCR_SIZE             = 32640;
    OCR_ICON             = 32641;
    OCR_SIZENWSE         = 32642;
    OCR_SIZENESW         = 32643;
    OCR_SIZEWE           = 32644;
    OCR_SIZENS           = 32645;
    OCR_SIZEALL          = 32646;
    OCR_ICOCUR           = 32647;
    OCR_NO               = 32648;
    OCR_APPSTARTING      = 32650;
    OCR_HAND             = 32649;

    OIC_SAMPLE           = 32512;
    OIC_HAND             = 32513;
    OIC_QUES             = 32514;
    OIC_BANG             = 32515;
    OIC_NOTE             = 32516;

    OIC_WINLOGO          = 32517;
    OIC_WARNING          = OIC_BANG;
    OIC_ERROR            = OIC_HAND;
    OIC_INFORMATION      = OIC_NOTE;


    ORD_LANGDRIVER       = 1;

    IDI_APPLICATION             = CAST(LPTSTR, 32512);
    IDI_HAND                    = CAST(LPTSTR, 32513);
    IDI_QUESTION                = CAST(LPTSTR, 32514);
    IDI_EXCLAMATION             = CAST(LPTSTR, 32515);
    IDI_ASTERISK                = CAST(LPTSTR, 32516);
    IDI_WINLOGO                 = CAST(LPTSTR, 32517);(*95*)

    IDI_APPLICATIONW            = CAST(LPWSTR, 32512);
    IDI_HANDW                   = CAST(LPWSTR, 32513);
    IDI_QUESTIONW               = CAST(LPWSTR, 32514);
    IDI_EXCLAMATIONW            = CAST(LPWSTR, 32515);
    IDI_ASTERISKW               = CAST(LPWSTR, 32516);
    IDI_WINLOGOW                = CAST(LPWSTR, 32517);(*95*)

    IDI_WARNING                 = IDI_EXCLAMATION;
    IDI_ERROR                   = IDI_HAND;
    IDI_INFORMATION             = IDI_ASTERISK;


PROCEDURE LoadStringA(a : HINSTANCE;
                      uID : UINT;
                      VAR lpBuffer : ARRAY OF ACHAR;
                      nBufferMax : INTEGER) : INTEGER;

PROCEDURE LoadStringW(a : HINSTANCE;
                      uID : UINT;
                      VAR lpBuffer : ARRAY OF UCHAR;
                      nBufferMax : INTEGER) : INTEGER;

%IF UNICODE %THEN
PROCEDURE LoadString = LoadStringW;
%ELSE
PROCEDURE LoadString = LoadStringA;
%END

CONST
    IDOK                 = 1;
    IDCANCEL             = 2;
    IDABORT              = 3;
    IDRETRY              = 4;
    IDIGNORE             = 5;
    IDYES                = 6;
    IDNO                 = 7;

    IDCLOSE              = 8;
    IDHELP               = 9;


    ES_LEFT              = 00000h;
    ES_CENTER            = 00001h;
    ES_RIGHT             = 00002h;
    ES_MULTILINE         = 00004h;
    ES_UPPERCASE         = 00008h;
    ES_LOWERCASE         = 00010h;
    ES_PASSWORD          = 00020h;
    ES_AUTOVSCROLL       = 00040h;
    ES_AUTOHSCROLL       = 00080h;
    ES_NOHIDESEL         = 00100h;
    ES_OEMCONVERT        = 00400h;
    ES_READONLY          = 00800h;
    ES_WANTRETURN        = 01000h;
    ES_NUMBER            = 02000h;(*95*)

    EN_SETFOCUS          = 00100h;
    EN_KILLFOCUS         = 00200h;
    EN_CHANGE            = 00300h;
    EN_UPDATE            = 00400h;
    EN_ERRSPACE          = 00500h;
    EN_MAXTEXT           = 00501h;
    EN_HSCROLL           = 00601h;
    EN_VSCROLL           = 00602h;


    EC_LEFTMARGIN        = 00001h;
    EC_RIGHTMARGIN       = 00002h;
    EC_USEFONTINFO       = 0ffffh;

(* wParam of EM_GET/SETIMESTATUS  *)
    EMSIS_COMPOSITIONSTRING        = 0001h;

(* lParam for EMSIS_COMPOSITIONSTRING  *)
    EIMES_GETCOMPSTRATONCE         = 0001h;
    EIMES_CANCELCOMPSTRINFOCUS     = 0002h;
    EIMES_COMPLETECOMPSTRKILLFOCUS = 0004h;

    EM_GETSEL            = 000B0h;
    EM_SETSEL            = 000B1h;
    EM_GETRECT           = 000B2h;
    EM_SETRECT           = 000B3h;
    EM_SETRECTNP         = 000B4h;
    EM_SCROLL            = 000B5h;
    EM_LINESCROLL        = 000B6h;
    EM_SCROLLCARET       = 000B7h;
    EM_GETMODIFY         = 000B8h;
    EM_SETMODIFY         = 000B9h;
    EM_GETLINECOUNT      = 000BAh;
    EM_LINEINDEX         = 000BBh;
    EM_SETHANDLE         = 000BCh;
    EM_GETHANDLE         = 000BDh;
    EM_GETTHUMB          = 000BEh;
    EM_LINELENGTH        = 000C1h;
    EM_REPLACESEL        = 000C2h;
    EM_GETLINE           = 000C4h;
    EM_LIMITTEXT         = 000C5h;
    EM_CANUNDO           = 000C6h;
    EM_UNDO              = 000C7h;
    EM_FMTLINES          = 000C8h;
    EM_LINEFROMCHAR      = 000C9h;
    EM_SETTABSTOPS       = 000CBh;
    EM_SETPASSWORDCHAR   = 000CCh;
    EM_EMPTYUNDOBUFFER   = 000CDh;
    EM_GETFIRSTVISIBLELINE= 000CEh;
    EM_SETREADONLY       = 000CFh;
    EM_SETWORDBREAKPROC  = 000D0h;
    EM_GETWORDBREAKPROC  = 000D1h;
    EM_GETPASSWORDCHAR   = 000D2h;

    EM_SETMARGINS        = 000D3h;
    EM_GETMARGINS        = 000D4h;
    EM_SETLIMITTEXT      = EM_LIMITTEXT;
    EM_GETLIMITTEXT      = 000D5h;
    EM_POSFROMCHAR       = 000D6h;
    EM_CHARFROMPOS       = 000D7h;

    EM_SETIMESTATUS         =000D8h;
    EM_GETIMESTATUS         =000D9h;

    WB_LEFT              = 0;
    WB_RIGHT             = 1;
    WB_ISDELIMITER       = 2;

    BS_PUSHBUTTON        = 000h;
    BS_DEFPUSHBUTTON     = 001h;
    BS_CHECKBOX          = 002h;
    BS_AUTOCHECKBOX      = 003h;
    BS_RADIOBUTTON       = 004h;
    BS_3STATE            = 005h;
    BS_AUTO3STATE        = 006h;
    BS_GROUPBOX          = 007h;
    BS_USERBUTTON        = 008h;
    BS_AUTORADIOBUTTON   = 009h;
    BS_OWNERDRAW         = 00Bh;
    BS_LEFTTEXT          = 020h;

    BS_TEXT              = 00000000h;
    BS_ICON              = 00000040h;
    BS_BITMAP            = 00000080h;
    BS_LEFT              = 00000100h;
    BS_RIGHT             = 00000200h;
    BS_CENTER            = 00000300h;
    BS_TOP               = 00000400h;
    BS_BOTTOM            = 00000800h;
    BS_VCENTER           = 00000C00h;
    BS_PUSHLIKE          = 00001000h;
    BS_MULTILINE         = 00002000h;
    BS_NOTIFY            = 00004000h;
    BS_FLAT              = 00008000h;
    BS_RIGHTBUTTON       = BS_LEFTTEXT;


    BN_CLICKED           = 0;
    BN_PAINT             = 1;
    BN_HILITE            = 2;
    BN_UNHILITE          = 3;
    BN_DISABLE           = 4;
    BN_DOUBLECLICKED     = 5;

    BN_PUSHED            = BN_HILITE;
    BN_UNPUSHED          = BN_UNHILITE;
    BN_DBLCLK            = BN_DOUBLECLICKED;
    BN_SETFOCUS          = 6;
    BN_KILLFOCUS         = 7;


    BM_GETCHECK          = 000F0h;
    BM_SETCHECK          = 000F1h;
    BM_GETSTATE          = 000F2h;
    BM_SETSTATE          = 000F3h;
    BM_SETSTYLE          = 000F4h;

    BM_CLICK             = 00F5h;
    BM_GETIMAGE          = 00F6h;
    BM_SETIMAGE          = 00F7h;

    BST_UNCHECKED        = 0000h;
    BST_CHECKED          = 0001h;
    BST_INDETERMINATE    = 0002h;
    BST_PUSHED           = 0004h;
    BST_FOCUS            = 0008h;


    SS_LEFT              = 000h;
    SS_CENTER            = 001h;
    SS_RIGHT             = 002h;
    SS_ICON              = 003h;
    SS_BLACKRECT         = 004h;
    SS_GRAYRECT          = 005h;
    SS_WHITERECT         = 006h;
    SS_BLACKFRAME        = 007h;
    SS_GRAYFRAME         = 008h;
    SS_WHITEFRAME        = 009h;
    SS_USERITEM          = 00Ah;
    SS_SIMPLE            = 00Bh;
    SS_LEFTNOWORDWRAP    = 00Ch;

    SS_BITMAP            = 0000000Eh;
    SS_OWNERDRAW         = 0000000Dh;
    SS_ENHMETAFILE       = 0000000Fh;
    SS_ETCHEDHORZ        = 00000010h;
    SS_ETCHEDVERT        = 00000011h;
    SS_ETCHEDFRAME       = 00000012h;
    SS_TYPEMASK          = 0000001Fh;

    SS_NOPREFIX          = 080h;

    SS_NOTIFY            = 00000100h;
    SS_CENTERIMAGE       = 00000200h;
    SS_RIGHTJUST         = 00000400h;
    SS_REALSIZEIMAGE     = 00000800h;
    SS_SUNKEN            = 00001000h;
    SS_RAISED            = 00002000h;
    SS_ENDELLIPSIS      = 00004000h;
    SS_PATHELLIPSIS     = 00008000h;
    SS_WORDELLIPSIS     = 0000C000h;
    SS_ELLIPSISMASK     = 0000C000h;


    STM_SETICON          = 0170h;
    STM_GETICON          = 0171h;

    STM_SETIMAGE         = 00172h;
    STM_GETIMAGE         = 00173h;
    STM_MSGMAX           = 00174h;

    STN_CLICKED          = 0;
    STN_DBLCLK           = 1;
    STN_ENABLE           = 2;
    STN_DISABLE          = 3;


    WC_DIALOG    = CAST(LPATOM, 08002H);

    %IF %NOT Bits64 %THEN
    DWL_MSGRESULT        = 0;
    DWL_DLGPROC          = 4;
    DWL_USER             = 8;
    %END

    DWLP_MSGRESULT        = 0;
    DWLP_DLGPROC          = DWLP_MSGRESULT + SIZE(LRESULT);
    DWLP_USER             = DWLP_DLGPROC + SIZE(DLGPROC);

PROCEDURE IsDialogMessageA(hDlg : HWND;
                           VAR lpMsg : MSG) : BOOL;

PROCEDURE IsDialogMessageW(hDlg : HWND;
                           VAR lpMsg : MSG) : BOOL;

%IF UNICODE %THEN
PROCEDURE IsDialogMessage = IsDialogMessageW;
%ELSE
PROCEDURE IsDialogMessage = IsDialogMessageA;
%END

PROCEDURE MapDialogRect(hDlg : HWND;
                        VAR lpRect : RECT) : BOOL;

PROCEDURE DlgDirListA(hDlg : HWND;
                      VAR lpPathSpec : ARRAY OF ACHAR;
                      nIDListBox : INTEGER;
                      nIDStaticPath : INTEGER;
                      uFileType : UINT) : INTEGER;

PROCEDURE DlgDirListW(hDlg : HWND;
                      VAR lpPathSpec : ARRAY OF UCHAR;
                      nIDListBox : INTEGER;
                      nIDStaticPath : INTEGER;
                      uFileType : UINT) : INTEGER;

%IF UNICODE %THEN
PROCEDURE DlgDirList = DlgDirListW;
%ELSE
PROCEDURE DlgDirList = DlgDirListA;
%END

CONST
    DDL_READWRITE        = 00000h;
    DDL_READONLY         = 00001h;
    DDL_HIDDEN           = 00002h;
    DDL_SYSTEM           = 00004h;
    DDL_DIRECTORY        = 00010h;
    DDL_ARCHIVE          = 00020h;
    DDL_POSTMSGS         = 02000h;
    DDL_DRIVES           = 04000h;
    DDL_EXCLUSIVE        = 08000h;

PROCEDURE DlgDirSelectExA(hDlg : HWND;
                          VAR lpString : ARRAY OF ACHAR;
                          nCount : INTEGER;
                          nIDListBox : INTEGER) : BOOL;

PROCEDURE DlgDirSelectExW(hDlg : HWND;
                          VAR lpString : ARRAY OF UCHAR;
                          nCount : INTEGER;
                          nIDListBox : INTEGER) : BOOL;

%IF UNICODE %THEN
PROCEDURE DlgDirSelectEx = DlgDirSelectExW;
%ELSE
PROCEDURE DlgDirSelectEx = DlgDirSelectExA;
%END

PROCEDURE DlgDirListComboBoxA(hDlg : HWND;
                              VAR lpPathSpec : ARRAY OF ACHAR;
                              nIDComboBox : INTEGER;
                              nIDStaticPath : INTEGER;
                              uFiletype : UINT) : INTEGER;

PROCEDURE DlgDirListComboBoxW(hDlg : HWND;
                              VAR lpPathSpec : ARRAY OF UCHAR;
                              nIDComboBox : INTEGER;
                              nIDStaticPath : INTEGER;
                              uFiletype : UINT) : INTEGER;

%IF UNICODE %THEN
PROCEDURE DlgDirListComboBox = DlgDirListComboBoxW;
%ELSE
PROCEDURE DlgDirListComboBox = DlgDirListComboBoxA;
%END

PROCEDURE DlgDirSelectComboBoxExA(hDlg : HWND;
                                  VAR lpString : ARRAY OF ACHAR;
                                  nCount : INTEGER;
                                  nIDComboBox : INTEGER) : BOOL;

PROCEDURE DlgDirSelectComboBoxExW(hDlg : HWND;
                                  VAR lpString : ARRAY OF UCHAR;
                                  nCount : INTEGER;
                                  nIDComboBox : INTEGER) : BOOL;

%IF UNICODE %THEN
PROCEDURE DlgDirSelectComboBoxEx = DlgDirSelectComboBoxExW;
%ELSE
PROCEDURE DlgDirSelectComboBoxEx = DlgDirSelectComboBoxExA;
%END

CONST
    DS_ABSALIGN          = 001h;
    DS_SYSMODAL          = 002h;
    DS_LOCALEDIT         = 020h;
    DS_SETFONT           = 040h;
    DS_MODALFRAME        = 080h;
    DS_NOIDLEMSG         = 0100h;
    DS_SETFOREGROUND     = 0200h;

    DS_3DLOOK            = 00004h;
    DS_FIXEDSYS          = 00008h;
    DS_NOFAILCREATE      = 00010h;
    DS_CONTROL           = 00400h;
    DS_CENTER            = 00800h;
    DS_CENTERMOUSE       = 01000h;

    DS_CONTEXTHELP       = 02000h;
    DS_SHELLFONT         = DS_SETFONT BOR DS_FIXEDSYS;

    DM_GETDEFID          = WM_USER + 0;
    DM_SETDEFID          = WM_USER + 1;

    DM_REPOSITION        = WM_USER + 2;

    PSM_PAGEINFO         = WM_USER + 100;
    PSM_SHEETINFO        = WM_USER + 101;

    PSI_SETACTIVE        = 0001h;
    PSI_KILLACTIVE       = 0002h;
    PSI_APPLY            = 0003h;
    PSI_RESET            = 0004h;
    PSI_HASHELP          = 0005h;
    PSI_HELP             = 0006h;

    PSI_CHANGED          = 0001h;
    PSI_GUISTART         = 0002h;
    PSI_REBOOT           = 0003h;
    PSI_GETSIBLINGS      = 0004h;


    DC_HASDEFID          = 0534Bh;

    DLGC_WANTARROWS      = 00001h;
    DLGC_WANTTAB         = 00002h;
    DLGC_WANTALLKEYS     = 00004h;
    DLGC_WANTMESSAGE     = 00004h;
    DLGC_HASSETSEL       = 00008h;
    DLGC_DEFPUSHBUTTON   = 00010h;
    DLGC_UNDEFPUSHBUTTON = 00020h;
    DLGC_RADIOBUTTON     = 00040h;
    DLGC_WANTCHARS       = 00080h;
    DLGC_STATIC          = 00100h;
    DLGC_BUTTON          = 02000h;
    DLGC_RECURSE         = 08000h;(*95*)

    LB_CTLCODE           = 0;
    LB_OKAY              = 0;
    LB_ERR               = -1;
    LB_ERRSPACE          = -2;

    LBN_ERRSPACE         = -2;
    LBN_SELCHANGE        = 1;
    LBN_DBLCLK           = 2;
    LBN_SELCANCEL        = 3;
    LBN_SETFOCUS         = 4;
    LBN_KILLFOCUS        = 5;

    LB_ADDSTRING         = 00180h;
    LB_INSERTSTRING      = 00181h;
    LB_DELETESTRING      = 00182h;
    LB_SELITEMRANGEEX    = 00183h;
    LB_RESETCONTENT      = 00184h;
    LB_SETSEL            = 00185h;
    LB_SETCURSEL         = 00186h;
    LB_GETSEL            = 00187h;
    LB_GETCURSEL         = 00188h;
    LB_GETTEXT           = 00189h;
    LB_GETTEXTLEN        = 0018Ah;
    LB_GETCOUNT          = 0018Bh;
    LB_SELECTSTRING      = 0018Ch;
    LB_DIR               = 0018Dh;
    LB_GETTOPINDEX       = 0018Eh;
    LB_FINDSTRING        = 0018Fh;
    LB_GETSELCOUNT       = 00190h;
    LB_GETSELITEMS       = 00191h;
    LB_SETTABSTOPS       = 00192h;
    LB_GETHORIZONTALEXTENT= 00193h;
    LB_SETHORIZONTALEXTENT= 00194h;
    LB_SETCOLUMNWIDTH    = 00195h;
    LB_ADDFILE           = 00196h;
    LB_SETTOPINDEX       = 00197h;
    LB_GETITEMRECT       = 00198h;
    LB_GETITEMDATA       = 00199h;
    LB_SETITEMDATA       = 0019Ah;
    LB_SELITEMRANGE      = 0019Bh;
    LB_SETANCHORINDEX    = 0019Ch;
    LB_GETANCHORINDEX    = 0019Dh;
    LB_SETCARETINDEX     = 0019Eh;
    LB_GETCARETINDEX     = 0019Fh;
    LB_SETITEMHEIGHT     = 001A0h;
    LB_GETITEMHEIGHT     = 001A1h;
    LB_FINDSTRINGEXACT   = 001A2h;
    LB_SETLOCALE         = 001A5h;
    LB_GETLOCALE         = 001A6h;
    LB_SETCOUNT          = 001A7h;

    LB_INITSTORAGE       = 001A8h;
    LB_ITEMFROMPOINT     = 001A9h;
    LB_MSGMAX            = 001B0h;


    LBS_NOTIFY           = 00001h;
    LBS_SORT             = 00002h;
    LBS_NOREDRAW         = 00004h;
    LBS_MULTIPLESEL      = 00008h;
    LBS_OWNERDRAWFIXED   = 00010h;
    LBS_OWNERDRAWVARIABLE= 00020h;
    LBS_HASSTRINGS       = 00040h;
    LBS_USETABSTOPS      = 00080h;
    LBS_NOINTEGRALHEIGHT = 00100h;
    LBS_MULTICOLUMN      = 00200h;
    LBS_WANTKEYBOARDINPUT= 00400h;
    LBS_EXTENDEDSEL      = 00800h;
    LBS_DISABLENOSCROLL  = 01000h;
    LBS_NODATA           = 02000h;
    LBS_STANDARD         = LBS_NOTIFY BOR
                           LBS_SORT BOR
                           WS_VSCROLL BOR
                           WS_BORDER;
    LBS_NOSEL            = 04000h;(*95*)

    CB_OKAY              = 0;
    CB_ERR               = -1;
    CB_ERRSPACE          = -2;

    CBN_ERRSPACE         = -1;
    CBN_SELCHANGE        = 1;
    CBN_DBLCLK           = 2;
    CBN_SETFOCUS         = 3;
    CBN_KILLFOCUS        = 4;
    CBN_EDITCHANGE       = 5;
    CBN_EDITUPDATE       = 6;
    CBN_DROPDOWN         = 7;
    CBN_CLOSEUP          = 8;
    CBN_SELENDOK         = 9;
    CBN_SELENDCANCEL     = 10;

    CBS_SIMPLE           = 00001h;
    CBS_DROPDOWN         = 00002h;
    CBS_DROPDOWNLIST     = 00003h;
    CBS_OWNERDRAWFIXED   = 00010h;
    CBS_OWNERDRAWVARIABLE= 00020h;
    CBS_AUTOHSCROLL      = 00040h;
    CBS_OEMCONVERT       = 00080h;
    CBS_SORT             = 00100h;
    CBS_HASSTRINGS       = 00200h;
    CBS_NOINTEGRALHEIGHT = 00400h;
    CBS_DISABLENOSCROLL  = 00800h;

    CBS_UPPERCASE        = 02000h;
    CBS_LOWERCASE        = 04000h;


    CB_GETEDITSEL        = 00140h;
    CB_LIMITTEXT         = 00141h;
    CB_SETEDITSEL        = 00142h;
    CB_ADDSTRING         = 00143h;
    CB_DELETESTRING      = 00144h;
    CB_DIR               = 00145h;
    CB_GETCOUNT          = 00146h;
    CB_GETCURSEL         = 00147h;
    CB_GETLBTEXT         = 00148h;
    CB_GETLBTEXTLEN      = 00149h;
    CB_INSERTSTRING      = 0014Ah;
    CB_RESETCONTENT      = 0014Bh;
    CB_FINDSTRING        = 0014Ch;
    CB_SELECTSTRING      = 0014Dh;
    CB_SETCURSEL         = 0014Eh;
    CB_SHOWDROPDOWN      = 0014Fh;
    CB_GETITEMDATA       = 00150h;
    CB_SETITEMDATA       = 00151h;
    CB_GETDROPPEDCONTROLRECT= 00152h;
    CB_SETITEMHEIGHT     = 00153h;
    CB_GETITEMHEIGHT     = 00154h;
    CB_SETEXTENDEDUI     = 00155h;
    CB_GETEXTENDEDUI     = 00156h;
    CB_GETDROPPEDSTATE   = 00157h;
    CB_FINDSTRINGEXACT   = 00158h;
    CB_SETLOCALE         = 00159h;
    CB_GETLOCALE         = 0015ah;

    CB_GETTOPINDEX              = 015bh;
    CB_SETTOPINDEX              = 015ch;
    CB_GETHORIZONTALEXTENT      = 015dh;
    CB_SETHORIZONTALEXTENT      = 015eh;
    CB_GETDROPPEDWIDTH          = 015fh;
    CB_SETDROPPEDWIDTH          = 0160h;
    CB_INITSTORAGE              = 0161h;
    CB_MSGMAX            = 00162h;


    SBS_HORZ             = 00000h;
    SBS_VERT             = 00001h;
    SBS_TOPALIGN         = 00002h;
    SBS_LEFTALIGN        = 00002h;
    SBS_BOTTOMALIGN      = 00004h;
    SBS_RIGHTALIGN       = 00004h;
    SBS_SIZEBOXTOPLEFTALIGN= 00002h;
    SBS_SIZEBOXBOTTOMRIGHTALIGN= 00004h;
    SBS_SIZEBOX          = 00008h;
    SBS_SIZEGRIP         = 00010h;

    SBM_SETPOS           = 000E0h;
    SBM_GETPOS           = 000E1h;
    SBM_SETRANGE         = 000E2h;
    SBM_SETRANGEREDRAW   = 000E6h;
    SBM_GETRANGE         = 000E3h;
    SBM_ENABLE_ARROWS    = 000E4h;

    SBM_SETSCROLLINFO    = 000E9h;
    SBM_GETSCROLLINFO    = 000EAh;

    SIF_RANGE            = 00001h;
    SIF_PAGE             = 00002h;
    SIF_POS              = 00004h;
    SIF_DISABLENOSCROLL  = 00008h;
    SIF_TRACKPOS         = 00010h;
    SIF_ALL              = SIF_RANGE BOR
                           SIF_PAGE BOR
                           SIF_POS BOR
                           SIF_TRACKPOS;

TYPE
    SCROLLINFO = RECORD
        cbSize  : UINT;
        fMask   : UINT;
        nMin    : WINT;
        nMax    : WINT;
        nPage   : UINT;
        nPos    : WINT;
        nTrackPos : WINT;
    END;
    LPSCROLLINFO        = POINTER TO SCROLLINFO;
    LPCSCROLLINFO       = LPSCROLLINFO;

PROCEDURE SetScrollInfo(a: HWND;
                        b: WINT;
                        c: SCROLLINFO;
                        d: BOOL) :  WINT;

PROCEDURE GetScrollInfo(a: HWND;
                        b: WINT;
                        VAR c: SCROLLINFO) : BOOL;


CONST
    MDIS_ALLCHILDSTYLES  = 00001h;
    MDITILE_VERTICAL     = 00000h;
    MDITILE_HORIZONTAL   = 00001h;
    MDITILE_SKIPDISABLED = 00002h;

TYPE
    MDICREATESTRUCTA = RECORD
          szClass        : LPCSTR;
          szTitle        : LPCSTR;
          hOwner         : HANDLE;
          x              : INTEGER;
          y              : INTEGER;
          cx             : INTEGER;
          cy             : INTEGER;
          style          : DWORD;
          lParam         : LPARAM;
    END;
    LPMDICREATESTRUCTA   = POINTER TO MDICREATESTRUCTA;

    MDICREATESTRUCTW = RECORD
          szClass        : LPCWSTR;
          szTitle        : LPCWSTR;
          hOwner         : HANDLE;
          x              : INTEGER;
          y              : INTEGER;
          cx             : INTEGER;
          cy             : INTEGER;
          style          : DWORD;
          lParam         : LPARAM;
    END;
    LPMDICREATESTRUCTW   = POINTER TO MDICREATESTRUCTW;

    %IF UNICODE %THEN
    MDICREATESTRUCT      = MDICREATESTRUCTW;
    LPMDICREATESTRUCT    = LPMDICREATESTRUCTW;
    %ELSE
    MDICREATESTRUCT      = MDICREATESTRUCTA;
    LPMDICREATESTRUCT    = LPMDICREATESTRUCTA;
    %END

    CLIENTCREATESTRUCT = RECORD
          hWindowMenu    : HMENU;
          idFirstChild   : UINT;
    END;
    LPCLIENTCREATESTRUCT = POINTER TO CLIENTCREATESTRUCT;

PROCEDURE DefFrameProcA(hWnd : HWND;
                        hWndMDIClient : HWND;
                        uMsg : UINT;
                        wParam : WPARAM;
                        lParam : LPARAM) : LRESULT;

PROCEDURE DefFrameProcW(hWnd : HWND;
                        hWndMDIClient : HWND;
                        uMsg : UINT;
                        wParam : WPARAM;
                        lParam : LPARAM) : LRESULT;

%IF UNICODE %THEN
PROCEDURE DefFrameProc = DefFrameProcW;
%ELSE
PROCEDURE DefFrameProc = DefFrameProcA;
%END

PROCEDURE DefMDIChildProcA(hWnd : HWND;
                           uMsg : UINT;
                           wParam : WPARAM;
                           lParam : LPARAM) : LRESULT;

PROCEDURE DefMDIChildProcW(hWnd : HWND;
                           uMsg : UINT;
                           wParam : WPARAM;
                           lParam : LPARAM) : LRESULT;

%IF UNICODE %THEN
PROCEDURE DefMDIChildProc = DefMDIChildProcW;
%ELSE
PROCEDURE DefMDIChildProc = DefMDIChildProcA;
%END

PROCEDURE TranslateMDISysAccel(hWndClient : HWND;
                               VAR lpMsg : MSG) : BOOL;

PROCEDURE ArrangeIconicWindows(hWnd : HWND) : UINT;

PROCEDURE CreateMDIWindowA(lpClassName : ARRAY OF ACHAR;
                           lpWindowName : ARRAY OF ACHAR;
                           dwStyle : DWORD;
                           X : INTEGER;
                           Y : INTEGER;
                           nWidth : INTEGER;
                           nHeight : INTEGER;
                           hWndParent : HWND;
                           a : HINSTANCE;
                           lParam : LPARAM) : HWND;

PROCEDURE CreateMDIWindowW(lpClassName : ARRAY OF UCHAR;
                           lpWindowName : ARRAY OF UCHAR;
                           dwStyle : DWORD;
                           X : INTEGER;
                           Y : INTEGER;
                           nWidth : INTEGER;
                           nHeight : INTEGER;
                           hWndParent : HWND;
                           a : HINSTANCE;
                           lParam : LPARAM) : HWND;

%IF UNICODE %THEN
PROCEDURE CreateMDIWindow = CreateMDIWindowW;
%ELSE
PROCEDURE CreateMDIWindow = CreateMDIWindowA;
%END


PROCEDURE TileWindows(hwndParent : HWND;
                      wHow : UINT;
                      lpRect : RECT;
                      cKids : UINT;
                      lpKids : ARRAY OF HWND) : WORD;

PROCEDURE CascadeWindows(hwndParent : HWND;
                         wHow : UINT;
                         lpRect : RECT;
                         cKids : UINT;
                         lpKids : ARRAY OF HWND) : WORD;



CONST
    IMC_GETCONVERSIONMODE           = 0001h;
    IMC_SETCONVERSIONMODE           = 0002h;
    IMC_GETSENTENCEMODE             = 0003h;
    IMC_SETSENTENCEMODE             = 0004h;
    IMC_GETOPENSTATUS               = 0005h;
    IMC_SETOPENSTATUS               = 0006h;
    IMC_GETCANDIDATEPOS             = 0007h;
    IMC_SETCANDIDATEPOS             = 0008h;
    IMC_GETCOMPOSITIONFONT          = 0009h;
    IMC_SETCOMPOSITIONFONT          = 000Ah;
    IMC_GETCOMPOSITIONWINDOW        = 000Bh;
    IMC_SETCOMPOSITIONWINDOW        = 000Ch;
    IMC_GETSTATUSWINDOWPOS          = 000Fh;
    IMC_SETSTATUSWINDOWPOS          = 0010h;
    IMC_CLOSESTATUSWINDOW           = 0021h;
    IMC_OPENSTATUSWINDOW            = 0022h;

    IMN_CLOSESTATUSWINDOW      = 0001h;
    IMN_OPENSTATUSWINDOW       = 0002h;
    IMN_CHANGECANDIDATE        = 0003h;
    IMN_CLOSECANDIDATE         = 0004h;
    IMN_OPENCANDIDATE          = 0005h;
    IMN_SETCONVERSIONMODE      = 0006h;
    IMN_SETSENTENCEMODE        = 0007h;
    IMN_SETOPENSTATUS          = 0008h;
    IMN_SETCANDIDATEPOS        = 0009h;
    IMN_SETCOMPOSITIONFONT     = 000Ah;
    IMN_SETCOMPOSITIONWINDOW   = 000Bh;
    IMN_SETSTATUSWINDOWPOS     = 000Ch;
    IMN_GUIDELINE              = 000Dh;
    IMN_PRIVATE                = 000Eh;


TYPE
    HELPPOLY             = DWORD;

    MULTIKEYHELPA = RECORD
          mkSize         : DWORD;
          mkKeylist      : ACHAR;
          szKeyphrase    : ARRAY [0..1 - 1] OF ACHAR;
    END;
    PMULTIKEYHELPA       = POINTER TO MULTIKEYHELPA;
    LPMULTIKEYHELPA      = PMULTIKEYHELPA;

    MULTIKEYHELPW = RECORD
          mkSize         : DWORD;
          mkKeylist      : WCHAR;
          szKeyphrase    : ARRAY [0..1 - 1] OF WCHAR;
    END;
    PMULTIKEYHELPW       = POINTER TO MULTIKEYHELPW;
    LPMULTIKEYHELPW      = PMULTIKEYHELPW;

    %IF UNICODE %THEN
    MULTIKEYHELP         = MULTIKEYHELPW;
    PMULTIKEYHELP        = PMULTIKEYHELPW;
    %ELSE
    MULTIKEYHELP         = MULTIKEYHELPA;
    PMULTIKEYHELP        = PMULTIKEYHELPA;
    %END
    LPMULTIKEYHELP       = PMULTIKEYHELP;

    HELPWININFOA = RECORD
          wStructSize    : INTEGER;
          x              : INTEGER;
          y              : INTEGER;
          dx             : INTEGER;
          dy             : INTEGER;
          wMax           : INTEGER;
          rgchMember     : ARRAY [0..2 - 1] OF ACHAR;
    END;
    PHELPWININFOA        = POINTER TO HELPWININFOA;
    LPHELPWININFOA       = PHELPWININFOA;

    HELPWININFOW = RECORD
          wStructSize    : INTEGER;
          x              : INTEGER;
          y              : INTEGER;
          dx             : INTEGER;
          dy             : INTEGER;
          wMax           : INTEGER;
          rgchMember     : ARRAY [0..2 - 1] OF WCHAR;
    END;
    PHELPWININFOW        = POINTER TO HELPWININFOW;
    LPHELPWININFOW       = PHELPWININFOW;

    %IF UNICODE %THEN
    HELPWININFO          = HELPWININFOW;
    PHELPWININFO         = PHELPWININFOW;
    %ELSE
    HELPWININFO          = HELPWININFOA;
    PHELPWININFO         = PHELPWININFOA;
    %END
    LPHELPWININFO        = PHELPWININFO;

CONST
    HELP_CONTEXT         = 00001h;
    HELP_QUIT            = 00002h;
    HELP_INDEX           = 00003h;
    HELP_CONTENTS        = 00003h;
    HELP_HELPONHELP      = 00004h;
    HELP_SETINDEX        = 00005h;
    HELP_SETCONTENTS     = 00005h;
    HELP_CONTEXTPOPUP    = 00008h;
    HELP_FORCEFILE       = 00009h;
    HELP_KEY             = 00101h;
    HELP_COMMAND         = 00102h;
    HELP_PARTIALKEY      = 00105h;
    HELP_MULTIKEY        = 00201h;
    HELP_SETWINPOS       = 00203h;

    HELP_CONTEXTMENU     = 000ah;
    HELP_FINDER          = 000bh;
    HELP_WM_HELP         = 000ch;
    HELP_SETPOPUP_POS    = 000dh;

    HELP_TCARD              = 8000h;
    HELP_TCARD_DATA         = 0010h;
    HELP_TCARD_OTHER_CALLER = 0011h;

    IDH_NO_HELP                     = 28440;
    IDH_MISSING_CONTEXT             = 28441;
    IDH_GENERIC_HELP_BUTTON         = 28442;
    IDH_OK                          = 28443;
    IDH_CANCEL                      = 28444;
    IDH_HELP                        = 28445;


PROCEDURE WinHelpA(hWndMain : HWND;
                   lpszHelp : ARRAY OF ACHAR;
                   uCommand : UINT;
                   dwData : ULONG_PTR) : BOOL;

PROCEDURE WinHelpW(hWndMain : HWND;
                   lpszHelp : ARRAY OF UCHAR;
                   uCommand : UINT;
                   dwData : ULONG_PTR) : BOOL;

%IF UNICODE %THEN
PROCEDURE WinHelp = WinHelpW;
%ELSE
PROCEDURE WinHelp = WinHelpA;
%END

CONST
    GR_GDIOBJECTS     =0;       (* Count of GDI objects *)
    GR_USEROBJECTS    =1;       (* Count of USER objects *)

PROCEDURE GetGuiResources(hProcess : HANDLE; uiFlags : DWORD) : DWORD;

CONST
    SPI_GETBEEP          = 1;
    SPI_SETBEEP          = 2;
    SPI_GETMOUSE         = 3;
    SPI_SETMOUSE         = 4;
    SPI_GETBORDER        = 5;
    SPI_SETBORDER        = 6;
    SPI_GETKEYBOARDSPEED = 10;
    SPI_SETKEYBOARDSPEED = 11;
    SPI_LANGDRIVER       = 12;
    SPI_ICONHORIZONTALSPACING= 13;
    SPI_GETSCREENSAVETIMEOUT= 14;
    SPI_SETSCREENSAVETIMEOUT= 15;
    SPI_GETSCREENSAVEACTIVE= 16;
    SPI_SETSCREENSAVEACTIVE= 17;
    SPI_GETGRIDGRANULARITY= 18;
    SPI_SETGRIDGRANULARITY= 19;
    SPI_SETDESKWALLPAPER = 20;
    SPI_SETDESKPATTERN   = 21;
    SPI_GETKEYBOARDDELAY = 22;
    SPI_SETKEYBOARDDELAY = 23;
    SPI_ICONVERTICALSPACING= 24;
    SPI_GETICONTITLEWRAP = 25;
    SPI_SETICONTITLEWRAP = 26;
    SPI_GETMENUDROPALIGNMENT= 27;
    SPI_SETMENUDROPALIGNMENT= 28;
    SPI_SETDOUBLECLKWIDTH= 29;
    SPI_SETDOUBLECLKHEIGHT= 30;
    SPI_GETICONTITLELOGFONT= 31;
    SPI_SETDOUBLECLICKTIME= 32;
    SPI_SETMOUSEBUTTONSWAP= 33;
    SPI_SETICONTITLELOGFONT= 34;
    SPI_GETFASTTASKSWITCH= 35;
    SPI_SETFASTTASKSWITCH= 36;

    SPI_SETDRAGFULLWINDOWS     = 37;
    SPI_GETDRAGFULLWINDOWS     = 38;
    SPI_GETNONCLIENTMETRICS    = 41;
    SPI_SETNONCLIENTMETRICS    = 42;
    SPI_GETMINIMIZEDMETRICS    = 43;
    SPI_SETMINIMIZEDMETRICS    = 44;
    SPI_GETICONMETRICS         = 45;
    SPI_SETICONMETRICS         = 46;
    SPI_SETWORKAREA            = 47;
    SPI_GETWORKAREA            = 48;
    SPI_SETPENWINDOWS          = 49;

    SPI_GETHIGHCONTRAST        = 66;
    SPI_SETHIGHCONTRAST        = 67;
    SPI_GETKEYBOARDPREF        = 68;
    SPI_SETKEYBOARDPREF        = 69;
    SPI_GETSCREENREADER        = 70;
    SPI_SETSCREENREADER        = 71;
    SPI_GETANIMATION           = 72;
    SPI_SETANIMATION           = 73;
    SPI_GETFONTSMOOTHING       = 74;
    SPI_SETFONTSMOOTHING       = 75;
    SPI_SETDRAGWIDTH           = 76;
    SPI_SETDRAGHEIGHT          = 77;
    SPI_SETHANDHELD            = 78;
    SPI_GETLOWPOWERTIMEOUT     = 79;
    SPI_GETPOWEROFFTIMEOUT     = 80;
    SPI_SETLOWPOWERTIMEOUT     = 81;
    SPI_SETPOWEROFFTIMEOUT     = 82;
    SPI_GETLOWPOWERACTIVE      = 83;
    SPI_GETPOWEROFFACTIVE      = 84;
    SPI_SETLOWPOWERACTIVE      = 85;
    SPI_SETPOWEROFFACTIVE      = 86;
    SPI_SETCURSORS             = 87;
    SPI_SETICONS               = 88;
    SPI_GETDEFAULTINPUTLANG    = 89;
    SPI_SETDEFAULTINPUTLANG    = 90;
    SPI_SETLANGTOGGLE          = 91;
    SPI_GETWINDOWSEXTENSION    = 92;
    SPI_SETMOUSETRAILS         = 93;
    SPI_GETMOUSETRAILS         = 94;
    SPI_SCREENSAVERUNNING      = 97;
    SPI_SETSCREENSAVERRUNNING  = 97;
    SPI_SCREENSAVERRUNNING     = SPI_SETSCREENSAVERRUNNING;

    SPI_GETFILTERKEYS          = 50;
    SPI_SETFILTERKEYS          = 51;
    SPI_GETTOGGLEKEYS          = 52;
    SPI_SETTOGGLEKEYS          = 53;
    SPI_GETMOUSEKEYS           = 54;
    SPI_SETMOUSEKEYS           = 55;
    SPI_GETSHOWSOUNDS          = 56;
    SPI_SETSHOWSOUNDS          = 57;
    SPI_GETSTICKYKEYS          = 58;
    SPI_SETSTICKYKEYS          = 59;
    SPI_GETACCESSTIMEOUT       = 60;
    SPI_SETACCESSTIMEOUT       = 61;
    SPI_GETSERIALKEYS          = 62;
    SPI_SETSERIALKEYS          = 63;
    SPI_GETSOUNDSENTRY         = 64;
    SPI_SETSOUNDSENTRY         = 65;

    SPI_GETMOUSEHOVERWIDTH     =98;
    SPI_SETMOUSEHOVERWIDTH     =99;
    SPI_GETMOUSEHOVERHEIGHT   =100;
    SPI_SETMOUSEHOVERHEIGHT   =101;
    SPI_GETMOUSEHOVERTIME     =102;
    SPI_SETMOUSEHOVERTIME     =103;
    SPI_GETWHEELSCROLLLINES   =104;
    SPI_SETWHEELSCROLLLINES   =105;

    SPI_GETSHOWIMEUI          =110;
    SPI_SETSHOWIMEUI          =111;

    SPI_GETMOUSESPEED         =112;
    SPI_SETMOUSESPEED         =113;
    SPI_GETSCREENSAVERRUNNING =114;

    SPI_GETACTIVEWINDOWTRACKING         =01000h;
    SPI_SETACTIVEWINDOWTRACKING         =01001h;
    SPI_GETMENUANIMATION                =01002h;
    SPI_SETMENUANIMATION                =01003h;
    SPI_GETCOMBOBOXANIMATION            =01004h;
    SPI_SETCOMBOBOXANIMATION            =01005h;
    SPI_GETLISTBOXSMOOTHSCROLLING       =01006h;
    SPI_SETLISTBOXSMOOTHSCROLLING       =01007h;
    SPI_GETGRADIENTCAPTIONS             =01008h;
    SPI_SETGRADIENTCAPTIONS             =01009h;
    SPI_GETMENUUNDERLINES               =0100Ah;
    SPI_SETMENUUNDERLINES               =0100Bh;
    SPI_GETACTIVEWNDTRKZORDER           =0100Ch;
    SPI_SETACTIVEWNDTRKZORDER           =0100Dh;
    SPI_GETHOTTRACKING                  =0100Eh;
    SPI_SETHOTTRACKING                  =0100Fh;
    SPI_GETFOREGROUNDLOCKTIMEOUT        =02000h;
    SPI_SETFOREGROUNDLOCKTIMEOUT        =02001h;
    SPI_GETACTIVEWNDTRKTIMEOUT          =02002h;
    SPI_SETACTIVEWNDTRKTIMEOUT          =02003h;
    SPI_GETFOREGROUNDFLASHCOUNT         =02004h;
    SPI_SETFOREGROUNDFLASHCOUNT         =02005h;

    SPIF_UPDATEINIFILE   = 00001h;
    SPIF_SENDWININICHANGE= 00002h;
    SPIF_SENDCHANGE      = SPIF_SENDWININICHANGE;


    METRICS_USEDEFAULT   = -1;

TYPE
    NONCLIENTMETRICSA = RECORD
        cbSize          : UINT;
        iBorderWidth    : WINT;
        iScrollWidth    : WINT;
        iScrollHeight   : WINT;
        iCaptionWidth   : WINT;
        iCaptionHeight  : WINT;
        lfCaptionFont   : LOGFONTA;
        iSmCaptionWidth : WINT;
        iSmCaptionHeight: WINT;
        lfSmCaptionFont : LOGFONTA;
        iMenuWidth      : WINT;
        iMenuHeight     : WINT;
        lfMenuFont      : LOGFONTA;
        lfStatusFont    : LOGFONTA;
        lfMessageFont   : LOGFONTA;
    END;
    PNONCLIENTMETRICSA          = POINTER TO NONCLIENTMETRICSA;
    LPNONCLIENTMETRICSA         = PNONCLIENTMETRICSA;

    NONCLIENTMETRICSW = RECORD
        cbSize          : UINT;
        iBorderWidth    : WINT;
        iScrollWidth    : WINT;
        iScrollHeight   : WINT;
        iCaptionWidth   : WINT;
        iCaptionHeight  : WINT;
        lfCaptionFont   : LOGFONTW;
        iSmCaptionWidth : WINT;
        iSmCaptionHeight: WINT;
        lfSmCaptionFont : LOGFONTW;
        iMenuWidth      : WINT;
        iMenuHeight     : WINT;
        lfMenuFont      : LOGFONTW;
        lfStatusFont    : LOGFONTW;
        lfMessageFont   : LOGFONTW;
    END;
    PNONCLIENTMETRICSW          = POINTER TO NONCLIENTMETRICSW;
    LPNONCLIENTMETRICSW         = PNONCLIENTMETRICSW;

%IF UNICODE %THEN
    NONCLIENTMETRICS            = NONCLIENTMETRICSW;
    PNONCLIENTMETRICS           = PNONCLIENTMETRICSW;
%ELSE
    NONCLIENTMETRICS            = NONCLIENTMETRICSA;
    PNONCLIENTMETRICS           = PNONCLIENTMETRICSA;
%END
    LPNONCLIENTMETRICS          = PNONCLIENTMETRICS;

CONST
    ARW_BOTTOMLEFT              = 0000h;
    ARW_BOTTOMRIGHT             = 0001h;
    ARW_TOPLEFT                 = 0002h;
    ARW_TOPRIGHT                = 0003h;
    ARW_STARTMASK               = 0003h;
    ARW_STARTRIGHT              = 0001h;
    ARW_STARTTOP                = 0002h;

    ARW_LEFT                    = 0000h;
    ARW_RIGHT                   = 0000h;
    ARW_UP                      = 0004h;
    ARW_DOWN                    = 0004h;
    ARW_HIDE                    = 0008h;
    ARW_VALID                   = 000Fh;

TYPE
    MINIMIZEDMETRICS = RECORD
        cbSize  : UINT;
        iWidth  : WINT;
        iHorzGap: WINT;
        iVertGap: WINT;
        iArrange: WINT;
    END;
    PMINIMIZEDMETRICS   = POINTER TO MINIMIZEDMETRICS;
    LPMINIMIZEDMETRICS  = PMINIMIZEDMETRICS;

    ICONMETRICSA = RECORD
        cbSize          : UINT;
        iHorzSpacing    : WINT;
        iVertSpacing    : WINT;
        iTitleWrap      : WINT;
        lfFont          : LOGFONTA;
    END;
    PICONMETRICSA       = POINTER TO ICONMETRICSA;
    LPICONMETRICSA      = PICONMETRICSA;

    ICONMETRICSW = RECORD
        cbSize          : UINT;
        iHorzSpacing    : WINT;
        iVertSpacing    : WINT;
        iTitleWrap      : WINT;
        lfFont          : LOGFONTW;
    END;
    PICONMETRICSW       = POINTER TO ICONMETRICSW;
    LPICONMETRICSW      = PICONMETRICSW;

%IF UNICODE %THEN
    ICONMETRICS         = ICONMETRICSW;
    PICONMETRICS        = PICONMETRICSW;
%ELSE
    ICONMETRICS         = ICONMETRICSA;
    PICONMETRICS        = PICONMETRICSA;
%END
    LPICONMETRICS       = PICONMETRICS;

    ANIMATIONINFO = RECORD
        cbSize          : UINT;
        iMinAnimate     : WINT;
    END;
    LPANIMATIONINFO     = POINTER TO ANIMATIONINFO;

    SERIALKEYSA = RECORD
        cbSize          : UINT;
        dwFlags         : DWORD;
        lpszActivePort  : LPSTR;
        lpszPort        : LPSTR;
        iBaudRate       : UINT;
        iPortState      : UINT;
        iActive         : UINT;
    END;
    LPSERIALKEYSA       = POINTER TO SERIALKEYSA;

    SERIALKEYSW = RECORD
        cbSize          : UINT;
        dwFlags         : DWORD;
        lpszActivePort  : LPWSTR;
        lpszPort        : LPWSTR;
        iBaudRate       : UINT;
        iPortState      : UINT;
        iActive         : UINT;
    END;
    LPSERIALKEYSW       = POINTER TO SERIALKEYSW;

%IF UNICODE %THEN
    SERIALKEYS          = SERIALKEYSW;
    LPSERIALKEYS        = LPSERIALKEYSW;
%ELSE
    SERIALKEYS          = SERIALKEYSA;
    LPSERIALKEYS        = LPSERIALKEYSA;
%END

CONST
    SERKF_SERIALKEYSON  = 000000001h;
    SERKF_AVAILABLE     = 000000002h;
    SERKF_INDICATOR     = 000000004h;

TYPE
    HIGHCONTRASTA = RECORD
        cbSize  : UINT;
        dwFlags : DWORD;
        lpszDefaultScheme : LPSTR;
    END;
    LPHIGHCONTRASTA     = POINTER TO HIGHCONTRASTA;

    HIGHCONTRASTW = RECORD
        cbSize  : UINT;
        dwFlags : DWORD;
        lpszDefaultScheme : LPWSTR;
    END;
    LPHIGHCONTRASTW     = POINTER TO HIGHCONTRASTW;

%IF UNICODE %THEN
    HIGHCONTRAST        = HIGHCONTRASTW;
    LPHIGHCONTRAST      = LPHIGHCONTRASTW;
%ELSE
    HIGHCONTRAST        = HIGHCONTRASTA;
    LPHIGHCONTRAST      = LPHIGHCONTRASTA;
%END

CONST
    HCF_HIGHCONTRASTON  = 00000001h;
    HCF_AVAILABLE       = 00000002h;
    HCF_HOTKEYACTIVE    = 00000004h;
    HCF_CONFIRMHOTKEY   = 00000008h;
    HCF_HOTKEYSOUND     = 00000010h;
    HCF_INDICATOR       = 00000020h;
    HCF_HOTKEYAVAILABLE = 00000040h;

    CDS_UPDATEREGISTRY  = 00000001h;
    CDS_TEST            = 00000002h;
    CDS_FULLSCREEN      = 00000004h;
    CDS_GLOBAL          =000000008h;
    CDS_SET_PRIMARY     =000000010h;
    CDS_RESET           =040000000h;
    CDS_SETRECT         =020000000h;
    CDS_NORESET         =010000000h;

    DISP_CHANGE_SUCCESSFUL   =    0;
    DISP_CHANGE_RESTART      =    1;
    DISP_CHANGE_FAILED       =   -1;
    DISP_CHANGE_BADMODE      =   -2;
    DISP_CHANGE_NOTUPDATED   =   -3;
    DISP_CHANGE_BADFLAGS     =   -4;
    DISP_CHANGE_BADPARAM     =   -5;

PROCEDURE ChangeDisplaySettingsA(VAR lpDevMode : DEVMODEA;
                                 dwFlags : DWORD) : LONG;

PROCEDURE ChangeDisplaySettingsW(VAR lpDevMode : DEVMODEW;
                                 dwFlags : DWORD) : LONG;

%IF UNICODE %THEN
PROCEDURE ChangeDisplaySettings = ChangeDisplaySettingsW;
%ELSE
PROCEDURE ChangeDisplaySettings = ChangeDisplaySettingsA;
%END

PROCEDURE ChangeDisplaySettingsExA(lpszDeviceName : ARRAY OF ACHAR;
                                   lpDevMode : DEVMODEA;
                                   hwnd : HWND;
                                   dwflags : DWORD;
                                   lParam : LPVOID) : LONG;

PROCEDURE ChangeDisplaySettingsExW(lpszDeviceName : ARRAY OF UCHAR;
                                   lpDevMode : DEVMODEW;
                                   hwnd : HWND;
                                   dwflags : DWORD;
                                   lParam : LPVOID) : LONG;

%IF UNICODE %THEN
PROCEDURE ChangeDisplaySettingsEx = ChangeDisplaySettingsExW;
%ELSE
PROCEDURE ChangeDisplaySettingsEx = ChangeDisplaySettingsExA;
%END

CONST
    ENUM_CURRENT_SETTINGS       = CAST(DWORD, -1);
    ENUM_REGISTRY_SETTINGS      = CAST(DWORD, -2);

PROCEDURE EnumDisplaySettingsA( lpszDeviceName : ARRAY OF ACHAR;
                                iModeNum : DWORD;
                                VAR lpDevMode : DEVMODEA) : BOOL;

PROCEDURE EnumDisplaySettingsW( lpszDeviceName : ARRAY OF UCHAR;
                                iModeNum : DWORD;
                                VAR lpDevMode : DEVMODEW) : BOOL;

%IF UNICODE %THEN
PROCEDURE EnumDisplaySettings = EnumDisplaySettingsW;
%ELSE
PROCEDURE EnumDisplaySettings = EnumDisplaySettingsA;
%END


PROCEDURE EnumDisplayDevicesA(Unused : PVOID;
                              iDevNum : DWORD;
                              lpDisplayDevice : DISPLAY_DEVICEA;
                              dwFlags : DWORD) : BOOL;

PROCEDURE EnumDisplayDevicesW(Unused : PVOID;
                              iDevNum : DWORD;
                              lpDisplayDevice : DISPLAY_DEVICEW;
                              dwFlags : DWORD) : BOOL;
%IF UNICODE %THEN
PROCEDURE EnumDisplayDevices = EnumDisplayDevicesW;
%ELSE
PROCEDURE EnumDisplayDevices = EnumDisplayDevicesA;
%END

PROCEDURE SystemParametersInfoA(uiAction : UINT;
                                uiParam : UINT;
                                pvParam : PVOID;
                                fWinIni : UINT) : BOOL;

PROCEDURE SystemParametersInfoW(uiAction : UINT;
                                uiParam : UINT;
                                pvParam : PVOID;
                                fWinIni : UINT) : BOOL;

%IF UNICODE %THEN
PROCEDURE SystemParametersInfo = SystemParametersInfoW;
%ELSE
PROCEDURE SystemParametersInfo = SystemParametersInfoA;
%END


TYPE
    FILTERKEYS = RECORD
        cbSize          : UINT;
        dwFlags         : DWORD;
        iWaitMSec       : DWORD;
        iDelayMSec      : DWORD;
        iRepeatMSec     : DWORD;
        iBounceMSec     : DWORD;
    END;
    LPFILTERKEYS        = POINTER TO FILTERKEYS;

CONST
    FKF_FILTERKEYSON    = 00000001h;
    FKF_AVAILABLE       = 00000002h;
    FKF_HOTKEYACTIVE    = 00000004h;
    FKF_CONFIRMHOTKEY   = 00000008h;
    FKF_HOTKEYSOUND     = 00000010h;
    FKF_INDICATOR       = 00000020h;
    FKF_CLICKON         = 00000040h;

TYPE
    STICKYKEYS = RECORD
        cbSize  : UINT;
        dwFlags : DWORD;
    END;
    LPSTICKYKEYS = POINTER TO STICKYKEYS;

CONST
    SKF_STICKYKEYSON    = 00000001h;
    SKF_AVAILABLE       = 00000002h;
    SKF_HOTKEYACTIVE    = 00000004h;
    SKF_CONFIRMHOTKEY   = 00000008h;
    SKF_HOTKEYSOUND     = 00000010h;
    SKF_INDICATOR       = 00000020h;
    SKF_AUDIBLEFEEDBACK = 00000040h;
    SKF_TRISTATE        = 00000080h;
    SKF_TWOKEYSOFF      = 00000100h;

    (*NT only*)
    SKF_LALTLATCHED       =010000000h;
    SKF_LCTLLATCHED       =004000000h;
    SKF_LSHIFTLATCHED     =001000000h;
    SKF_RALTLATCHED       =020000000h;
    SKF_RCTLLATCHED       =008000000h;
    SKF_RSHIFTLATCHED     =002000000h;
    SKF_LWINLATCHED       =040000000h;
    SKF_RWINLATCHED       =080000000h;
    SKF_LALTLOCKED        =000100000h;
    SKF_LCTLLOCKED        =000040000h;
    SKF_LSHIFTLOCKED      =000010000h;
    SKF_RALTLOCKED        =000200000h;
    SKF_RCTLLOCKED        =000080000h;
    SKF_RSHIFTLOCKED      =000020000h;
    SKF_LWINLOCKED        =000400000h;
    SKF_RWINLOCKED        =000800000h;

TYPE
    MOUSEKEYS = RECORD
        cbSize          : UINT;
        dwFlags         : DWORD;
        iMaxSpeed       : DWORD;
        iTimeToMaxSpeed : DWORD;
        iCtrlSpeed      : DWORD;
        dwReserved1     : DWORD;
        dwReserved2     : DWORD;
    END;
    LPMOUSEKEYS = POINTER TO MOUSEKEYS;

CONST
    MKF_MOUSEKEYSON     = 00000001h;
    MKF_AVAILABLE       = 00000002h;
    MKF_HOTKEYACTIVE    = 00000004h;
    MKF_CONFIRMHOTKEY   = 00000008h;
    MKF_HOTKEYSOUND     = 00000010h;
    MKF_INDICATOR       = 00000020h;
    MKF_MODIFIERS       = 00000040h;
    MKF_REPLACENUMBERS  = 00000080h;

    (*NT only*)
    MKF_LEFTBUTTONSEL   = 010000000h;
    MKF_RIGHTBUTTONSEL  = 020000000h;
    MKF_LEFTBUTTONDOWN  = 001000000h;
    MKF_RIGHTBUTTONDOWN = 002000000h;
    MKF_MOUSEMODE       = 080000000h;

TYPE
    ACCESSTIMEOUT = RECORD
        cbSize          : UINT;
        dwFlags         : DWORD;
        iTimeOutMSec    : DWORD;
    END;
    LPACCESSTIMEOUT     = POINTER TO ACCESSTIMEOUT;

CONST
    ATF_TIMEOUTON       = 00000001h;
    ATF_ONOFFFEEDBACK   = 00000002h;

    SSGF_NONE           = 0;
    SSGF_DISPLAY        = 3;

    SSTF_NONE           = 0;
    SSTF_CHARS          = 1;
    SSTF_BORDER         = 2;
    SSTF_DISPLAY        = 3;

    SSWF_NONE           = 0;
    SSWF_TITLE          = 1;
    SSWF_WINDOW         = 2;
    SSWF_DISPLAY        = 3;
    SSWF_CUSTOM         = 4;

TYPE
    SOUNDSENTRYA = RECORD
        cbSize                  : UINT;
        dwFlags                 : DWORD;
        iFSTextEffect           : DWORD;
        iFSTextEffectMSec       : DWORD;
        iFSTextEffectColorBits  : DWORD;
        iFSGrafEffect           : DWORD;
        iFSGrafEffectMSec       : DWORD;
        iFSGrafEffectColor      : DWORD;
        iWindowsEffect          : DWORD;
        iWindowsEffectMSec      : DWORD;
        lpszWindowsEffectDLL    : LPSTR;
        iWindowsEffectOrdinal   : DWORD;
    END;
    LPSOUNDSENTRYA = POINTER TO SOUNDSENTRYA;

    SOUNDSENTRYW = RECORD
        cbSize                  : UINT;
        dwFlags                 : DWORD;
        iFSTextEffect           : DWORD;
        iFSTextEffectMSec       : DWORD;
        iFSTextEffectColorBits  : DWORD;
        iFSGrafEffect           : DWORD;
        iFSGrafEffectMSec       : DWORD;
        iFSGrafEffectColor      : DWORD;
        iWindowsEffect          : DWORD;
        iWindowsEffectMSec      : DWORD;
        lpszWindowsEffectDLL    : LPWSTR;
        iWindowsEffectOrdinal   : DWORD;
    END;
    LPSOUNDSENTRYW = POINTER TO SOUNDSENTRYW;

%IF UNICODE %THEN
    SOUNDSENTRY = SOUNDSENTRYW;
    LPSOUNDSENTRY = LPSOUNDSENTRYW;
%ELSE
    SOUNDSENTRY = SOUNDSENTRYA;
    LPSOUNDSENTRY = LPSOUNDSENTRYA;
%END

CONST
    SSF_SOUNDSENTRYON   = 00000001h;
    SSF_AVAILABLE       = 00000002h;
    SSF_INDICATOR       = 00000004h;

TYPE
    TOGGLEKEYS = RECORD
        cbSize  : UINT;
        dwFlags : DWORD;
    END;
    LPTOGGLEKEYS        = POINTER TO TOGGLEKEYS;

CONST
    TKF_TOGGLEKEYSON    = 00000001h;
    TKF_AVAILABLE       = 00000002h;
    TKF_HOTKEYACTIVE    = 00000004h;
    TKF_CONFIRMHOTKEY   = 00000008h;
    TKF_HOTKEYSOUND     = 00000010h;
    TKF_INDICATOR       = 00000020h;

CONST
    ctlFirst             = 00400h;
    ctlLast              = 004ffh;
    psh1                 = 00400h;
    psh2                 = 00401h;
    psh3                 = 00402h;
    psh4                 = 00403h;
    psh5                 = 00404h;
    psh6                 = 00405h;
    psh7                 = 00406h;
    psh8                 = 00407h;
    psh9                 = 00408h;
    psh10                = 00409h;
    psh11                = 0040ah;
    psh12                = 0040bh;
    psh13                = 0040ch;
    psh14                = 0040dh;
    psh15                = 0040eh;
    psh16                = 0040fh;
    chx1                 = 00410h;
    chx2                 = 00411h;
    chx3                 = 00412h;
    chx4                 = 00413h;
    chx5                 = 00414h;
    chx6                 = 00415h;
    chx7                 = 00416h;
    chx8                 = 00417h;
    chx9                 = 00418h;
    chx10                = 00419h;
    chx11                = 0041ah;
    chx12                = 0041bh;
    chx13                = 0041ch;
    chx14                = 0041dh;
    chx15                = 0041eh;
    chx16                = 0041fh;
    rad1                 = 00420h;
    rad2                 = 00421h;
    rad3                 = 00422h;
    rad4                 = 00423h;
    rad5                 = 00424h;
    rad6                 = 00425h;
    rad7                 = 00426h;
    rad8                 = 00427h;
    rad9                 = 00428h;
    rad10                = 00429h;
    rad11                = 0042ah;
    rad12                = 0042bh;
    rad13                = 0042ch;
    rad14                = 0042dh;
    rad15                = 0042eh;
    rad16                = 0042fh;
    grp1                 = 00430h;
    grp2                 = 00431h;
    grp3                 = 00432h;
    grp4                 = 00433h;
    frm1                 = 00434h;
    frm2                 = 00435h;
    frm3                 = 00436h;
    frm4                 = 00437h;
    rct1                 = 00438h;
    rct2                 = 00439h;
    rct3                 = 0043ah;
    rct4                 = 0043bh;
    ico1                 = 0043ch;
    ico2                 = 0043dh;
    ico3                 = 0043eh;
    ico4                 = 0043fh;
    stc1                 = 00440h;
    stc2                 = 00441h;
    stc3                 = 00442h;
    stc4                 = 00443h;
    stc5                 = 00444h;
    stc6                 = 00445h;
    stc7                 = 00446h;
    stc8                 = 00447h;
    stc9                 = 00448h;
    stc10                = 00449h;
    stc11                = 0044ah;
    stc12                = 0044bh;
    stc13                = 0044ch;
    stc14                = 0044dh;
    stc15                = 0044eh;
    stc16                = 0044fh;
    stc17                = 00450h;
    stc18                = 00451h;
    stc19                = 00452h;
    stc20                = 00453h;
    stc21                = 00454h;
    stc22                = 00455h;
    stc23                = 00456h;
    stc24                = 00457h;
    stc25                = 00458h;
    stc26                = 00459h;
    stc27                = 0045ah;
    stc28                = 0045bh;
    stc29                = 0045ch;
    stc30                = 0045dh;
    stc31                = 0045eh;
    stc32                = 0045fh;
    lst1                 = 00460h;
    lst2                 = 00461h;
    lst3                 = 00462h;
    lst4                 = 00463h;
    lst5                 = 00464h;
    lst6                 = 00465h;
    lst7                 = 00466h;
    lst8                 = 00467h;
    lst9                 = 00468h;
    lst10                = 00469h;
    lst11                = 0046ah;
    lst12                = 0046bh;
    lst13                = 0046ch;
    lst14                = 0046dh;
    lst15                = 0046eh;
    lst16                = 0046fh;
    cmb1                 = 00470h;
    cmb2                 = 00471h;
    cmb3                 = 00472h;
    cmb4                 = 00473h;
    cmb5                 = 00474h;
    cmb6                 = 00475h;
    cmb7                 = 00476h;
    cmb8                 = 00477h;
    cmb9                 = 00478h;
    cmb10                = 00479h;
    cmb11                = 0047ah;
    cmb12                = 0047bh;
    cmb13                = 0047ch;
    cmb14                = 0047dh;
    cmb15                = 0047eh;
    cmb16                = 0047fh;
    edt1                 = 00480h;
    edt2                 = 00481h;
    edt3                 = 00482h;
    edt4                 = 00483h;
    edt5                 = 00484h;
    edt6                 = 00485h;
    edt7                 = 00486h;
    edt8                 = 00487h;
    edt9                 = 00488h;
    edt10                = 00489h;
    edt11                = 0048ah;
    edt12                = 0048bh;
    edt13                = 0048ch;
    edt14                = 0048dh;
    edt15                = 0048eh;
    edt16                = 0048fh;
    scr1                 = 00490h;
    scr2                 = 00491h;
    scr3                 = 00492h;
    scr4                 = 00493h;
    scr5                 = 00494h;
    scr6                 = 00495h;
    scr7                 = 00496h;
    scr8                 = 00497h;
    FILEOPENORD          = 1536;
    MULTIFILEOPENORD     = 1537;
    PRINTDLGORD          = 1538;
    PRNSETUPDLGORD       = 1539;
    FINDDLGORD           = 1540;
    REPLACEDLGORD        = 1541;
    FONTDLGORD           = 1542;
    FORMATDLGORD31       = 1543;
    FORMATDLGORD30       = 1544;
    PAGESETUPDLGORD      = 1546;

TYPE
    CRGB = RECORD
          bRed           : BYTE;
          bGreen         : BYTE;
          bBlue          : BYTE;
          bExtra         : BYTE;
    END;

CONST
    DLG_COLOR            = 10;
    COLOR_HUESCROLL      = 700;
    COLOR_SATSCROLL      = 701;
    COLOR_LUMSCROLL      = 702;
    COLOR_HUE            = 703;
    COLOR_SAT            = 704;
    COLOR_LUM            = 705;
    COLOR_RED            = 706;
    COLOR_GREEN          = 707;
    COLOR_BLUE           = 708;
    COLOR_CURRENT        = 709;
    COLOR_RAINBOW        = 710;
    COLOR_SAVE           = 711;
    COLOR_ADD            = 712;
    COLOR_SOLID          = 713;
    COLOR_TUNE           = 714;
    COLOR_SCHEMES        = 715;
    COLOR_ELEMENT        = 716;
    COLOR_SAMPLES        = 717;
    COLOR_PALETTE        = 718;
    COLOR_MIX            = 719;
    COLOR_BOX1           = 720;
    COLOR_CUSTOM1        = 721;
    COLOR_HUEACCEL       = 723;
    COLOR_SATACCEL       = 724;
    COLOR_LUMACCEL       = 725;
    COLOR_REDACCEL       = 726;
    COLOR_GREENACCEL     = 727;
    COLOR_BLUEACCEL      = 728;
    NUM_BASIC_COLORS     = 48;
    NUM_CUSTOM_COLORS    = 16;


PROCEDURE PostAppMessageA(a : HTASK;
                          b : UINT;
                          c : WPARAM;
                          d : LPARAM) : BOOL; MACRO;
BEGIN
    RETURN PostThreadMessageA(CAST(DWORD, a), b, c, d);
END PostAppMessageA;

PROCEDURE PostAppMessageW(a : HTASK;
                          b : UINT;
                          c : WPARAM;
                          d : LPARAM) : BOOL; MACRO;
BEGIN
    RETURN PostThreadMessageW(CAST(DWORD, a), b, c, d);
END PostAppMessageW;

%IF UNICODE %THEN
PROCEDURE PostAppMessage = PostAppMessageW;
%ELSE
PROCEDURE PostAppMessage = PostAppMessageA;
%END

PROCEDURE CreateWindowA(a : ARRAY OF ACHAR;
                       b : ARRAY OF ACHAR;
                       c : DWORD;
                       d : INTEGER;
                       e : INTEGER;
                       f : INTEGER;
                       g : INTEGER;
                       h : HWND;
                       i : HMENU;
                       j : HINSTANCE;
                       k : LPVOID) : HWND; MACRO;
BEGIN
    RETURN CreateWindowExA(0, a, b, c, d, e, f, g, h, i, j, k);
END CreateWindowA;

PROCEDURE CreateWindowW(a : ARRAY OF UCHAR;
                       b : ARRAY OF UCHAR;
                       c : DWORD;
                       d : INTEGER;
                       e : INTEGER;
                       f : INTEGER;
                       g : INTEGER;
                       h : HWND;
                       i : HMENU;
                       j : HINSTANCE;
                       k : LPVOID) : HWND; MACRO;
BEGIN
    RETURN CreateWindowExW(0, a, b, c, d, e, f, g, h, i, j, k);
END CreateWindowW;

%IF UNICODE %THEN
PROCEDURE CreateWindow = CreateWindowW;
%ELSE
PROCEDURE CreateWindow = CreateWindowA;
%END

PROCEDURE CreateDialogA(a : HINSTANCE;
                       b : ARRAY OF ACHAR;
                       c : HWND;
                       d : DLGPROC) : HWND; MACRO;
BEGIN
    RETURN CreateDialogParamA(a,b,c,d,0);
END CreateDialogA;

PROCEDURE CreateDialogW(a : HINSTANCE;
                       b : ARRAY OF UCHAR;
                       c : HWND;
                       d : DLGPROC) : HWND; MACRO;
BEGIN
    RETURN CreateDialogParamW(a,b,c,d,0);
END CreateDialogW;

%IF UNICODE %THEN
PROCEDURE CreateDialog = CreateDialogW;
%ELSE
PROCEDURE CreateDialog = CreateDialogA;
%END

PROCEDURE CreateDialogIndirectW(a : HINSTANCE;
                               lpTemplate : LPCDLGTEMPLATEW;
                               c : HWND;
                               d : DLGPROC) : HWND; MACRO;
BEGIN
    RETURN CreateDialogIndirectParamW(a, lpTemplate,c,d,0);
END CreateDialogIndirectW;

PROCEDURE CreateDialogIndirectA(a : HINSTANCE;
                               lpTemplate : LPCDLGTEMPLATEA;
                               c : HWND;
                               d : DLGPROC) : HWND; MACRO;
BEGIN
    RETURN CreateDialogIndirectParamA(a, lpTemplate,c,d,0);
END CreateDialogIndirectA;

%IF UNICODE %THEN
PROCEDURE CreateDialogIndirect = CreateDialogIndirectW;
%ELSE
PROCEDURE CreateDialogIndirect = CreateDialogIndirectA;
%END

PROCEDURE DialogBoxA(a : HINSTANCE;
                    b : ARRAY OF ACHAR;
                    c : HWND;
                    d : DLGPROC) : INTEGER; MACRO;
BEGIN
    RETURN DialogBoxParamA(a,b,c,d,0);
END DialogBoxA;

PROCEDURE DialogBoxW(a : HINSTANCE;
                    b : ARRAY OF UCHAR;
                    c : HWND;
                    d : DLGPROC) : INTEGER; MACRO;
BEGIN
    RETURN DialogBoxParamW(a,b,c,d,0);
END DialogBoxW;

%IF UNICODE %THEN
PROCEDURE DialogBox = DialogBoxW;
%ELSE
PROCEDURE DialogBox = DialogBoxA;
%END

PROCEDURE DialogBoxIndirectA(a : HINSTANCE;
                            b : HGLOBAL;
                            c : HWND;
                            d : DLGPROC) : INTEGER; MACRO;
BEGIN
    RETURN DialogBoxIndirectParamA(a,b,c,d,0);
END DialogBoxIndirectA;

PROCEDURE DialogBoxIndirectW(a : HINSTANCE;
                            b : HGLOBAL;
                            c : HWND;
                            d : DLGPROC) : INTEGER; MACRO;
BEGIN
    RETURN DialogBoxIndirectParamW(a,b,c,d,0);
END DialogBoxIndirectW;

%IF UNICODE %THEN
PROCEDURE DialogBoxIndirect = DialogBoxIndirectW;
%ELSE
PROCEDURE DialogBoxIndirect = DialogBoxIndirectA;
%END

PROCEDURE DefHookProc(a : INTEGER;
                      b : WPARAM;
                      c : LPARAM;
                      VAR d : HOOKPROC) : LRESULT; MACRO;
BEGIN
    RETURN CallNextHookEx(CAST(HHOOK, ADR(d)), a, b, c);
END DefHookProc;

PROCEDURE ExitWindows(a : DWORD; b : UINT) : BOOL; MACRO;
BEGIN
    UNREFERENCED_PARAMETER(a);
    UNREFERENCED_PARAMETER(b);
    RETURN ExitWindowsEx(EWX_LOGOFF, 0FFFFFFFFH);
END ExitWindows;

PROCEDURE GetNextWindow(a : HWND; b: UINT) : HWND; MACRO;
BEGIN
    RETURN GetWindow(a, b);
END GetNextWindow;

PROCEDURE GetSysModalWindow() : HWND; MACRO;
BEGIN
    RETURN CAST(HWND, NULL);
END GetSysModalWindow;

PROCEDURE SetSysModalWindow(a : HWND) : HWND; MACRO;
BEGIN
    UNREFERENCED_PARAMETER(a);
    RETURN CAST(HWND, NULL);
END SetSysModalWindow;

PROCEDURE GetWindowTask(a : HWND) : HTASK; MACRO;
VAR
    b : DWORD;
BEGIN
    <*/PUSH/NOWARN:U*>
    RETURN CAST(HTASK, VAL(DWORD_PTR, GetWindowThreadProcessId(a, b)));
    <*/POP*>
END GetWindowTask;

PROCEDURE CopyCursor(a : HCURSOR): HCURSOR; MACRO;
BEGIN
    RETURN CAST(HCURSOR, CopyIcon(a:HICON));
END CopyCursor;

(* MACROS *)
<*/PUSH/PACK*>
TYPE Wtype =
    RECORD
        CASE : INTEGER OF
            1: W                : CARDINAL16;
            |
            2: B1,B2            : SHORTCARD;
        ELSE
      END;
   END;

TYPE Ltype =
    RECORD
        CASE : INTEGER OF
            0: L                : CARDINAL32;
            |
            1: W1, W2           : CARDINAL16;
            |
            2: B1,B2,B3,B4      : BYTE;
        ELSE
      END;
   END;
<*/POP*>

PROCEDURE MAKELONG(LowWord, HiWord : CARDINAL16): LONG; MACRO;
BEGIN
    RETURN (ORD(HiWord) SHL 16) BOR ORD(LowWord);
END MAKELONG;

PROCEDURE MAKELPARAM(LowWord, HiWord : CARDINAL16): LPARAM; MACRO;
BEGIN
    RETURN (ORD(HiWord) SHL 16) BOR ORD(LowWord);
END MAKELPARAM;

PROCEDURE MAKEWPARAM(LowWord, HiWord : CARDINAL16): WPARAM; MACRO;
BEGIN
    RETURN (ORD(HiWord) SHL 16) BOR ORD(LowWord);
END MAKEWPARAM;

PROCEDURE MAKELRESULT(LowWord, HiWord : CARDINAL16): LRESULT; MACRO;
BEGIN
    RETURN (ORD(HiWord) SHL 16) BOR ORD(LowWord);
END MAKELRESULT;

PROCEDURE MAKEWORD(lowbyte, highbyte : CARDINAL8) : WORD; MACRO;
BEGIN
    RETURN (VAL(CARDINAL16, highbyte) SHL 16) BOR VAL(CARDINAL16, lowbyte);
END MAKEWORD;

PROCEDURE LOWORD(l : CARDINAL32): WORD; MACRO;
BEGIN
    RETURN l BAND 0FFFFh;
END LOWORD;

PROCEDURE HIWORD(l : CARDINAL32): WORD; MACRO;
BEGIN
    RETURN (l SHR 16) BAND 0FFFFh;
END HIWORD;

PROCEDURE LOBYTE(w : CARDINAL16) : BYTE; MACRO;
BEGIN
    RETURN w BAND 0FFh;
END LOBYTE;

PROCEDURE HIBYTE(w : CARDINAL16) : BYTE; MACRO;
BEGIN
    RETURN (w SHR 8) BAND 0FFh;
END HIBYTE;

PROCEDURE AnsiToOem(lpszSrc : ARRAY OF ACHAR; VAR lpszDst : ARRAY OF ACHAR) : BOOL; MACRO;
BEGIN
    RETURN CharToOemA(lpszSrc, lpszDst);
END AnsiToOem;

PROCEDURE OemToAnsi(lpszSrc : ARRAY OF ACHAR; VAR lpszDst : ARRAY OF ACHAR) : BOOL; MACRO;
BEGIN
    RETURN OemToCharA(lpszSrc, lpszDst);
END OemToAnsi;

PROCEDURE AnsiToOemBuff(lpszSrc : ARRAY OF ACHAR;
                         VAR lpszDst : ARRAY OF ACHAR;
                         cchDstLength : DWORD) : BOOL; MACRO;
BEGIN
    RETURN CharToOemBuffA(lpszSrc, lpszDst, cchDstLength);
END AnsiToOemBuff;

PROCEDURE OemToAnsiBuff(lpszSrc : ARRAY OF ACHAR;
                         VAR lpszDst : ARRAY OF ACHAR;
                         cchDstLength : DWORD) : BOOL; MACRO;
BEGIN
    RETURN OemToCharBuffA(lpszSrc, lpszDst, cchDstLength);
END OemToAnsiBuff;

PROCEDURE AnsiUpper(ch : ACHAR) : ACHAR; MACRO;
BEGIN
    RETURN CharUpperA(ORD(ch));
END AnsiUpper;

PROCEDURE AnsiUpperBuff(VAR lpsz : ARRAY OF ACHAR; cchLength : DWORD) : DWORD; MACRO;
BEGIN
    RETURN CharUpperBuffA(lpsz, cchLength);
END AnsiUpperBuff;

PROCEDURE AnsiLower(ch : ACHAR) : ACHAR; MACRO;
BEGIN
    RETURN CharLowerA(ORD(ch));
END AnsiLower;

PROCEDURE AnsiLowerBuff(VAR lpsz : ARRAY OF ACHAR; cchLength : DWORD) : DWORD; MACRO;
BEGIN
    RETURN CharLowerBuffA(lpsz, cchLength);
END AnsiLowerBuff;

PROCEDURE AnsiNext(lpsz : ARRAY OF ACHAR) : LPSTR; MACRO;
BEGIN
    RETURN CharNextA(lpsz);
END AnsiNext;

PROCEDURE AnsiPrev(lpszStart : ARRAY OF ACHAR; lpszCurrent : ARRAY OF ACHAR) : LPSTR; MACRO;
BEGIN
    RETURN CharPrevA(lpszStart, lpszCurrent);
END AnsiPrev;

 (*Duplicated in WIN32*)
CONST
    SLE_ERROR            = 000000001h;
    SLE_MINORERROR       = 000000002h;
    SLE_WARNING          = 000000003h;

PROCEDURE SetLastErrorEx(dwErrCode : DWORD;
                         dwType : DWORD);


(*
 * Multimonitor API.
 *)
CONST
    MONITOR_DEFAULTTONULL       = 00000000h;
    MONITOR_DEFAULTTOPRIMARY    = 00000001h;
    MONITOR_DEFAULTTONEAREST    = 00000002h;

PROCEDURE MonitorFromPoint(pt : VALUE POINT; dwFlags : DWORD) : HMONITOR;

PROCEDURE MonitorFromRect(lprc : RECT; dwFlags : DWORD) : HMONITOR;

PROCEDURE MonitorFromWindow(hwnd : HWND; dwFlags : DWORD) : HMONITOR;

CONST
    MONITORINFOF_PRIMARY        = 00000001h;

TYPE
    MONITORINFO = RECORD
    cbSize      : DWORD;
    rcMonitor   : RECT;
    rcWork      : RECT;
    dwFlags     : DWORD;
    END;
    LPMONITORINFO = POINTER TO MONITORINFO;

    MONITORINFOEXA = RECORD
    cbSize      : DWORD;
    rcMonitor   : RECT;
    rcWork      : RECT;
    dwFlags     : DWORD;
    szDevice    : ARRAY [0..CCHDEVICENAME-1] OF ACHAR;
    END;
    LPMONITORINFOEXA = POINTER TO MONITORINFOEXA;

    MONITORINFOEXW = RECORD
    cbSize      : DWORD;
    rcMonitor   : RECT;
    rcWork      : RECT;
    dwFlags     : DWORD;
    szDevice    : ARRAY [0..CCHDEVICENAME-1] OF UCHAR;
    END;
    LPMONITORINFOEXW = POINTER TO MONITORINFOEXW;

    %IF UNICODE %THEN
    MONITORINFOEX = MONITORINFOEXW;
    LPMONITORINFOEX = LPMONITORINFOEXW;
    %ELSE
    MONITORINFOEX = MONITORINFOEXA;
    LPMONITORINFOEX = LPMONITORINFOEXA;
    %END

PROCEDURE GetMonitorInfoA(hMonitor : HMONITOR; VAR lpmi : MONITORINFO) : BOOL;
PROCEDURE GetMonitorInfoW(hMonitor : HMONITOR; VAR lpmi : MONITORINFO) : BOOL;

%IF UNICODE %THEN
PROCEDURE GetMonitorInfo = GetMonitorInfoW;
%ELSE
PROCEDURE GetMonitorInfo = GetMonitorInfoA;
%END

TYPE MONITORENUMPROC = PROCEDURE(HMONITOR, HDC, CONST RECT, LPARAM) : BOOL [EXPORT];

PROCEDURE EnumDisplayMonitors(hdc : HDC;
                              lprcClip : RECT;
                              lpfnEnum : MONITORENUMPROC;
                              dwData : LPARAM) : BOOL;


PROCEDURE SetDebugErrorLevel(dwLevel : DWORD);


(*
 * WinEvents - Active Accessibility hooks
 *)

PROCEDURE NotifyWinEvent(event : DWORD;
                         hwnd : HWND;
                         idObject : LONG;
                         idChild : LONG);

TYPE
    WINEVENTPROC = PROCEDURE(HWINEVENTHOOK(*hWinEventHook*),
                             DWORD         (*event*),
                             HWND          (*hwnd*),
                             LONG          (*idObject*),
                             LONG          (*idChild*),
                             DWORD         (*idEventThread*),
                             DWORD         (*dwmsEventTime*)) [EXPORT];

(*
 * idObject values for WinEventProc and NotifyWinEvent
 *)

(*
 * hwnd + idObject can be used with OLEACC.DLL's OleGetObjectFromWindow()
 * to get an interface pointer to the container.  indexChild is the item
 * within the container in question.  Setup a VARIANT with vt VT_I4 and
 * lVal the indexChild and pass that in to all methods.  Then you
 * are raring to go.
 *)


(*
 * Common object IDs (cookies, only for sending WM_GETOBJECT to get at the
 * thing in question).  Positive IDs are reserved for apps (app specific),
 * negative IDs are system things and are global, 0 means "just little old
 * me".
 *)

CONST
    CHILDID_SELF        =0;
    INDEXID_OBJECT      =0;
    INDEXID_CONTAINER   =0;

(*
 * Reserved IDs for system objects
 *)
    OBJID_WINDOW        =000000000h;
    OBJID_SYSMENU       =0FFFFFFFFh;
    OBJID_TITLEBAR      =0FFFFFFFEh;
    OBJID_MENU          =0FFFFFFFDh;
    OBJID_CLIENT        =0FFFFFFFCh;
    OBJID_VSCROLL       =0FFFFFFFBh;
    OBJID_HSCROLL       =0FFFFFFFAh;
    OBJID_SIZEGRIP      =0FFFFFFF9h;
    OBJID_CARET         =0FFFFFFF8h;
    OBJID_CURSOR        =0FFFFFFF7h;
    OBJID_ALERT         =0FFFFFFF6h;
    OBJID_SOUND         =0FFFFFFF5h;

(*
 * EVENT DEFINITION
 *)
    EVENT_MIN           =000000001h;
    EVENT_MAX           =07FFFFFFFh;


(*
 *  EVENT_SYSTEM_SOUND
 *  Sent when a sound is played.  Currently nothing is generating this, we
 *  this event when a system sound (for menus, etc) is played.  Apps
 *  generate this, if accessible, when a private sound is played.  For
 *  example, if Mail plays a "New Mail" sound.
 *
 *  System Sounds:
 *  (Generated by PlaySoundEvent in USER itself)
 *      hwnd            is NULL
 *      idObject        is OBJID_SOUND
 *      idChild         is sound child ID if one
 *  App Sounds:
 *  (PlaySoundEvent won't generate notification; up to app)
 *      hwnd + idObject gets interface pointer to Sound object
 *      idChild identifies the sound in question
 *  are going to be cleaning up the SOUNDSENTRY feature in the control panel
 *  and will use this at that time.  Applications implementing WinEvents
 *  are perfectly welcome to use it.  Clients of IAccessible* will simply
 *  turn around and get back a non-visual object that describes the sound.
 *)

    EVENT_SYSTEM_SOUND              =00001h;

(*
 * EVENT_SYSTEM_ALERT
 * System Alerts:
 * (Generated by MessageBox() calls for example)
 *      hwnd            is hwndMessageBox
 *      idObject        is OBJID_ALERT
 * App Alerts:
 * (Generated whenever)
 *      hwnd+idObject gets interface pointer to Alert
 *)

    EVENT_SYSTEM_ALERT              = 00002h;

(*
 * EVENT_SYSTEM_FOREGROUND
 * Sent when the foreground (active) window changes, even if it is changing
 * to another window in the same thread as the previous one.
 *      hwnd            is hwndNewForeground
 *      idObject        is OBJID_WINDOW
 *      idChild    is INDEXID_OBJECT
 *)

    EVENT_SYSTEM_FOREGROUND         = 00003h;

(*
 * Menu
 *      hwnd            is window (top level window or popup menu window)
 *      idObject        is ID of control (OBJID_MENU, OBJID_SYSMENU, OBJID_SELF for popup)
 *      idChild         is CHILDID_SELF
 *
 * EVENT_SYSTEM_MENUSTART
 * EVENT_SYSTEM_MENUEND
 * For MENUSTART, hwnd+idObject+idChild refers to the control with the menu bar,
 *  or the control bringing up the context menu.
 *
 * Sent when entering into and leaving from menu mode (system, app bar, and
 * track popups).
 *)
    EVENT_SYSTEM_MENUSTART          =00004h;
    EVENT_SYSTEM_MENUEND            =00005h;

(*
 * EVENT_SYSTEM_MENUPOPUPSTART
 * EVENT_SYSTEM_MENUPOPUPEND
 * Sent when a menu popup comes up and just before it is taken down.  Note
 * that for a call to TrackPopupMenu(), a client will see EVENT_SYSTEM_MENUSTART
 * followed almost immediately by EVENT_SYSTEM_MENUPOPUPSTART for the popup
 * being shown.
 *
 * For MENUPOPUP, hwnd+idObject+idChild refers to the NEW popup coming up, not the
 * parent item which is hierarchical.  You can get the parent menu/popup by
 * asking for the accParent object.
 *)

    EVENT_SYSTEM_MENUPOPUPSTART     =00006h;
    EVENT_SYSTEM_MENUPOPUPEND       =00007h;


(*
 * EVENT_SYSTEM_CAPTURESTART
 * EVENT_SYSTEM_CAPTUREEND
 * Sent when a window takes the capture and releases the capture.
 *)
    EVENT_SYSTEM_CAPTURESTART       =00008h;
    EVENT_SYSTEM_CAPTUREEND         =00009h;

(*
 * Move Size
 * EVENT_SYSTEM_MOVESIZESTART
 * EVENT_SYSTEM_MOVESIZEEND
 * Sent when a window enters and leaves move-size dragging mode.
 *)

    EVENT_SYSTEM_MOVESIZESTART      =0000Ah;
    EVENT_SYSTEM_MOVESIZEEND        =0000Bh;

(*
 * Context Help
 * EVENT_SYSTEM_CONTEXTHELPSTART
 * EVENT_SYSTEM_CONTEXTHELPEND
 * Sent when a window enters and leaves context sensitive help mode.
 *)

    EVENT_SYSTEM_CONTEXTHELPSTART   =0000Ch;
    EVENT_SYSTEM_CONTEXTHELPEND     =0000Dh;

(*
 * Drag & Drop
 * EVENT_SYSTEM_DRAGDROPSTART
 * EVENT_SYSTEM_DRAGDROPEND
 * Send the START notification just before going into drag&drop loop.  Send
 * the END notification just after canceling out.
 * Note that it is up to apps and OLE to generate this, since the system
 * doesn't know.  Like EVENT_SYSTEM_SOUND, it will be a while before this
 * is prevalent.
 *)
    EVENT_SYSTEM_DRAGDROPSTART      =0000Eh;
    EVENT_SYSTEM_DRAGDROPEND        =0000Fh;

(*
 * Dialog
 * Send the START notification right after the dialog is completely
 *  initialized and visible.  Send the END right before the dialog
 *  is hidden and goes away.
 * EVENT_SYSTEM_DIALOGSTART
 * EVENT_SYSTEM_DIALOGEND
 *)

    EVENT_SYSTEM_DIALOGSTART        =00010h;
    EVENT_SYSTEM_DIALOGEND          =00011h;

(*
 * EVENT_SYSTEM_SCROLLING
 * EVENT_SYSTEM_SCROLLINGSTART
 * EVENT_SYSTEM_SCROLLINGEND
 * Sent when beginning and ending the tracking of a scrollbar in a window,
 * and also for scrollbar controls.
 *)
    EVENT_SYSTEM_SCROLLINGSTART     =00012h;
    EVENT_SYSTEM_SCROLLINGEND       =00013h;

(*
 * Alt-Tab Window
 * Send the START notification right after the switch window is initialized
 * and visible.  Send the END right before it is hidden and goes away.
 * EVENT_SYSTEM_SWITCHSTART
 * EVENT_SYSTEM_SWITCHEND
 *)
    EVENT_SYSTEM_SWITCHSTART        =00014h;
    EVENT_SYSTEM_SWITCHEND          =00015h;

(*
 * EVENT_SYSTEM_MINIMIZESTART
 * EVENT_SYSTEM_MINIMIZEEND
 * Sent when a window minimizes and just before it restores.
 *)
    EVENT_SYSTEM_MINIMIZESTART      =00016h;
    EVENT_SYSTEM_MINIMIZEEND        =00017h;

(*
 * Object events
 *
 * The system AND apps generate these.  The system generates these for
 * real windows.  Apps generate these for objects within their window which
 * act like a separate control, e.g. an item in a list view.
 *
 * When the system generate them, dwParam2 is always WMOBJID_SELF.  When
 * apps generate them, apps put the has-meaning-to-the-app-only ID value
 * in dwParam2.
 * For all events, if you want detailed accessibility information, callers
 * should
 *      * Call AccessibleObjectFromWindow() with the hwnd, idObject parameters
 *          of the event, and IID_IAccessible as the REFIID, to get back an
 *          IAccessible* to talk to
 *      * Initialize and fill in a VARIANT as VT_I4 with lVal the idChild
 *          parameter of the event.
 *      * If idChild isn't zero, call get_accChild() in the container to see
 *          if the child is an object in its own right.  If so, you will get
 *          back an IDispatch* object for the child.  You should release the
 *          parent, and call QueryInterface() on the child object to get its
 *          IAccessible*.  Then you talk directly to the child.  Otherwise,
 *          if get_accChild() returns you nothing, you should continue to
 *          use the child VARIANT.  You will ask the container for the properties
 *          of the child identified by the VARIANT.  In other words, the
 *          child in this case is accessible but not a full-blown object.
 *          Like a button on a titlebar which is 'small' and has no children.
 *)

(*
 * For all EVENT_OBJECT events,
 *      hwnd is the dude to Send the WM_GETOBJECT message to (unless NULL,
 *          see above for system things)
 *      idObject is the ID of the object that can resolve any queries a
 *          client might have.  It's a way to deal with windowless controls,
 *          controls that are just drawn on the screen in some larger parent
 *          window (like SDM), or standard frame elements of a window.
 *      idChild is the piece inside of the object that is affected.  This
 *          allows clients to access things that are too small to have full
 *          blown objects in their own right.  Like the thumb of a scrollbar.
 *          The hwnd/idObject pair gets you to the container, the dude you
 *          probably want to talk to most of the time anyway.  The idChild
 *          can then be passed into the acc properties to get the name/value
 *          of it as needed.
 *
 * Example #1:
 *      System propagating a listbox selection change
 *      EVENT_OBJECT_SELECTION
 *          hwnd == listbox hwnd
 *          idObject == OBJID_WINDOW
 *          idChild == new selected item, or CHILDID_SELF if
 *              nothing now selected within container.
 *      Word '97 propagating a listbox selection change
 *          hwnd == SDM window
 *          idObject == SDM ID to get at listbox 'control'
 *          idChild == new selected item, or CHILDID_SELF if
 *              nothing
 *
 * Example #2:
 *      System propagating a menu item selection on the menu bar
 *      EVENT_OBJECT_SELECTION
 *          hwnd == top level window
 *          idObject == OBJID_MENU
 *          idChild == ID of child menu bar item selected
 *
 * Example #3:
 *      System propagating a dropdown coming off of said menu bar item
 *      EVENT_OBJECT_CREATE
 *          hwnd == popup item
 *          idObject == OBJID_WINDOW
 *          idChild == CHILDID_SELF
 *
 * Example #4:
 *
 * For EVENT_OBJECT_REORDER, the object referred to by hwnd/idObject is the
 * PARENT container in which the zorder is occurring.  This is because if
 * one child is zordering, all of them are changing their relative zorder.
 *)
    EVENT_OBJECT_CREATE                 =08000h;  (* hwnd + ID + idChild is created item*)
    EVENT_OBJECT_DESTROY                =08001h;  (* hwnd + ID + idChild is destroyed item*)
    EVENT_OBJECT_SHOW                   =08002h;  (* hwnd + ID + idChild is shown item*)
    EVENT_OBJECT_HIDE                   =08003h;  (* hwnd + ID + idChild is hidden item*)
    EVENT_OBJECT_REORDER                =08004h;  (* hwnd + ID + idChild is parent of zordering children*)

(*
 * NOTE:
 * Minimize the number of notifications!
 *
 * When you are hiding a parent object, obviously all child objects are no
 * longer visible on screen.  They still have the same "visible" status,
 * but are not truly visible.  Hence do not send HIDE notifications for the
 * children also.  One implies all.  The same goes for SHOW.
 *)


    EVENT_OBJECT_FOCUS                  =08005h;  (* hwnd + ID + idChild is focused item*)
    EVENT_OBJECT_SELECTION              =08006h;  (* hwnd + ID + idChild is selected item (if only one), or idChild is OBJID_WINDOW if complex*)
    EVENT_OBJECT_SELECTIONADD           =08007h;  (* hwnd + ID + idChild is item added*)
    EVENT_OBJECT_SELECTIONREMOVE        =08008h;  (* hwnd + ID + idChild is item removed*)
    EVENT_OBJECT_SELECTIONWITHIN        =08009h;  (* hwnd + ID + idChild is parent of changed selected items*)

(*
 * NOTES:
 * There is only one "focused" child item in a parent.  This is the place
 * keystrokes are going at a given moment.  Hence only send a notification
 * about where the NEW focus is going.  A NEW item getting the focus already
 * implies that the OLD item is losing it.
 *
 * SELECTION however can be multiple.  Hence the different SELECTION
 * notifications.  Here's when to use each:
 *
 * (1) Send a SELECTION notification in the simple single selection
 *     case (like the focus) when the item with the selection is
 *     merely moving to a different item within a container.  hwnd + ID
 *     is the container control, idChildItem is the new child with the
 *     selection.
 *
 * (2) Send a SELECTIONADD notification when a new item has simply been added
 *     to the selection within a container.  This is appropriate when the
 *     number of newly selected items is very small.  hwnd + ID is the
 *     container control, idChildItem is the new child added to the selection.
 *
 * (3) Send a SELECTIONREMOVE notification when a new item has simply been
 *     removed from the selection within a container.  This is appropriate
 *     when the number of newly selected items is very small, just like
 *     SELECTIONADD.  hwnd + ID is the container control, idChildItem is the
 *     new child removed from the selection.
 *
 * (4) Send a SELECTIONWITHIN notification when the selected items within a
 *     control have changed substantially.  Rather than propagate a large
 *     number of changes to reflect removal for some items, addition of
 *     others, just tell somebody who cares that a lot happened.  It will
 *     be faster an easier for somebody watching to just turn around and
 *     query the container control what the new bunch of selected items
 *     are.
 *)

    EVENT_OBJECT_STATECHANGE            =0800Ah;  (* hwnd + ID + idChild is item w/ state change*)

(*
 * Examples of when to send an EVENT_OBJECT_STATECHANGE include
 *      * It is being enabled/disabled (USER does for windows)
 *      * It is being pressed/released (USER does for buttons)
 *      * It is being checked/unchecked (USER does for radio/check buttons)
 *)
    EVENT_OBJECT_LOCATIONCHANGE         =0800Bh;  (* hwnd + ID + idChild is moved/sized item*)

(*
 * Note:
 * A LOCATIONCHANGE is not sent for every child object when the parent
 * changes shape/moves.  Send one notification for the topmost object
 * that is changing.  For example, if the user resizes a top level window,
 * USER will generate a LOCATIONCHANGE for it, but not for the menu bar,
 * title bar, scrollbars, etc.  that are also changing shape/moving.
 *
 * In other words, it only generates LOCATIONCHANGE notifications for
 * real windows that are moving/sizing.  It will not generate a LOCATIONCHANGE
 * for every non-floating child window when the parent moves (the children are
 * logically moving also on screen, but not relative to the parent).
 *
 * Now, if the app itself resizes child windows as a result of being
 * sized, USER will generate LOCATIONCHANGEs for those dudes also because
 * it doesn't know better.
 *
 * Note also that USER will generate LOCATIONCHANGE notifications for two
 * non-window sys objects:
 *      (1) System caret
 *      (2) Cursor
 *)

    EVENT_OBJECT_NAMECHANGE             =0800Ch;  (* hwnd + ID + idChild is item w/ name change*)
    EVENT_OBJECT_DESCRIPTIONCHANGE      =0800Dh;  (* hwnd + ID + idChild is item w/ desc change*)
    EVENT_OBJECT_VALUECHANGE            =0800Eh;  (* hwnd + ID + idChild is item w/ value change*)
    EVENT_OBJECT_PARENTCHANGE           =0800Fh;  (* hwnd + ID + idChild is item w/ new parent*)
    EVENT_OBJECT_HELPCHANGE             =08010h;  (* hwnd + ID + idChild is item w/ help change*)
    EVENT_OBJECT_DEFACTIONCHANGE        =08011h;  (* hwnd + ID + idChild is item w/ def action change*)
    EVENT_OBJECT_ACCELERATORCHANGE      =08012h;  (* hwnd + ID + idChild is item w/ keybd accel change*)

(*
 * Child IDs
 *)

(*
 * System Sounds (idChild of system SOUND notification)
 *)
    SOUND_SYSTEM_STARTUP            =1;
    SOUND_SYSTEM_SHUTDOWN           =2;
    SOUND_SYSTEM_BEEP               =3;
    SOUND_SYSTEM_ERROR              =4;
    SOUND_SYSTEM_QUESTION           =5;
    SOUND_SYSTEM_WARNING            =6;
    SOUND_SYSTEM_INFORMATION        =7;
    SOUND_SYSTEM_MAXIMIZE           =8;
    SOUND_SYSTEM_MINIMIZE           =9;
    SOUND_SYSTEM_RESTOREUP          =10;
    SOUND_SYSTEM_RESTOREDOWN        =11;
    SOUND_SYSTEM_APPSTART           =12;
    SOUND_SYSTEM_FAULT              =13;
    SOUND_SYSTEM_APPEND             =14;
    SOUND_SYSTEM_MENUCOMMAND        =15;
    SOUND_SYSTEM_MENUPOPUP          =16;
    CSOUND_SYSTEM                   =16;

(*
 * System Alerts (indexChild of system ALERT notification)
 *)
    ALERT_SYSTEM_INFORMATIONAL      =1;       (* MB_INFORMATION*)
    ALERT_SYSTEM_WARNING            =2;       (* MB_WARNING*)
    ALERT_SYSTEM_ERROR              =3;       (* MB_ERROR*)
    ALERT_SYSTEM_QUERY              =4;       (* MB_QUESTION*)
    ALERT_SYSTEM_CRITICAL           =5;       (* HardSysErrBox*)
    CALERT_SYSTEM                   =6;

PROCEDURE SetWinEventHook(eventMin : DWORD;
                          eventMax : DWORD;
                          hmodWinEventProc : HMODULE;
                          pfnWinEventProc : WINEVENTPROC;
                          idProcess : DWORD;
                          idThread : DWORD;
                          dwFlags : DWORD) : HWINEVENTHOOK;

PROCEDURE UnhookWinEvent(hWinEventHook : HWINEVENTHOOK) : BOOL;

(*
 * dwFlags for SetWinEventHook
 *)
CONST
    WINEVENT_OUTOFCONTEXT   =00000h;  (* Events are ASYNC*)
    WINEVENT_SKIPOWNTHREAD  =00001h;  (* Don't call back for events on installer's thread*)
    WINEVENT_SKIPOWNPROCESS =00002h;  (* Don't call back for events on installer's process*)
    WINEVENT_INCONTEXT      =00004h;  (* Events are SYNC, this causes your dll to be injected into every process*)

TYPE
    GUITHREADINFO = RECORD
    cbSize              : DWORD;
    flags               : DWORD;
    hwndActive          : HWND;
    hwndFocus           : HWND;
    hwndCapture         : HWND;
    hwndMenuOwner       : HWND;
    hwndMoveSize        : HWND;
    hwndCaret           : HWND;
    rcCaret             : RECT;
    END;
    PGUITHREADINFO = POINTER TO GUITHREADINFO;

CONST
    GUI_CARETBLINKING   =000000001h;
    GUI_INMOVESIZE      =000000002h;
    GUI_INMENUMODE      =000000004h;
    GUI_SYSTEMMENUMODE  =000000008h;
    GUI_POPUPMENUMODE   =000000010h;

PROCEDURE GetGUIThreadInfo(idThread : DWORD;
                           VAR pgui : GUITHREADINFO) : BOOL;

PROCEDURE GetWindowModuleFileNameA(hwnd : HWND;
                                   VAR pszFileName : ARRAY OF ACHAR;
                                   cchFileNameMax : UINT) : UINT;

PROCEDURE GetWindowModuleFileNameW(hwnd : HWND;
                                   VAR pszFileName : ARRAY OF UCHAR;
                                   cchFileNameMax : UINT) : UINT;

%IF UNICODE %THEN
PROCEDURE GetWindowModuleFileName = GetWindowModuleFileNameW;
%ELSE
PROCEDURE GetWindowModuleFileName = GetWindowModuleFileNameA;
%END

CONST
    STATE_SYSTEM_UNAVAILABLE        = 00000001h;  (* Disabled*)
    STATE_SYSTEM_SELECTED           = 00000002h;
    STATE_SYSTEM_FOCUSED            = 00000004h;
    STATE_SYSTEM_PRESSED            = 00000008h;
    STATE_SYSTEM_CHECKED            = 00000010h;
    STATE_SYSTEM_MIXED              = 00000020h;  (* 3-state checkbox or toolbar button*)
    STATE_SYSTEM_READONLY           = 00000040h;
    STATE_SYSTEM_HOTTRACKED         = 00000080h;
    STATE_SYSTEM_DEFAULT            = 00000100h;
    STATE_SYSTEM_EXPANDED           = 00000200h;
    STATE_SYSTEM_COLLAPSED          = 00000400h;
    STATE_SYSTEM_BUSY               = 00000800h;
    STATE_SYSTEM_FLOATING           = 00001000h;  (* Children "owned" not "contained" by parent*)
    STATE_SYSTEM_MARQUEED           = 00002000h;
    STATE_SYSTEM_ANIMATED           = 00004000h;
    STATE_SYSTEM_INVISIBLE          = 00008000h;
    STATE_SYSTEM_OFFSCREEN          = 00010000h;
    STATE_SYSTEM_SIZEABLE           = 00020000h;
    STATE_SYSTEM_MOVEABLE           = 00040000h;
    STATE_SYSTEM_SELFVOICING        = 00080000h;
    STATE_SYSTEM_FOCUSABLE          = 00100000h;
    STATE_SYSTEM_SELECTABLE         = 00200000h;
    STATE_SYSTEM_LINKED             = 00400000h;
    STATE_SYSTEM_TRAVERSED          = 00800000h;
    STATE_SYSTEM_MULTISELECTABLE    = 01000000h;  (* Supports multiple selection*)
    STATE_SYSTEM_EXTSELECTABLE      = 02000000h;  (* Supports extended selection*)
    STATE_SYSTEM_ALERT_LOW          = 04000000h;  (* This information is of low priority*)
    STATE_SYSTEM_ALERT_MEDIUM       = 08000000h;  (* This information is of medium priority*)
    STATE_SYSTEM_ALERT_HIGH         = 10000000h;  (* This information is of high priority*)
    STATE_SYSTEM_VALID              = 03FFFFFFFh;

    CCHILDREN_TITLEBAR              =5;
    CCHILDREN_SCROLLBAR             =5;

(*
 * Information about the global cursor.
 *)
TYPE
    CURSORINFO = RECORD
    cbSize      : DWORD;
    flags       : DWORD;
    hCursor     : HCURSOR;
    ptScreenPos : POINT;
    END;
    PCURSORINFO = POINTER TO CURSORINFO;
    LPCURSORINFO  = PCURSORINFO;

CONST
    CURSOR_SHOWING     = 00000001h;

PROCEDURE GetCursorInfo(pci : CURSORINFO) : BOOL;

(*
 * Window information snapshot
 *)
TYPE
    WINDOWINFO = RECORD
    cbSize              : DWORD;
    rcWindow            : RECT;
    rcClient            : RECT;
    dwStyle             : DWORD;
    dwExStyle           : DWORD;
    dwOtherStuff        : DWORD;
    cxWindowBorders     : UINT;
    cyWindowBorders     : UINT;
    atomWindowType      : ATOM;
    wCreatorVersion     : WORD;
    END;
    PWINDOWINFO = POINTER TO WINDOWINFO;
    LPWINDOWINFO =  PWINDOWINFO;

CONST
    WS_ACTIVECAPTION    = 0001h;

PROCEDURE GetWindowInfo(hwnd : HWND; VAR pwi : WINDOWINFO) : BOOL;

(*
 * Titlebar information.
 *)
TYPE
    TITLEBARINFO = RECORD
    cbSize      : DWORD;
    rcTitleBar  : RECT;
    rgstate     : ARRAY [0..CCHILDREN_TITLEBAR+1-1] OF DWORD;
    END;
    PTITLEBARINFO = POINTER TO TITLEBARINFO;
    LPTITLEBARINFO = PTITLEBARINFO;

PROCEDURE GetTitleBarInfo(hwnd : HWND; VAR pti : TITLEBARINFO) : BOOL;

(*
 * Menubar information
 *)

TYPE
    MENUBARINFO = RECORD
    cbSize              : DWORD;
    rcBar               : RECT;  (* rect of bar, popup, item*)
    hMenu               : HMENU; (* real menu handle of bar, popup*)
    hwndMenu            : HWND;  (* hwnd of item submenu if one*)
    fBarFocused         : DWORD;
    (*
    BOOL  fBarFocused:1;  (* bar, popup has the focus*)
    BOOL  fFocused:1;     (* item has the focus*)
    *)
    END;
    PMENUBARINFO = POINTER TO MENUBARINFO;
    LPMENUBARINFO = PMENUBARINFO;

PROCEDURE GetMenuBarInfo(hwnd : HWND;
                         idObject : LONG;
                         idItem : LONG;
                         VAR pmbi : MENUBARINFO) : BOOL;

(*
 * Scrollbar information
 *)
TYPE
    SCROLLBARINFO = RECORD
    cbSize              : DWORD;
    rcScrollBar         : RECT;
    dxyLineButton       : WINT;
    xyThumbTop          : WINT;
    xyThumbBottom       : WINT;
    bogus               : WINT;
    rgstate             : ARRAY [0..CCHILDREN_SCROLLBAR+1-1] OF DWORD;
    END;
    PSCROLLBARINFO = POINTER TO SCROLLBARINFO;
    LPSCROLLBARINFO = PSCROLLBARINFO;

PROCEDURE GetScrollBarInfo(hwnd : HWND;
                           idObject : LONG;
                           VAR psbi : SCROLLBARINFO) : BOOL;

(*
 * Combobox information
 *)

TYPE
    COMBOBOXINFO = RECORD
    cbSize              : DWORD;
    rcItem              : RECT;
    rcButton            : RECT;
    stateButton         : DWORD;
    hwndCombo           : HWND;
    hwndItem            : HWND;
    hwndList            : HWND;
    END;
    PCOMBOBOXINFO = POINTER TO COMBOBOXINFO;
    LPCOMBOBOXINFO = PCOMBOBOXINFO;

PROCEDURE GetComboBoxInfo(hwndCombo : HWND;
                          VAR pcbi : COMBOBOXINFO) : BOOL;

(*
 * The "real" ancestor window
 *)
CONST
    GA_MIC          =1;
    GA_PARENT       =1;
    GA_ROOT         =2;
    GA_ROOTOWNER    =3;
    GA_MAC          =4;

PROCEDURE GetAncestor(hwnd : HWND;
                      gaFlags : UINT) : HWND;

(*
 * This gets the REAL child window at the point.  If it is in the dead
 * space of a group box, it will try a sibling behind it.  But static
 * fields will get returned.  In other words, it is kind of a cross between
 * ChildWindowFromPointEx and WindowFromPoint.
 *)

PROCEDURE RealChildWindowFromPoint(hwndParent : HWND;
                                   ptParentClientCoords : VALUE POINT) : HWND;


(*
 * This gets the name of the window TYPE, not class.  This allows us to
 * recognize ThunderButton32 et al.
 *)

PROCEDURE RealGetWindowClassA(hwnd : HWND;
                              VAR pszType : ARRAY OF ACHAR;
                              cchType : UINT) : UINT;

PROCEDURE RealGetWindowClassW(hwnd : HWND;
                              VAR pszType : ARRAY OF UCHAR;
                              cchType : UINT) : UINT;
(*
 * This gets the name of the window TYPE, not class.  This allows us to
 * recognize ThunderButton32 et al.
 *)

%IF UNICODE %THEN
PROCEDURE RealGetWindowClass = RealGetWindowClassW;
%ELSE
PROCEDURE RealGetWindowClass = RealGetWindowClassA;
%END

(*
 * Alt-Tab Switch window information.
 *)
TYPE
    ALTTABINFO = RECORD
    cbSize              : DWORD;
    cItems              : WINT;
    cColumns            : WINT;
    cRows               : WINT;
    iColFocus           : WINT;
    iRowFocus           : WINT;
    cxItem              : WINT;
    cyItem              : WINT;
    ptStart             : POINT;
    END;
    PALTTABINFO = POINTER TO ALTTABINFO;
    LPALTTABINFO = PALTTABINFO;

PROCEDURE GetAltTabInfoA(hwnd : HWND;
                         iItem : WINT;
                         pati : PALTTABINFO;
                         VAR pszItemText : ARRAY OF ACHAR;
                         cchItemText : UINT) : BOOL;

PROCEDURE GetAltTabInfoW(hwnd : HWND;
                         iItem : WINT;
                         pati : PALTTABINFO;
                         VAR pszItemText : ARRAY OF UCHAR;
                         cchItemText : UINT) : BOOL;

%IF UNICODE %THEN
PROCEDURE GetAltTabInfo = GetAltTabInfoW;
%ELSE
PROCEDURE GetAltTabInfo = GetAltTabInfoA;
%END

(*
 * Listbox information.
 * Returns the number of items per row.
 *)

PROCEDURE GetListBoxInfo(hwnd : HWND) : DWORD;

(*NT only*)
PROCEDURE LockWorkStation() : BOOL;

(*NT only*)
PROCEDURE UserHandleGrantAccess(hUserHandle : HANDLE;
                                hJob : HANDLE) : BOOL;

END WINUSER.
