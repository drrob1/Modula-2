DEFINITION MODULE TIMLIBg;
(*
  REVISION HISTORY
  ----------------
   6 Oct 13 -- Converted to gm2.  And changed its name.
*)

  FROM UTILLIBg IMPORT STRTYP,STR10TYP,BUFTYP;
(*
  EXPORT QUALIFIED DAYNAMES,GETNEWDATE,TIME2MDY,MDY2TIME,MDY2STR,GREG2JUL,
    JUL2GREG,GETMDY,JULIAN,GREGORIAN;
*)
  TYPE
    DAYNAMESType = ARRAY [1..7] OF STR10TYP;
    MONTHNAMESType = ARRAY [1..12] OF STR10TYP;
  CONST
    DAYNAMES = DAYNAMESType{'Sunday', 'Monday', 'Tuesday',  'Wednesday',
                               'Thursday', 'Friday', 'Saturday'};
    MONTHNAMES = MONTHNAMESType{'January','February','March','April','May',
      'June','July','August','September','October','November','December'};

PROCEDURE GETNEWDATE(VAR M,D,YEAR : CARDINAL);
(*
****************************** GETNEWDATE *******************************
This subroutine does what its name says, gets the new system date by
allowing for date arithmetic relative to the previous system date.
*)

PROCEDURE TIME2MDY(VAR M,D,Y : CARDINAL);
(*
*********************************** TIME2MDY *************************
System Time To Month, Day, and Year Conversion.
This routine reads the system clock with the GetTime procedure and extracts
the components, putting them into their respective variables.
*)

PROCEDURE MDY2TIME(M,D,Y : CARDINAL);
(*
*********************************** MDY2TIME ************************
Month, Day and Year To System Date Conversion.
This routine sets the system clock with the SetTime procedure and 
replaces the date with the M,D,Y parameters.  A fresh call to GetTime
procedure is made as to minimize the replacement of a new time for an 
old time effect.
*)

PROCEDURE MDY2STR(M,D,Y : CARDINAL; VAR MDYSTR : ARRAY OF CHAR);
(*
***************************** MDY2STR *********************************
Month Day Year Cardinals To String.
This routine converts the Month, Day, and Year input cardinals to a string
format.
*)

PROCEDURE GREG2JUL(M,D,Y : CARDINAL; VAR JULDATE : LONGREAL);
(*
******************************* GREG2JUL *********************************
Gregorian To Julian Date Conversion Routine.
This routine computes the Julian Date from the standard calendar date
format.  The formula is J := [365.25 Y0] + [30.6001 M0] + D + 1,720,982.
Y0 and M0 are the modified year and month, to account for the changes
imposed by leap years.
Reals must be used because the size and precision required to manipulate the
Julian dates exceeds that of cards or ints.  Longcards would obviate this
problem, but V2.0 of Logitechs Mod-2 compiler does not support them.

If the result returned is zero, one of the input params to the subroutine
was out of range.

INPUT FROM GLOBAL VARS : FUDGEFACTOR.
*)

PROCEDURE JUL2GREG(JULDATE : LONGREAL; VAR M,D,Y : CARDINAL);
(*
************************************ JUL2GREG ***************************
Julian to Gregorian Date Conversion Routine.
This converts from the Julian date back to the conventional date format.

Year will be returned as zero if JULDATE was out of range.

INPUT FROM GLOBAL VARS : FUDGEFACTOR.
*)

PROCEDURE GETMDY(INBUF : BUFTYP; VAR M,D,Y : CARDINAL);
(*
********************************** GETMDY *****************************
GET MONTH DAY YEAR.
This procedure parses the input string into the month, day and year.  Any
delimiters can be used because the parsing process uses a finite state
automata algorithm (part of the TOKENIZE module) to parse the input line.
If an error occurs, then Y is returned as zero.
*)

PROCEDURE JULIAN(M,D,Y : CARDINAL) : LONGCARD;

PROCEDURE GREGORIAN(Juldate : LONGCARD; VAR M,D,Y : CARDINAL);

END TIMLIBg.

