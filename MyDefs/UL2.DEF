DEFINITION MODULE UL2;

  FROM SYSTEM IMPORT BYTE,WORD,ADDRESS;
  FROM UTILLIB IMPORT BUFSIZ,NULL,BLANK,CTRLCOD,STRTYP,STR10TYP,BUFTYP;
(*
  EXPORT QUALIFIED COPYLEFT,COPYRIGHT,FILLCHAR,SCANFWD,SCANBACK,CopyWords,
    FillWord,STRLENFNT,STRCMPFNT,LCHINBUFFNT,MRGBUFS,TRIMFNT,TRIM,RMVCHR,
    APPENDA2B,CONCATAB2C,INSERTAin2B,ASSIGN2BUF,GETFNM;
*)

PROCEDURE COPYLEFT(saddr,daddr : ADDRESS; Nbytes : CARDINAL);
(*
********************************** COPYLEFT *******************************
COPY forward and to the LEFT.
Copies from source to destination the number of bytes specified in Nbytes,
copying in a forward direction.  In overlapping situations, use this
procedure only to shift bytes to the LEFT.  Bypasses type, range & index
checking -- Use with care.
Assume Source & Destination to be of SIZE at least Nbytes.  That rules out
the possibility of running up against segment boundaries.
*)

PROCEDURE COPYRIGHT(saddr,daddr : ADDRESS; Nbytes : CARDINAL);
(*
*********************************** COPYRIGHT ******************************
COPY backward and to the RIGHT.
Copies from source to destination the number of bytes specified in Nbytes,
copying in a backword direction.  In overlapping situations, use this
procedure only to shift bytes to the RIGHT.  Bypasses type, range &
index checking -- Use with care.
Assume Source & Destination to be of SIZE at least Nbytes.  That rules out
the possibility of running up against segment boundaries.
*)

PROCEDURE FILLCHAR(daddr : ADDRESS; Nbytes : CARDINAL; ch : CHAR);
(*
****************************** FILLCHAR *******************************
Fill Char.
Does just that.  Bypasses type, range & index checking -- Use with care.
Assume Destination to be of SIZE at least Nbytes.  That rules out the
possibility of running up against segment boundaries.
*)

PROCEDURE SCANFWD(daddr : ADDRESS; Nbytes : CARDINAL; ch : CHAR; 
                                               equal : BOOLEAN) : CARDINAL;
(*
********************************** SCANFWD *******************************
Scan Forward.
Scans forward Nbytes number of bytes for byte value of ch, returns number of
bytes scanned if successful, and Nbytes+1 if unsuccessful.  Stops at equality
if equal=TRUE, and at inequality if equal=FALSE.  
Bypasses type, range & index checking -- Use with care.
Assume Destination to be of SIZE at least Nbytes.  That rules out the
possibility of running up against segment boundaries.
*)

PROCEDURE SCANBACK(daddr : ADDRESS; Nbytes : CARDINAL; ch : CHAR; 
                                               equal : BOOLEAN) : CARDINAL;
(*
********************************** SCANBACK *******************************
Scan Backward.
Scans backward Nbytes number of bytes for byte value of ch, returns number of
bytes scanned if successful, and 0 if unsuccessful.  Stops at equality
if equal=TRUE, and at inequality if equal=FALSE.  
Bypasses type, range & index checking -- Use with care.
Assume Destination to be of SIZE at least Nbytes.  That rules out the
possibility of running up against segment boundaries.
*)

PROCEDURE FillWord(daddr : ADDRESS; Nwords : CARDINAL; val : WORD);
(*
***************************** FillWord ************************************
Fill Word.
Does just that.  Bypasses type, range & index checking -- Use with care.
Assume Destination to be of SIZE at least Nbytes.  That rules out the
possibility of running up against segment boundaries.
*)

PROCEDURE CopyWords(saddr,daddr : ADDRESS; Nwords : CARDINAL);
(*
*************************** CopyWord ***************************************
Does just that.  Bypasses type, range & index checking -- Use with care.
Assume Source & Destination to be of SIZE at least Nwords.  That rules out
the possibility of running up against segment boundaries.
*)


PROCEDURE STRLENFNT(CHARRAY : ARRAY OF CHAR) : CARDINAL;
(*
******************************* STRLENFNT ***********************************
STRING LENGTH FUNCTION.
THIS FUNCTION GETS THE STRING LENGTH BY LOOKING FOR THE NULL IN THE STRING.
IT RETURNS THE ACTUAL NUMBER OF CHARS, NOT THE SUBSCRIPT OF THE HIGHEST 
NON-NULL ELEMENT.  REMEMBER THAT THE HIGH STANDARD PROCEDURE RETURNS THE
NUMBER OF ELEMENTS - 1 SINCE IT RETURNS THE UPPER BOUND OF A ZERO ORIGIN ARRAY.
THEREFORE, #OFELE := HIGH(CHARRAY) + 1

*)

PROCEDURE STRCMPFNT(STR1,STR2 : ARRAY OF CHAR) : INTEGER;
(*
*********************************** STRCMPFNT *******************************
STRING COMPARE FUNCTION.
THIS FUNCTION DOES A COMPARISON OF STRINGS, RETURNING:
  STR1 < STR2 MEANS RETURN A NUMBER < 0
  STR1 = STR2 MEANS RETURN A NUMBER = 0
  STR1 > STR2 MEANS RETURN A NUMBER > 0

IF STR1 IS A SUBSTRING OF STR2, THEN IT IS CONSIDERED < IT.  FOR TWO STRINGS
TO BE =, THEIR COUNT OF CHARACTERS (LENGTHS) ALSO MUST BE EQUAL.

*)

PROCEDURE LCHINBUFFNT(BUF : BUFTYP; CH : CHAR) : CARDINAL;
(*
************************************ LCHINBUFFNT *****************************
LAST CHARACTER IN BUFFER FUNCTION.
THIS FUNCTION SEARCHES THE BUFFER INPUT AS ITS BUFTYP PARAM FOR THE CHARACTER
INPUT AS ITS CHAR PARAM.  IT SEARCHES FROM THE END TO THE BEGINNING, SO WILL
FIND THE LAST SUCH CHARACTER IN THE BUFFER.  IT WILL RETURN 0 IF THE CHARACTER
WAS NOT FOUND.  THE NUMBER RETURNED WILL BE RELATIVE TO A ONE-ORIGIN STRING,
AS IS THE CHARS FIELD OF BUFTYP.

*)

PROCEDURE APPENDA2B(BufA : BUFTYP; VAR BufB : BUFTYP);
(*
****************************** APPENDA2B ********************************
Append A buffer to B buffer.
This routine will append the first buffer to the second.
*)

PROCEDURE CONCATAB2C(BufA,BufB : BUFTYP; VAR BufC : BUFTYP);
(*
****************************** APPENDAB2C ********************************
Concatenate A and to B buffers and store into C buffer.
*)

PROCEDURE MRGBUFS(VAR BUF1 : BUFTYP; BUF2 : BUFTYP);
(*
****************************** MRGBUFS ***********************************
MERGE BUFFERS.
THIS ROUTINE WILL CONCATENATE THE TWO BUFFERS INPUT TO IT BY APPENDING THE
SECOND TO THE FIRST, SORT OF LIKE BUF1 = BUF1 + BUF2.
*)

PROCEDURE TRIMFNT(BUF : BUFTYP) : CARDINAL;
(*
****************************** TRIMFNT **************************
TRIM FUNCTION.
  
  This routine will trim the line passed to it by first looking for
  the null char and then scanning backward looking for the
  first non-blank character.  That is, trailing blanks are deleted,
  or trimmed.  A length of zero means a blank line 
  was input.  This is the preferred call to achieve this goal.  The
  getcnt procedure is still implemented for upward compatibility
  purposes.

  BUF -- BUFFER CONTAINING LINE TO SEARCH.
  
  INPUT FROM GBLVAR: BLANK
*) 

PROCEDURE TRIM(VAR BUF : BUFTYP);
(*
****************************** TRIM **************************
TRIM Procedure.
  
  This routine will trim the line passed to it by first looking for
  the null char and then scanning backward looking for the
  first non-blank character.  That is, trailing blanks are deleted,
  or trimmed.  A length of zero means a blank line 
  was input.  This is the preferred call to achieve this goal.  The
  GETCNT procedure is still implemented for upward compatibility
  purposes.  In this procedure, the BUF.COUNT field is set, whereas in
  the TRIMFNT function, this field is not set but merely determined.

  BUF -- BUFFER CONTAINING LINE TO SEARCH.
  
  INPUT FROM GBLVAR: BLANK
*) 

PROCEDURE INSERTAin2B(SBUF : BUFTYP; VAR DBUF : BUFTYP; POSN : CARDINAL);
(*
********************************INSERTAin2B ******************************
INSERT A string into B string.
Inserts the first string into the 2-nd string at the POSN specified.
*)

PROCEDURE RMVCHR(VAR BUF : BUFTYP; STRTCL,RMVCNT : CARDINAL);
(*
*************************** RMVCHR *********************************
THE PURPOSE OF THIS ROUTINE IS TO REMOVE ANY NUMBER OF CHARS FROM THE
INPUT RECORD, BUF.

RMVCNT--COUNT OF CHAR'S TO BE REMOVED.
STRTCL--STARTING COLUMN OF CHARS TO BE REMOVED.
BUF   --ARRAY OF CHAR'S TO BE PROCESSED.
*)

PROCEDURE ASSIGN2BUF(CHARRAY : ARRAY OF CHAR; VAR BUF : BUFTYP);
(*
******************************* ASSIGN2BUF *********************************
ASSIGN string TO BUFFER.
THE PURPOSE OF THIS PROCEDURE IS TO DEVIATE FROM THE STANDARD DEFINITION OF
THE CHARACTER STRING IN THAT THE STANDARD REQUIRES STRING ARRAYS TO BEGIN AT
THE 0-TH ELEMENT, AND THIS IS NOT CONVENIENT.  TO ALLOW THE STRING ARRAYS TO
BEGIN AT THE 1-ST ELEMENT, CONVERSION PROCEDURES BETWEEN THE STANDARD AND
CREATED STRING TYPES IS NEEDED.
    THIS PROCEDURE CONVERTS FROM A COMPILER STD 0-TH ELEMENT CHAR ARRAY INTO
THE BUF TYPE USED BY THIS PROGRAM.

INPUT PARAMS:  CHARRAY--INPUT ARRAY OF CHARACTER IN STD FORMAT (BEGIN AT 0).
               CNT--COUNT OF CHARS IN INPUT ARRAY.
OUTPUT PARAMS: BUF--OUTPUT STRING IN BUFFER TYPE AS USED BY THIS PGM.
*)

(*  Now moved to MyFIO where it always belonged.
PROCEDURE GETFNM(PROMPT,NAMDFT,TYPDFT : BUFTYP; VAR FILNAM : BUFTYP); 
********************************** GETFNM *******************************
GET FILE NAME SUBROUTINE.
THIS ROUTINE WILL GET A FILE NAME FROM THE TERMINAL, AND ALLOW DEFAULTS 
FOR THE ENTIRE FILE NAME AND/OR THE EXTENSION.
PROMPT--THIS IS THE PROMPT TO BE PRINTED TO THE TERMINAL BEFORE THE 
      FILENAME IS REQUESTED.  IT MUST HAVE A COLON, : , AS ITS LAST
      CHARACTER TO OPERATE NORMALLY.
NAMDFT--THIS IS THE NAME DEFAULT STRING THAT HAS THE FILE NAME THAT WILL
      BE USEDIF NO INPUT NAME IS ENTERED.  THIS MUST HAVE THE .EXT AS 
      WELL AS THE NAME PART; THE TYPDFT WILL NOT BE APPENDED TO THE 
      DEFAULT NAME.  
TYPDFT--IS A 4 BYTE ARRAY THAT IS THE DEFAULT TYPE (EXTENSION) OF THE
      FILE.  IF A DOT IS NOT PRESENT IN THE INPUT CHARACTER STRING,
      THIS ARRAY WILL BE APPENDED TO THE INPUT STRING TO YIELD THE
      FULL FILENAME.
FILNAM--IS THE OUTPUT FILENAME THAT IS A COMBINATION OF THE INPUT
    STRING, THE TYPE DEFAULT, AND THE NAME DEFAULT, AS IS APPROPRIATE.

FUNCTION VALUE RETURNED WILL BE FALSE IF THE DEFAULT NAME WAS USED, I.E.,
NO NAME WAS INPUT FROM TERMINAL.  FUNCTION VALUE WILL BE TRUE OTHERWISE.
  IF A NAME IS INPUT WITHOUT AN EXTENSION, BEFORE THE DEFAULT EXTENSION IS
APPENDED, IT IS STORED IN THE TMPNAM BUFFER.  WHEN NO STRING IS INPUT, THIS
NAME WITH THE DEFAULT EXTENSION APPENDED IS USED BEFORE THE FULL DEFAULT NAME
IS.

INPUT FROM GBL VAR'S:  NULL, BLANK.
*) 

END UL2.

