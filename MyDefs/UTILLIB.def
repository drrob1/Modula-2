DEFINITION MODULE UTILLIB;

FROM SYSTEM IMPORT ADDRESS;

CONST
    BUFSIZ    = 255;
    CR        = 15C; (* CHR(13) *)
    LF        = 12C; (* CHR(10) *)
    EOFMARKER = 032C; (* CHR(26) OR CTRL-Z *)
    MAXCARD   = 0FFFFH;
    MAXINT    = 7FFFH;
    MININT    = 8000H;
    ESC       = 33C; (* CHR(27) *)
    NULL      = 0C;
    BLANK     = ' ';
    CTRLCOD   = 31;
    nul       = 0C;
    cr        = CR;
    lf        = LF;

TYPE
(* THE TYPE HAS ONE MORE THAN BUFSIZ SO ARRAY SUBSCRIPT ERRORS ARE AVOIDED. *)
  STRTYP   = ARRAY [1..BUFSIZ+1] OF CHAR;(* NOW COMPATIBLE WITH BUFTYP.CHARS *)
  BUFTYP = RECORD
    CHARS : STRTYP; (* ARRAY [1..BUFSIZ+1] OF CHAR; *)
    LENGTH,           (* NUMBER OF CHARS IN BUF NOT INCLG SPECIAL CHARS.*)
    COUNT : CARDINAL; (* TOTAL NUMBER OF CHARS IN BUF *)
  END(*RECORD*);
  STR10TYP   = ARRAY [0..10] OF CHAR;
  STR20TYP = ARRAY [0..20] OF CHAR;
  LONGBITSET = SET OF [0..31];

  StringItemPointerType = POINTER TO StringItemType;
  StringItemType    = RECORD
                            Prev : StringItemPointerType;
                            S    : BUFTYP;
                            Next : StringItemPointerType;
                      END; (* StringItemType Record *)


  StringDoubleLinkedListType = RECORD
                  StartOfList, EndOfList, CurrentPlaceInList, PrevPlaceInList : StringItemPointerType;
                  len,NextPosition : CARDINAL;    (* NextPosition is to be used by NextStringFromList *)
  END; (* StringDoubleLinkedListType Recored *)

  StringDoubleLinkedListPointerType = POINTER TO StringDoubleLinkedListType;





PROCEDURE STRLENFNT(CHARRAY : ARRAY OF CHAR) : CARDINAL;
(*
STRING LENGTH FUNCTION.
This function gets the string length by looking for the null in the
string.  It returns the actual number of chars, not the subscript of
the highest non-null element.  Remember that the HIGH standard
procedure returns the number of elements - 1 because it returns the
upper bound of a zero origin array.
Therefore, #OFELE := HIGH(CHARRAY) + 1; this condition is met
by returning a post incremented pointer.

*)

PROCEDURE STRCMPFNT(STR1,STR2  : ARRAY OF CHAR) : INTEGER;
PROCEDURE stricmpfnt(STR1,STR2 : ARRAY OF CHAR) : INTEGER;

(*
STRing CoMPare FuNcTion.
This function does a comparison of strings, returning:
  STR1 < STR2 means return a number < 0
  STR1 = STR2 means return a number = 0
  STR1 > STR2 means return a number > 0

If STR1 is a substring of STR2, then it is considered < it.  For two strings
to be =, their count of characters (lengths) also must be equal.

Either a case sensitive or case insensitive operation is performed.

*)

PROCEDURE SubStrCMPFNT(STR1,STR2 : ARRAY OF CHAR) : BOOLEAN;
(*
SubString  CoMPare FuNcTion.
This function does a comparison of strings, returning true if the first chars of
one string equals the other, ignoring string lenghts.  This is the difference
between this function and STRCMPFNT.

*)


PROCEDURE LCHINBUFFNT(BUF:BUFTYP; CH:CHAR) : CARDINAL;
(*
LAST CHARACTER IN BUFFER FUNCTION.
THIS FUNCTION SEARCHES THE BUFFER INPUT AS ITS BUFTYP PARAM FOR THE CHARACTER
INPUT AS ITS CHAR PARAM.  IT SEARCHES FROM THE END TO THE BEGINNING, SO WILL
FIND THE LAST SUCH CHARACTER IN THE BUFFER.  IT WILL RETURN 0 IF THE CHARACTER
WAS NOT FOUND.  THE NUMBER RETURNED WILL BE RELATIVE TO A ONE-ORIGIN STRING,
AS IS THE CHARS FIELD OF BUFTYP.

*)

PROCEDURE MAXCARDFNT(C1,C2 : CARDINAL) : CARDINAL;
(*
MAXIMUM CARDINAL FUNCTION.
THIS FUNCTION WILL RETURN THE MAXIMUM VALUE OF THE PARAMETERS PASSED TO IT.
THAT IS, THE HIGHER OF THE TWO VALUES WILL BE RETURNED.  FOR GREATER THAN
TWO PARAMS, NEST THEM LIKE IN F(F(F(C1,C2),C3),C4).

*)

PROCEDURE MRGBUFS(VAR BUF1 : BUFTYP; BUF2 : BUFTYP);
(*
MERGE BUFFERS.
THIS ROUTINE WILL CONCATENATE THE TWO BUFFERS INPUT TO IT BY APPENDING THE
SECOND TO THE FIRST, SORT OF LIKE BUF1 = BUF1 + BUF2.
*)

PROCEDURE TRIMFNT(BUF : BUFTYP) : CARDINAL;
(*
TRIM FUNCTION.

  This routine will trim the line passed to it by first looking for
  the null char and then scanning backward looking for the
  first non-blank character.  That is, trailing blanks are deleted,
  or trimmed.  A length of zero means a blank line
  was input.  This is the preferred call to achieve this goal.  The
  getcnt procedure is still implemented for upward compatibility
  purposes.

  BUF -- BUFFER CONTAINING LINE TO SEARCH.

  INPUT FROM GBLVAR: BLANK
*)

PROCEDURE TRIM(VAR BUF : BUFTYP);
(*
TRIM Procedure.

  This routine will trim the line passed to it by first looking for
  the null char and then scanning backward looking for the
  first non-blank character.  That is, trailing blanks are deleted,
  or trimmed.  A length of zero means a blank line
  was input.  This is the preferred call to achieve this goal.  The
  GETCNT procedure is still implemented for upward compatibility
  purposes.  In this procedure, the BUF.COUNT field is set, whereas in
  the TRIMFNT function, this field is not set but merely determined.

  BUF -- BUFFER CONTAINING LINE TO SEARCH.

  INPUT FROM GBLVAR: BLANK
*)

PROCEDURE ISCTRL(CH : CHAR) : BOOLEAN;
(*
THIS FUNCTION WILL BE TRUE IF CHAR IS AN ASCII CONTROL CODE, IE,
IT HAS A VALUE <= 31, ELSE THIS FUNCTION WILL BE FALSE.
*)

PROCEDURE ISDGT(CH : CHAR) : BOOLEAN;
(*
ISDIGIT FUNCTION.  FUNCTION WILL BE TRUE IF CHAR IS A DIGIT, FALSE OTHERWISE.
*)

PROCEDURE UPRCAS(CH:CHAR):CHAR;

PROCEDURE APPENDA2B(BufA : BUFTYP; VAR BufB : BUFTYP);
(*
Append A buffer to B buffer.
This routine will append the first buffer to the second.
*)

PROCEDURE CONCATAB2C(BufA,BufB : BUFTYP; VAR BufC : BUFTYP);
(*
Concatenate A and B buffers and store into C buffer.
*)

PROCEDURE INSERTAin2B(SBUF : BUFTYP; VAR DBUF : BUFTYP; POSN : CARDINAL);
(*
INSERT A string into B string.
Inserts the first string into the 2-nd string at the POSN specified.
*)

PROCEDURE RMVCHR(VAR BUF : BUFTYP; STRTCL,RMVCNT : CARDINAL);
(*
THE PURPOSE OF THIS ROUTINE IS TO REMOVE ANY NUMBER OF CHARS FROM THE
INPUT RECORD, BUF.

RMVCNT--COUNT OF CHAR'S TO BE REMOVED.
STRTCL--STARTING COLUMN OF CHARS TO BE REMOVED.
BUF   --ARRAY OF CHAR'S TO BE PROCESSED.
*)

PROCEDURE ASSIGN2BUF(CHARRAY : ARRAY OF CHAR; VAR BUF : BUFTYP);
(*
ASSIGN string TO BUFfer.
THE PURPOSE OF THIS PROCEDURE IS TO DEVIATE FROM THE STANDARD DEFINITION OF
THE CHARACTER STRING IN THAT THE STANDARD REQUIRES STRING ARRAYS TO BEGIN AT
THE 0-TH ELEMENT, AND THIS IS NOT CONVENIENT.  TO ALLOW THE STRING ARRAYS TO
BEGIN AT THE 1-ST ELEMENT, CONVERSION PROCEDURES BETWEEN THE STANDARD AND
CREATED STRING TYPES IS NEEDED.
    THIS PROCEDURE CONVERTS FROM A COMPILER STD 0-TH ELEMENT CHAR ARRAY INTO
THE BUF TYPE USED BY THIS PROGRAM.

INPUT PARAMS:  CH--INPUT ARRAY OF CHARACTER IN STD FORMAT (BEGIN AT 0).
               CNT--COUNT OF CHARS IN INPUT ARRAY.
OUTPUT PARAMS: BUF--OUTPUT STRING IN BUFFER TYPE AS USED BY THIS PGM.
*)

PROCEDURE COPYLEFT(saddr,daddr : ADDRESS; Nbytes : CARDINAL);
(*
COPY forward and to the LEFT.
Copies from source to destination the number of bytes specified in Nbytes,
copying in a forward direction.  In overlapping situations, use this
procedure only to shift bytes to the LEFT.  Bypasses type, range & index
checking -- Use with care.
Assume Source & Destination to be of SIZE at least Nbytes.  That rules out
the possibility of running up against segment boundaries.
*)

PROCEDURE COPYRIGHT(saddr,daddr : ADDRESS; Nbytes : CARDINAL);
(*
COPY backward and to the RIGHT.
Copies from source to destination the number of bytes specified in Nbytes,
copying in a backword direction.  In overlapping situations, use this
procedure only to shift bytes to the RIGHT.  Bypasses type, range &
index checking -- Use with care.
Assume Source & Destination to be of SIZE at least Nbytes.  That rules out
the possibility of running up against segment boundaries.
*)

PROCEDURE FILLCHAR(daddr : ADDRESS; Nbytes : CARDINAL; ch : CHAR);
(*
Fill Char.
Does just that.  Bypasses type, range & index checking -- Use with care.
Assume Destination to be of SIZE at least Nbytes.  That rules out the
possibility of running up against segment boundaries.
*)

PROCEDURE SCANFWD(daddr : ADDRESS; Nbytes : CARDINAL; ch : CHAR;
                                               equal : BOOLEAN) : CARDINAL;
(*
Scan Forward.
Scans forward Nbytes number of bytes for byte value of ch, returns number of
bytes scanned if successful, and Nbytes+1 if unsuccessful.  Stops at equality
if equal=TRUE, and at inequality if equal=FALSE.
Bypasses type, range & index checking -- Use with care.
Assume Destination to be of SIZE at least Nbytes.  That rules out the
possibility of running up against segment boundaries.
*)

PROCEDURE SCANBACK(daddr : ADDRESS; Nbytes : CARDINAL; ch : CHAR;
                                               equal : BOOLEAN) : CARDINAL;
(*
Scan Backward.
Scans backward Nbytes number of bytes for byte value of ch, returns number of
bytes scanned if successful, and 0 if unsuccessful.  Stops at equality
if equal=TRUE, and at inequality if equal=FALSE.
Bypasses type, range & index checking -- Use with care.
Assume Destination to be of SIZE at least Nbytes.  That rules out the
possibility of running up against segment boundaries.
*)

PROCEDURE InitStringListPointerType() : StringDoubleLinkedListPointerType;
(*
PROCEDURE InitStringListPointerType(VAR sp : StringDoubleLinkedListPointerType) : StringDoubleLinkedListPointerType;
  Purpose of this routine is to init all the fields to either NIL or zero.
*)


PROCEDURE AppendStringToList(StringListP : StringDoubleLinkedListPointerType; strng : ARRAY OF CHAR);

PROCEDURE NextStringFromList(StringListP : StringDoubleLinkedListPointerType);

PROCEDURE GetNextStringFromList(StringListP : StringDoubleLinkedListPointerType) : StringItemPointerType;

PROCEDURE CurrentPointerBeginning(StringListP : StringDoubleLinkedListPointerType);

PROCEDURE CurrentPointerEnding(StringListP : StringDoubleLinkedListPointerType);

PROCEDURE PrevStringFromList(StringListP : StringDoubleLinkedListPointerType);

PROCEDURE GetPrevStringFromList(StringListP : StringDoubleLinkedListPointerType) : StringItemPointerType;

PROCEDURE DisposeStringListPointerType(VAR INOUT StringListP : StringDoubleLinkedListPointerType);
  
PROCEDURE RemoveFirstStringFromList(StringListP : StringDoubleLinkedListPointerType);
PROCEDURE RemoveLastStringFromList(StringListP : StringDoubleLinkedListPointerType);

END UTILLIB.
