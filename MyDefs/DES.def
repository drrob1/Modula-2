DEFINITION MODULE DES;
(* implements the DES encryption algorithm in various forms.
   Single DES
   Triple DES
       3-key EDE(encrypt-decrypt-encrypt)
       2-key EDE

   ECB, CBC and CFB modes are supported.
*)

%IF DLL %THEN
<*/EXPORTALL/PROPAGATEEXCEPTIONALL/COPYATTRIBUTES*>
%END

FROM SYSTEM IMPORT
    BYTE, ADDRESS;

CONST
    BlockSize   = 8;(* bytes *)
    (* input data size for ECB and CBC modes must be an even multiple of this size.

       in CFB mode the very last block of a complete data stream is allowed to be
       smaller than the cipher block size.

       a common block padding algorithm used in many standards is RFC 1423.
       the CryptEncode module provides functions to pad an unpad data blocks using
       this algorithm.
    *)

TYPE
    DES;

    (* DES only uses 7-bits of each byte in a key.
       bit 0 of each byte is ignored and can be used as a parity bit.
    *)
    Key1        = ARRAY [0..7] OF BYTE;(* 56-bit *)
    Key2        = ARRAY [1..2] OF Key1;(* 2 keys, 112-bit EDE DES *)
    Key3        = ARRAY [1..3] OF Key1;(* 3 keys, 168-bits EDE DES *)
(*
    note that if each of the three keys are identical in Triple DES you get a single DES
    compatible result, albeit a slower implementation than pure single DES.
*)

    IV = (* initial vector for CBC and CFB modes *)
    RECORD
    CASE : BOOLEAN OF
    FALSE: bytes        : ARRAY [0..BlockSize-1] OF CARDINAL8;|
    TRUE: dwords        : ARRAY [0..(BlockSize/4)-1] OF CARDINAL32;
    END;
    END;

PROCEDURE SetParity(VAR INOUT key : ARRAY OF Key1);
(*
  this will correctly set the parity bit.
  this is not normally needed except for code that checks the parity
  bit for "errors".
*)

PROCEDURE CheckParity(key : ARRAY OF Key1) : BOOLEAN;
(*
  returns TRUE if the DES key parity is correctly set for each byte.
*)

PROCEDURE Create(key : ARRAY OF Key1) : DES;
(*
  create a new DES encryption object with the given key.
  the passed key size must be equal to Key1, Key2 or Key3, otherwise
  this function fails. failure is indicated by a NIL return value.

  the returned object is ready to encrypt/decrypt data.

   only one thread at a time can use an encryption object, except for ECB mode.
*)

PROCEDURE Destroy(VAR INOUT crypt : DES);
(* destroy a previously created encryption object *)

PROCEDURE ResetIV(crypt : DES; iv : IV);
(*
   reset the encryption engine with the specific IV.
   you only need use this call with the CBC and CFB encryption routines.
   you must reset the IV before you encrypt/decrypt each unique
   data stream.
*)

PROCEDURE EncryptECB(crypt : DES; input, output : ADDRESS; amount : CARDINAL);
PROCEDURE EncryptCBC(crypt : DES; input, output : ADDRESS; amount : CARDINAL);
PROCEDURE EncryptCFB(crypt : DES; input, output : ADDRESS; amount : CARDINAL);
(*
  encrypt a block of data of size amount.
  you can encrypt a large data stream in multiple smaller pieces using this call.
  you can pass the same variable to both input and output should you so desire.
  this procedure expects the buffers have a minimum of 4-byte alignment.
  amount must be an even multiple of the block size.

  ECB = Electronic code book.
        C[i] := Encrypt(P[i])
  CBC = cipher block chaining.
        C[i] := Encrypt(C[i-1] BXOR P[i])
        You must have setup an IV via ResetIV to use CBC.
  CFB = cipher feedback.
        C[i] := Encrypt(C[i-1]) BXOR P[i]
        You must have setup an IV via ResetIV to use CFB.
        In CFB mode the data stream does not need to be an even multiple of
        the block size. the very last "block" in the stream can be a partial block.
        if you are processing a large stream in multiple smaller pieces (buffers),
        all buffers must be an even multiple, except the very last one.
*)

PROCEDURE DecryptECB(crypt : DES; input, output : ADDRESS; amount : CARDINAL);
PROCEDURE DecryptCBC(crypt : DES; input, output : ADDRESS; amount : CARDINAL);
PROCEDURE DecryptCFB(crypt : DES; input, output : ADDRESS; amount : CARDINAL);
(*
  decrypt a block of data of size amount.
  you can decrypt a large data stream in multiple smaller pieces using this call.
  you can pass the same variable to both input and output should you so desire.
  this procedure expects the buffers have a minimum of 4-byte alignment.
  amount must be an even multiple of the block size.

  ECB = Electronic code book.
        P[i] := Decrypt(C[i])
  CBC = cipher block chaining.
        P[i] := Decrypt(C[i]) BXOR C[i-1]
        You must have setup an IV via ResetIV to use CBC.
  CFB = cipher feedback.
        P[i] := Encrypt(C[i-1]) BXOR C[i]
        You must have setup an IV via ResetIV to use CFB.
        In CFB mode the data stream does not need to be an even multiple of
        the block size. the very last "block" in the stream can be a partial block.
        if you are processing a large stream in multiple smaller pieces (buffers),
        all buffers must be an even multiple, except the very last one.
*)

PROCEDURE SelfTest() : BOOLEAN;
(*
  returns TRUE if the implemented algorithm properly operates.
  this call is only useful when porting this code to some other processor/compiler.
*)

END DES.
